{"version":3,"file":"n2wordsumd.js","sources":["lib/classes/AbstractLanguage.mjs","lib/i18n/RU.mjs","lib/i18n/HE.mjs"],"sourcesContent":["/**\r\n * Creates new language class that processes decimals separately.\r\n * Requires implementing `toCardinal`.\r\n */\r\nexport default class {\r\n  #negativeWord;\r\n  #separatorWord;\r\n  #zero;\r\n  #spaceSeparator;\r\n  #wholeNumber;\r\n\r\n  /**\r\n   * @param {object} options Options for class.\r\n   * @param {string} [options.negativeWord = ''] Word that precedes a negative number (if any).\r\n   * @param {string} options.separatorWord Word that separates cardinal numbers (i.e. \"and\").\r\n   * @param {string} options.zero Word for 0 (i.e. \"zero\").\r\n   * @param {string} [options.spaceSeparator = ' '] Character that separates words.\r\n   */\r\n  constructor(options) {\r\n    // Merge supplied options with defaults\r\n    options = Object.assign({\r\n      negativeWord: '',\r\n      separatorWord: undefined,\r\n      zeroWord: undefined,\r\n      spaceSeparator: ' '\r\n    }, options);\r\n\r\n    // Make options available to class\r\n    this.#negativeWord = options.negativeWord;\r\n    this.#separatorWord = options.separatorWord;\r\n    this.#zero = options.zero;\r\n    this.#spaceSeparator = options.spaceSeparator;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Word that precedes a negative number (if any).\r\n   */\r\n  get negativeWord() {\r\n    return this.#negativeWord;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Word that separates cardinal numbers (i.e. \"and\").\r\n   */\r\n  get separatorWord() {\r\n    return this.#separatorWord;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Word for 0 (i.e. \"zero\").\r\n   */\r\n  get zero() {\r\n    return this.#zero;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Character that separates words.\r\n   */\r\n  get spaceSeparator() {\r\n    return this.#spaceSeparator;\r\n  }\r\n\r\n  /**\r\n   * @returns {number} Input value without decimal.\r\n   */\r\n  get wholeNumber() {\r\n    return this.#wholeNumber;\r\n  }\r\n\r\n  /**\r\n   * Convert decimal number to a string array of cardinal numbers.\r\n   * @param {number} decimal Decimal number to convert.\r\n   * @returns {string} Value in written format.\r\n   */\r\n  decimalToCardinal(decimal) {\r\n    const words = [];\r\n\r\n    // Split decimal portion into an array of characters in reverse\r\n    const chars = decimal.split('').reverse();\r\n\r\n    // Loop through array (from the end) adding words to output array\r\n    while (chars.pop() == '0') {\r\n      words.push(this.zero);\r\n    }\r\n\r\n    // Add decimal number to word array\r\n    return words.concat(this.toCardinal(BigInt(decimal)));\r\n  }\r\n\r\n  /**\r\n   * Converts a number to written form.\r\n   * @param {number|string} value Number to be convert.\r\n   * @throws {Error} Value must be a valid number.\r\n   * @returns {string} Value in written format.\r\n   */\r\n  floatToCardinal(value) {\r\n    // Validate user input value\r\n    if (typeof value == 'number') {\r\n      if (Number.isNaN(value)) {\r\n        throw new Error('NaN is not an accepted number.');\r\n      }\r\n      value = value.toString();\r\n    } else if (typeof value == 'string') {\r\n      value = value.trim();\r\n      if (value.length == 0 || Number.isNaN(Number(value))) {\r\n        throw new Error('\"' + value + '\" is not a valid number.');\r\n      }\r\n    } else if (typeof value != 'bigint') {\r\n      throw new TypeError('Invalid variable type: ' + typeof value);\r\n    }\r\n\r\n    let words = [];\r\n    let wholeNumber;\r\n    let decimalNumber;\r\n\r\n    // If negative number add negative word\r\n    if (value < 0) {\r\n      words.push(this.negativeWord);\r\n    }\r\n\r\n    // Split value decimal (if any) (excluding BigInt)\r\n    if (typeof value == 'bigint') {\r\n      wholeNumber = value;\r\n    } else {\r\n      const splitValue = value.split('.');\r\n      wholeNumber = BigInt(splitValue[0]);\r\n      decimalNumber = splitValue[1];\r\n    }\r\n\r\n    // Convert whole number to positive (if negative)\r\n    if (wholeNumber < 0) {\r\n      wholeNumber = -wholeNumber;\r\n    }\r\n\r\n    // NOTE: Only needed for CZ\r\n    this.#wholeNumber = wholeNumber;\r\n\r\n    // Add whole number in written form\r\n    words = words.concat(this.toCardinal(wholeNumber));\r\n\r\n    // Add decimal number in written form (if any)\r\n    if (decimalNumber) {\r\n      words.push(this.separatorWord);\r\n\r\n      words = words.concat(this.decimalToCardinal(decimalNumber));\r\n    }\r\n\r\n    // Join words with spaces\r\n    return words.join(this.spaceSeparator);\r\n  }\r\n}\r\n","import AbstractLanguage from '../classes/AbstractLanguage.mjs';\r\n\r\nexport class N2WordsRU extends AbstractLanguage {\r\n  feminine = false;\r\n\r\n  ones = {\r\n    1: 'один',\r\n    2: 'два',\r\n    3: 'три',\r\n    4: 'четыре',\r\n    5: 'пять',\r\n    6: 'шесть',\r\n    7: 'семь',\r\n    8: 'восемь',\r\n    9: 'девять'\r\n  };\r\n\r\n  onesFeminine = {\r\n    1: 'одна',\r\n    2: 'две',\r\n    3: 'три',\r\n    4: 'четыре',\r\n    5: 'пять',\r\n    6: 'шесть',\r\n    7: 'семь',\r\n    8: 'восемь',\r\n    9: 'девять'\r\n  };\r\n\r\n  tens = {\r\n    0: 'десять',\r\n    1: 'одиннадцать',\r\n    2: 'двенадцать',\r\n    3: 'тринадцать',\r\n    4: 'четырнадцать',\r\n    5: 'пятнадцать',\r\n    6: 'шестнадцать',\r\n    7: 'семнадцать',\r\n    8: 'восемнадцать',\r\n    9: 'девятнадцать'\r\n  };\r\n\r\n  twenties = {\r\n    2: 'двадцать',\r\n    3: 'тридцать',\r\n    4: 'сорок',\r\n    5: 'пятьдесят',\r\n    6: 'шестьдесят',\r\n    7: 'семьдесят',\r\n    8: 'восемьдесят',\r\n    9: 'девяносто'\r\n  };\r\n\r\n  hundreds = {\r\n    1: 'сто',\r\n    2: 'двести',\r\n    3: 'триста',\r\n    4: 'четыреста',\r\n    5: 'пятьсот',\r\n    6: 'шестьсот',\r\n    7: 'семьсот',\r\n    8: 'восемьсот',\r\n    9: 'девятьсот'\r\n  };\r\n\r\n  thousands = {\r\n    1: ['тысяча', 'тысячи', 'тысяч'], // 10^ 3\r\n    2: ['миллион', 'миллиона', 'миллионов'], // 10^ 6\r\n    3: ['миллиард', 'миллиарда', 'миллиардов'], // 10^ 9\r\n    4: ['триллион', 'триллиона', 'триллионов'], // 10^ 12\r\n    5: ['квадриллион', 'квадриллиона', 'квадриллионов'], // 10^ 15\r\n    6: ['квинтиллион', 'квинтиллиона', 'квинтиллионов'], // 10^ 18\r\n    7: ['секстиллион', 'секстиллиона', 'секстиллионов'], // 10^ 21\r\n    8: ['септиллион', 'септиллиона', 'септиллионов'], // 10^ 24\r\n    9: ['октиллион', 'октиллиона', 'октиллионов'], // 10^ 27\r\n    10: ['нониллион', 'нониллиона', 'нониллионов'], // 10^ 30\r\n  };\r\n\r\n  constructor(options = {}) {\r\n    super(Object.assign({\r\n      negativeWord: 'минус',\r\n      separatorWord: 'запятая',\r\n      zero: 'ноль'\r\n    }, options));\r\n  }\r\n\r\n  toCardinal(number) {\r\n    if (number == 0) {\r\n      return this.zero;\r\n    }\r\n\r\n    const words = [];\r\n\r\n    const chunks = this.splitByX(number.toString(), 3);\r\n\r\n    let i = chunks.length;\r\n\r\n    for (let j = 0; j < chunks.length; j++) {\r\n      const x = chunks[j];\r\n      let ones = [];\r\n      i = i - 1;\r\n\r\n      if (x == 0) {\r\n        continue;\r\n      }\r\n\r\n      const [n1, n2, n3] = this.getDigits(x);\r\n\r\n      if (n3 > 0) {\r\n        words.push(this.hundreds[n3]);\r\n      }\r\n\r\n      if (n2 > 1) {\r\n        words.push(this.twenties[n2]);\r\n      }\r\n\r\n      if (n2 == 1) {\r\n        words.push(this.tens[n1]);\r\n      } else if (n1 > 0) {\r\n        ones = (i == 1 || this.feminine && i == 0) ? this.onesFeminine : this.ones;\r\n        words.push(ones[n1]);\r\n      }\r\n\r\n      if (i > 0) {\r\n        words.push(this.pluralize(x, this.thousands[i]));\r\n      }\r\n    }\r\n\r\n    return words.join(' ');\r\n  }\r\n\r\n  splitByX(n, x, formatInt = true) {\r\n    const results = [];\r\n    const l = n.length;\r\n    let result;\r\n\r\n    if (l > x) {\r\n      const start = l % x;\r\n\r\n      if (start > 0) {\r\n        result = n.slice(0, start);\r\n\r\n        if (formatInt) {\r\n          results.push(BigInt(result));\r\n        } else {\r\n          results.push(result);\r\n        }\r\n      }\r\n\r\n      for (let i = start; i < l; i += x) {\r\n        result = n.slice(i, i + x);\r\n\r\n        if (formatInt) {\r\n          results.push(BigInt(result));\r\n        } else {\r\n          results.push(result);\r\n        }\r\n      }\r\n    } else {\r\n      if (formatInt) {\r\n        results.push(BigInt(n));\r\n      } else {\r\n        results.push(n);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  getDigits(value) {\r\n    const a = Array.from(value.toString().padStart(3, '0').slice(-3)).reverse();\r\n    return a.map(e => BigInt(e));\r\n  }\r\n\r\n  pluralize(n, forms) {\r\n    let form = 2;\r\n    if ((n % 100n < 10n) || (n % 100n > 20n)) {\r\n      if (n % 10n == 1n) {\r\n        form = 0;\r\n      } else if ((n % 10n < 5n) && (n % 10n > 1n)) {\r\n        form = 1;\r\n      }\r\n    }\r\n    return forms[form];\r\n  }\r\n}\r\n\r\n/**\r\n * Converts a value to cardinal (written) form.\r\n * @param {number|string} value Number to be convert.\r\n * @throws {Error} Value cannot be invalid.\r\n * @returns {string} Value in cardinal (written) format.\r\n */\r\nexport default function(value) {\r\n  return new N2WordsRU().floatToCardinal(value);\r\n}\r\n","import {N2WordsRU} from './RU.mjs';\r\n\r\nclass N2WordsHE extends N2WordsRU {\r\n  and = 'ו';\r\n\r\n  ones = { 1: 'אחד', 2: 'שנים', 3: 'שלושה', 4: 'ארבעה', 5: 'חמישה', 6: 'שישה', 7: 'שבעה', 8: 'שמונה', 9: 'תשעה' };\r\n    tens = {\r\n      0: 'עשרה', 1: 'אחד עשר', 2: 'שנים עשר', 3: 'שלושה עשר', 4: 'ארבע עשר',\r\n      5: 'חמישה עשר', 6: 'ששה עשר', 7: 'שבעה עשרה', 8: 'שמונה עשר', 9: 'תשעה עשר'\r\n    };\r\n\r\n  twenties = {\r\n    2: 'עשרים',\r\n    3: 'שלשים',\r\n    4: 'ארבעים',\r\n    5: 'חמישים',\r\n    6: 'ששים',\r\n    7: 'שבעים',\r\n    8: 'שמונים',\r\n    9: 'תשעים'\r\n  };\r\n\r\n  hundreds = {\r\n    1: 'מאה',\r\n    2: 'מאתיים',\r\n    3: 'מאות'\r\n  };\r\n\r\n  thousands = {\r\n    1: 'אלף',\r\n    2: 'אלפיים',\r\n    3: 'שלשת אלפים',\r\n    4: 'ארבעת אלפים',\r\n    5: 'חמשת אלפים',\r\n    6: 'ששת אלפים',\r\n    7: 'שבעת אלפים',\r\n    8: 'שמונת אלפים',\r\n    9: 'תשעת אלפים'\r\n  };\r\n\r\n  constructor() {\r\n    /**\r\n     * @todo Confirm `negativeWord`\r\n     * @todo Set `separatorWord`\r\n     */\r\n    super({\r\n      negativeWord: 'מינוס',\r\n      //separatorWord: ,\r\n      zero: 'אפס'\r\n    });\r\n  }\r\n\r\n  toCardinal(number) {\r\n    if (number == 0) {\r\n      return this.zero;\r\n    }\r\n    const words = [];\r\n    const chunks = this.splitByX(number.toString(), 3);\r\n    let i = chunks.length;\r\n    for (let j = 0; j < chunks.length; j++) {\r\n      const x = chunks[j];\r\n      i = i - 1;\r\n      if (x == 0) {\r\n        continue;\r\n      }\r\n      const [n1, n2, n3] = this.getDigits(x);\r\n      if (i > 0) {\r\n        words.push(this.thousands[n1]);\r\n        continue;\r\n      }\r\n      if (n3 > 0) {\r\n        if (n3 <= 2) {\r\n          words.push(this.hundreds[n3]);\r\n        } else {\r\n          words.push(this.ones[n3] + ' ' + this.hundreds[3]);\r\n        }\r\n      }\r\n      if (n2 == 1) {\r\n        words.push(this.tens[n1]);\r\n      } else if (n1 > 0 && !(i > 0 && x == 1)) {\r\n        words.push(this.ones[n1]);\r\n      }\r\n      if (n2 > 1) {\r\n        words.push(this.twenties[n2]);\r\n      }\r\n      if (i > 0) {\r\n        words.push(this.thousands[i]);\r\n      }\r\n    }\r\n    if (words.length > 1) {\r\n      words[words.length - 1] = this.and + words[words.length - 1];\r\n    }\r\n    return words.join(' ');\r\n  }\r\n}\r\n\r\n/**\r\n * Converts a value to cardinal (written) form.\r\n * @param {number|string} value Number to be convert.\r\n * @throws {Error} Value cannot be invalid.\r\n * @returns {string} Value in cardinal (written) format.\r\n */\r\nexport default function(value) {\r\n  return new N2WordsHE().floatToCardinal(value);\r\n}\r\n"],"names":["AbstractLanguage","negativeWord","separatorWord","zero","spaceSeparator","wholeNumber","constructor","options","Object","assign","undefined","zeroWord","this","decimalToCardinal","decimal","words","chars","split","reverse","pop","push","concat","toCardinal","BigInt","floatToCardinal","value","Number","isNaN","Error","toString","trim","length","TypeError","decimalNumber","splitValue","join","N2WordsRU","feminine","ones","onesFeminine","tens","twenties","hundreds","thousands","super","number","chunks","splitByX","i","j","x","n1","n2","n3","getDigits","pluralize","n","formatInt","results","l","result","start","slice","Array","from","padStart","map","e","forms","form","N2WordsHE","and"],"mappings":"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"}