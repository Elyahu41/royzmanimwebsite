{"version":3,"file":"kosher-zmanim.esm.js","sources":["../node_modules/.pnpm/temporal-polyfill@0.2.0/node_modules/temporal-polyfill/chunk-33169ef4.esm.js","../node_modules/.pnpm/big.js@6.2.1/node_modules/big.js/big.mjs","../src/polyfills/Utils.ts","../src/polyfills/errors.ts","../src/util/GeoLocation.ts","../src/util/AstronomicalCalculator.ts","../src/util/NOAACalculator.ts","../src/AstronomicalCalendar.ts","../src/hebrewcalendar/JewishDate.ts","../src/hebrewcalendar/Daf.ts","../src/hebrewcalendar/limud/YomiCalculator.ts","../src/hebrewcalendar/limud/YerushalmiYomiCalculator.ts","../src/hebrewcalendar/limud/ChafetzChayimYomiCalculator.ts","../src/hebrewcalendar/JewishCalendar.ts","../src/ZmanimCalendar.ts","../src/ComplexZmanimCalendar.ts","../src/util/Time.ts","../src/util/Zman.ts","../src/util/ZmanimFormatter.ts","../src/util/GeoLocationUtils.ts","../src/util/SunTimesCalculator.ts","../src/hebrewcalendar/TefilaRules.ts","../src/hebrewcalendar/HebrewDateFormatter.ts","../src/kosher-zmanim.ts"],"sourcesContent":["function bindArgs(e, ...n) {\n  return (...t) => e(...n, ...t);\n}\n\nfunction isObjectLike(e) {\n  return null !== e && N.test(typeof e);\n}\n\nfunction mapProps(e, n, t) {\n  const o = {};\n  for (const r in n) {\n    o[r] = e(n[r], r, t);\n  }\n  return o;\n}\n\nfunction zipProps(e, n) {\n  const t = {};\n  let o = e.length;\n  for (const r of n) {\n    t[e[--o]] = r;\n  }\n  return t;\n}\n\nfunction mapPropNames(e, n, t) {\n  const o = {};\n  for (let r = 0; r < n.length; r++) {\n    const i = n[r];\n    o[i] = e(i, r, t);\n  }\n  return o;\n}\n\nfunction pluckProps(e, n) {\n  const t = {};\n  for (const o of e) {\n    t[o] = n[o];\n  }\n  return t;\n}\n\nfunction excludeUndefinedProps(e) {\n  e = {\n    ...e\n  };\n  const n = Object.keys(e);\n  for (const t of n) {\n    void 0 === e[t] && delete e[t];\n  }\n  return e;\n}\n\nfunction allFieldsEqual(e, n, t) {\n  for (const o of e) {\n    if (n[o] !== t[o]) {\n      return 0;\n    }\n  }\n  return 1;\n}\n\nfunction createLazyGenerator(e, n = Map) {\n  const t = new n;\n  return (n, ...o) => {\n    if (t.has(n)) {\n      return t.get(n);\n    }\n    {\n      const r = e(n, ...o);\n      return t.set(n, r), r;\n    }\n  };\n}\n\nfunction createNameDescriptors(e) {\n  return createPropDescriptors({\n    name: e\n  }, 1);\n}\n\nfunction createPropDescriptors(e, n) {\n  return mapProps((e => ({\n    value: e,\n    configurable: 1,\n    writable: !n\n  })), e);\n}\n\nfunction createGetterDescriptors(e) {\n  return mapProps((e => ({\n    get: e,\n    configurable: 1\n  })), e);\n}\n\nfunction createStringTagDescriptors(e) {\n  return {\n    [Symbol.toStringTag]: {\n      value: e,\n      configurable: 1\n    }\n  };\n}\n\nfunction identityFunc(e) {\n  return e;\n}\n\nfunction padNumber(e, n) {\n  return String(n).padStart(e, \"0\");\n}\n\nfunction compareNumbers(e, n) {\n  return Math.sign(e - n);\n}\n\nfunction clampNumber(e, n, t) {\n  return Math.min(Math.max(e, n), t);\n}\n\nfunction clampEntity(e, n, t, o, r) {\n  const i = clampNumber(n, t, o);\n  if (r && n !== i) {\n    throw new RangeError(numberOutOfRange(e, n, t, o));\n  }\n  return i;\n}\n\nfunction clampProp(e, n, t, o, r) {\n  return clampEntity(n, getDefinedProp(e, n), t, o, r);\n}\n\nfunction getDefinedProp(e, n) {\n  const t = e[n];\n  if (void 0 === t) {\n    throw new TypeError(missingField(n));\n  }\n  return t;\n}\n\nfunction divModFloor(e, n) {\n  return [ Math.floor(e / n), modFloor(e, n) ];\n}\n\nfunction modFloor(e, n) {\n  return (e % n + n) % n;\n}\n\nfunction divModTrunc(e, n) {\n  return [ divTrunc(e, n), modTrunc(e, n) ];\n}\n\nfunction divTrunc(e, n) {\n  return Math.trunc(e / n) || 0;\n}\n\nfunction modTrunc(e, n) {\n  return e % n || 0;\n}\n\nfunction hasHalf(e) {\n  return .5 === Math.abs(e % 1);\n}\n\nfunction givenFieldsToDayTimeNano(e, n, t) {\n  let o = 0, r = 0;\n  for (let i = 0; i <= n; i++) {\n    const n = e[t[i]], a = R[i], s = B / a, [c, l] = divModTrunc(n, s);\n    o += l * a, r += c;\n  }\n  const [i, a] = divModTrunc(o, B);\n  return [ r + i, a ];\n}\n\nfunction nanoToGivenFields(e, n, t) {\n  const o = {};\n  for (let r = n; r >= 0; r--) {\n    const n = R[r];\n    o[t[r]] = divTrunc(e, n), e = modTrunc(e, n);\n  }\n  return o;\n}\n\nfunction requireObjectlike(e) {\n  if (!isObjectLike(e)) {\n    throw new TypeError(n);\n  }\n  return e;\n}\n\nfunction requireType(e, n, t = e) {\n  if (typeof n !== e) {\n    throw new TypeError(invalidEntity(t, n));\n  }\n  return n;\n}\n\nfunction requireInteger(e) {\n  return requireNumberIsInteger(oe(e));\n}\n\nfunction requirePositiveInteger(e) {\n  return requireNumberIsPositive(requireInteger(e));\n}\n\nfunction requireNumberIsInteger(e, n = \"number\") {\n  if (!Number.isInteger(e)) {\n    throw new RangeError(expectedInteger(n, e));\n  }\n  return e || 0;\n}\n\nfunction requireNumberIsPositive(e, n = \"number\") {\n  if (e <= 0) {\n    throw new RangeError(expectedPositive(n, e));\n  }\n  return e;\n}\n\nfunction requireNonNullish(e) {\n  if (null == e) {\n    throw new TypeError(\"Cannot be null or undefined\");\n  }\n  return e;\n}\n\nfunction requirePropDefined(e, n) {\n  if (null == n) {\n    throw new RangeError(missingField(e));\n  }\n  return n;\n}\n\nfunction toString(n) {\n  if (\"symbol\" == typeof n) {\n    throw new TypeError(e);\n  }\n  return String(n);\n}\n\nfunction toStringViaPrimitive(e, n) {\n  return isObjectLike(e) ? String(e) : ne(e, n);\n}\n\nfunction toBigInt(e) {\n  if (\"string\" == typeof e) {\n    return BigInt(e);\n  }\n  if (\"bigint\" != typeof e) {\n    throw new TypeError(invalidBigInt(e));\n  }\n  return e;\n}\n\nfunction toNumber(e, n = \"number\") {\n  if (\"bigint\" == typeof e) {\n    throw new TypeError(forbiddenBigIntToNumber(n));\n  }\n  if (e = Number(e), !Number.isFinite(e)) {\n    throw new RangeError(expectedFinite(n, e));\n  }\n  return e;\n}\n\nfunction toInteger(e, n) {\n  return Math.trunc(toNumber(e, n)) || 0;\n}\n\nfunction toStrictInteger(e, n) {\n  return requireNumberIsInteger(toNumber(e, n), n);\n}\n\nfunction toPositiveInteger(e, n) {\n  return requireNumberIsPositive(toInteger(e, n), n);\n}\n\nfunction refineOverflowOptions(e) {\n  return void 0 === e ? 0 : Ne(requireObjectlike(e));\n}\n\nfunction refineZonedFieldOptions(e, n = 0) {\n  e = normalizeOptions(e);\n  const t = Oe(e), o = Pe(e, n);\n  return [ Ne(e), o, t ];\n}\n\nfunction refineEpochDisambigOptions(e) {\n  return Oe(normalizeOptions(e));\n}\n\nfunction refineDiffOptions(e, n, t, o = 9, r = 0, i = 4) {\n  n = normalizeOptions(n);\n  let a = ye(n, o, r), s = parseRoundingIncInteger(n), c = be(n, i), l = Ie(n, o, r, 1);\n  return null == a ? a = Math.max(t, l) : checkLargestSmallestUnit(a, l), s = refineRoundingInc(s, l, 1), \n  e && (c = (e => e < 4 ? (e + 2) % 4 : e)(c)), [ a, l, s, c ];\n}\n\nfunction refineRoundOptions(e, n = 6, t) {\n  let o = parseRoundingIncInteger(e = normalizeUnitNameOptions(e, fe));\n  const r = be(e, 7);\n  let i = Ie(e, n);\n  return i = requirePropDefined(fe, i), o = refineRoundingInc(o, i, void 0, t), [ i, o, r ];\n}\n\nfunction refineDateDisplayOptions(e) {\n  return ve(normalizeOptions(e));\n}\n\nfunction refineTimeDisplayOptions(e, n) {\n  return refineTimeDisplayTuple(normalizeOptions(e), n);\n}\n\nfunction refineTimeDisplayTuple(e, n = 4) {\n  const t = refineSubsecDigits(e);\n  return [ be(e, 4), ...refineSmallestUnitAndSubsecDigits(Ie(e, n), t) ];\n}\n\nfunction refineSmallestUnitAndSubsecDigits(e, n) {\n  return null != e ? [ R[e], e < 4 ? 9 - 3 * e : -1 ] : [ void 0 === n ? 1 : 10 ** (9 - n), n ];\n}\n\nfunction parseRoundingIncInteger(e) {\n  let n = e[pe];\n  return void 0 === n ? 1 : toInteger(n, pe);\n}\n\nfunction refineRoundingInc(e, n, t, o) {\n  const r = o ? B : R[n + 1];\n  if (r) {\n    const t = R[n];\n    if (r % ((e = clampEntity(pe, e, 1, r / t - (o ? 0 : 1), 1)) * t)) {\n      throw new RangeError(invalidEntity(pe, e));\n    }\n  } else {\n    e = clampEntity(pe, e, 1, t ? 10 ** 9 : 1, 1);\n  }\n  return e;\n}\n\nfunction refineSubsecDigits(e) {\n  let n = e[he];\n  if (void 0 !== n) {\n    if (\"number\" != typeof n) {\n      if (\"auto\" === toString(n)) {\n        return;\n      }\n      throw new RangeError(invalidEntity(he, n));\n    }\n    n = clampEntity(he, Math.floor(n), 0, 9, 1);\n  }\n  return n;\n}\n\nfunction normalizeOptions(e) {\n  return void 0 === e ? {} : requireObjectlike(e);\n}\n\nfunction normalizeUnitNameOptions(e, n) {\n  return \"string\" == typeof e ? {\n    [n]: e\n  } : requireObjectlike(e);\n}\n\nfunction copyOptions(e) {\n  if (void 0 !== e) {\n    if (isObjectLike(e)) {\n      return Object.assign(Object.create(null), e);\n    }\n    throw new TypeError(n);\n  }\n}\n\nfunction overrideOverflowOptions(e, n) {\n  return e && Object.assign(Object.create(null), e, {\n    overflow: ge[n]\n  });\n}\n\nfunction refineUnitOption(e, n, t = 9, o = 0, r) {\n  let i = n[e];\n  if (void 0 === i) {\n    return r ? o : void 0;\n  }\n  if (i = toString(i), \"auto\" === i) {\n    return r ? o : null;\n  }\n  let a = M[i];\n  if (void 0 === a && (a = le[i]), void 0 === a) {\n    throw new RangeError(invalidEntity(e, i));\n  }\n  return clampEntity(e, a, o, t, 1), a;\n}\n\nfunction refineChoiceOption(e, n, t, o = 0) {\n  const r = t[e];\n  if (void 0 === r) {\n    return o;\n  }\n  const i = toString(r), a = n[i];\n  if (void 0 === a) {\n    throw new RangeError(invalidEntity(e, i));\n  }\n  return a;\n}\n\nfunction checkLargestSmallestUnit(e, n) {\n  if (n > e) {\n    throw new RangeError(S);\n  }\n}\n\nfunction createDayTimeNano(e, n) {\n  let [t, o] = divModTrunc(n, B), r = e + t;\n  const i = Math.sign(r);\n  return i && i === -Math.sign(o) && (r -= i, o += i * B), [ r, o ];\n}\n\nfunction addDayTimeNanoAndNumber(e, n) {\n  return createDayTimeNano(e[0], e[1] + n);\n}\n\nfunction addDayTimeNanos(e, n, t = 1) {\n  return createDayTimeNano(e[0] + n[0] * t, e[1] + n[1] * t);\n}\n\nfunction diffDayTimeNanos(e, n) {\n  return createDayTimeNano(n[0] - e[0], n[1] - e[1]);\n}\n\nfunction compareDayTimeNanos(e, n) {\n  return compareNumbers(e[0], n[0]) || compareNumbers(e[1], n[1]);\n}\n\nfunction bigIntToDayTimeNano(e, n = 1) {\n  const t = BigInt(B / n);\n  return [ Number(e / t), Number(e % t) * n ];\n}\n\nfunction numberToDayTimeNano(e, n = 1) {\n  const t = B / n, [o, r] = divModTrunc(e, t);\n  return [ o, r * n ];\n}\n\nfunction dayTimeNanoToBigInt(e, n = 1) {\n  const [t, o] = e, r = Math.floor(o / n), i = B / n;\n  return BigInt(t) * BigInt(i) + BigInt(r);\n}\n\nfunction dayTimeNanoToNumber(e, n = 1, t) {\n  const [o, r] = dayTimeNanoToNumberRemainder(e, n);\n  return o + (t ? r / n : 0);\n}\n\nfunction dayTimeNanoToNumberRemainder(e, n) {\n  const [t, o] = e, [r, i] = divModFloor(o, n);\n  return [ t * (B / n) + r, i ];\n}\n\nfunction checkIsoYearMonthInBounds(e) {\n  return clampProp(e, \"isoYear\", We, Ge, 1), e.isoYear === We ? clampProp(e, \"isoMonth\", 4, 12, 1) : e.isoYear === Ge && clampProp(e, \"isoMonth\", 1, 9, 1), \n  e;\n}\n\nfunction checkIsoDateInBounds(e) {\n  return checkIsoDateTimeInBounds({\n    ...e,\n    ...Ae,\n    isoHour: 12\n  }), e;\n}\n\nfunction checkIsoDateTimeInBounds(e) {\n  const n = clampProp(e, \"isoYear\", We, Ge, 1), t = n === We ? 1 : n === Ge ? -1 : 0;\n  return t && checkEpochNanoInBounds(isoToEpochNano({\n    ...e,\n    isoDay: e.isoDay + t,\n    isoNanosecond: e.isoNanosecond - t\n  })), e;\n}\n\nfunction checkEpochNanoInBounds(e) {\n  if (!e || -1 === compareDayTimeNanos(e, $e) || 1 === compareDayTimeNanos(e, xe)) {\n    throw new RangeError(D);\n  }\n  return e;\n}\n\nfunction isoTimeFieldsToNano(e) {\n  return givenFieldsToDayTimeNano(e, 5, Be)[1];\n}\n\nfunction nanoToIsoTimeAndDay(e) {\n  const [n, t] = divModFloor(e, B);\n  return [ nanoToGivenFields(t, 5, Be), n ];\n}\n\nfunction epochNanoToSec(e) {\n  return dayTimeNanoToNumber(e, Z);\n}\n\nfunction epochNanoToMilli(e) {\n  return dayTimeNanoToNumber(e, C);\n}\n\nfunction isoToEpochMilli(e) {\n  return isoArgsToEpochMilli(e.isoYear, e.isoMonth, e.isoDay, e.isoHour, e.isoMinute, e.isoSecond, e.isoMillisecond);\n}\n\nfunction isoToEpochNano(e) {\n  const n = isoToEpochMilli(e);\n  if (void 0 !== n) {\n    const [t, o] = divModTrunc(n, b);\n    return [ t, o * C + (e.isoMicrosecond || 0) * E + (e.isoNanosecond || 0) ];\n  }\n}\n\nfunction isoToEpochNanoWithOffset(e, n) {\n  const [t, o] = nanoToIsoTimeAndDay(isoTimeFieldsToNano(e) - n);\n  return checkEpochNanoInBounds(isoToEpochNano({\n    ...e,\n    isoDay: e.isoDay + o,\n    ...t\n  }));\n}\n\nfunction isoArgsToEpochSec(...e) {\n  return isoArgsToEpochMilli(...e) / w;\n}\n\nfunction isoArgsToEpochMilli(...e) {\n  const [n, t] = isoToLegacyDate(...e), o = n.getTime();\n  if (!isNaN(o)) {\n    return o - t * b;\n  }\n}\n\nfunction isoToLegacyDate(e, n = 1, t = 1, o = 0, r = 0, i = 0, a = 0) {\n  const s = e === We ? 1 : e === Ge ? -1 : 0, c = new Date;\n  return c.setUTCHours(o, r, i, a), c.setUTCFullYear(e, n - 1, t + s), [ c, s ];\n}\n\nfunction epochNanoToIso(e, n) {\n  let [t, o] = addDayTimeNanoAndNumber(e, n);\n  o < 0 && (o += B, t -= 1);\n  const [r, i] = divModFloor(o, C), [a, s] = divModFloor(i, E);\n  return {\n    ...epochMilliToIso(t * b + r),\n    isoMicrosecond: a,\n    isoNanosecond: s\n  };\n}\n\nfunction epochMilliToIso(e) {\n  const n = e < -b * Ue ? 1 : e > b * Ue ? -1 : 0, t = new Date(e + n * b);\n  return zipProps(Le, [ t.getUTCFullYear(), t.getUTCMonth() + 1, t.getUTCDate() - n, t.getUTCHours(), t.getUTCMinutes(), t.getUTCSeconds(), t.getUTCMilliseconds() ]);\n}\n\nfunction createOptionsTransformer(e, n, t = []) {\n  const o = new Set(t);\n  return t => (((e, n) => {\n    for (const t of n) {\n      if (t in e) {\n        return 1;\n      }\n    }\n    return 0;\n  })(t = ((e, n) => {\n    const t = {};\n    for (const o in e) {\n      n.has(o) || (t[o] = e[o]);\n    }\n    return t;\n  })(t, o), e) || Object.assign(t, n), t);\n}\n\nfunction isoDateFieldsToEpochNano(e, n) {\n  return getSingleInstantFor(queryNativeTimeZone(n.timeZone), {\n    ...Ae,\n    isoHour: 12,\n    ...e\n  });\n}\n\nfunction extractEpochNano(e) {\n  return e.epochNanoseconds;\n}\n\nfunction createFormatPrepper(e, n = createFormat) {\n  const [t] = e;\n  return (o, r = Fn, i, a) => {\n    const s = n(o, r, t, i, a), c = s.resolvedOptions();\n    return [ s, ...toEpochMillis(e, c, i, a) ];\n  };\n}\n\nfunction createFormat(e, n, t, o, r) {\n  return new He(e, t(n, o, r));\n}\n\nfunction toEpochMillis(e, n, t, o) {\n  return [ toEpochMilli(e, n, t), void 0 !== o ? toEpochMilli(e, n, o) : void 0 ];\n}\n\nfunction toEpochMilli([, e, n], t, o) {\n  return o.calendar && ((e, n, t) => {\n    if ((t || e !== we) && e !== n) {\n      throw new RangeError(f);\n    }\n  })(getId(o.calendar), t.calendar, n), epochNanoToMilli(e(o, t));\n}\n\nfunction hashIntlFormatParts(e, n) {\n  const t = e.formatToParts(n), o = {};\n  for (const e of t) {\n    o[e.type] = e.value;\n  }\n  return o;\n}\n\nfunction refinePlainDateBag(e, n, t, o = []) {\n  const r = refineCalendarFields(e, n, K, o);\n  return e.dateFromFields(r, t);\n}\n\nfunction refinePlainYearMonthBag(e, n, t, o) {\n  const r = refineCalendarFields(e, n, J, o);\n  return e.yearMonthFromFields(r, t);\n}\n\nfunction refinePlainMonthDayBag(e, n, t, o, r = []) {\n  const i = refineCalendarFields(e, t, K, r);\n  return n && void 0 !== i.month && void 0 === i.monthCode && void 0 === i.year && (i.year = Un), \n  e.monthDayFromFields(i, o);\n}\n\nfunction refineCalendarFields(e, n, t, o = [], r = []) {\n  return refineFields(n, [ ...e.fields(t), ...r ].sort(), o);\n}\n\nfunction refineFields(e, n, o, r = !o) {\n  const i = {};\n  let a, s = 0;\n  for (const t of n) {\n    if (t === a) {\n      throw new RangeError(duplicateFields(t));\n    }\n    if (\"constructor\" === t || \"__proto__\" === t) {\n      throw new RangeError(forbiddenField(t));\n    }\n    let n = e[t];\n    if (void 0 !== n) {\n      s = 1, wn[t] && (n = wn[t](n, t)), i[t] = n;\n    } else if (o) {\n      if (o.includes(t)) {\n        throw new TypeError(missingField(t));\n      }\n      i[t] = ee[t];\n    }\n    a = t;\n  }\n  if (r && !s) {\n    throw new TypeError(t);\n  }\n  return i;\n}\n\nfunction refineTimeBag(e, n) {\n  return constrainIsoTimeFields(En({\n    ...ee,\n    ...e\n  }), n);\n}\n\nfunction mergeCalendarFields(e, n, t, o, r = [], i = []) {\n  const a = [ ...e.fields(o), ...r ].sort();\n  let s = refineFields(n, a, i);\n  const c = refineFields(t, a);\n  return s = e.mergeFields(s, c), refineFields(s, a, []);\n}\n\nfunction convertToPlainMonthDay(e, n) {\n  const t = refineCalendarFields(e, n, X);\n  return e.monthDayFromFields(t);\n}\n\nfunction convertToPlainYearMonth(e, n, t) {\n  const o = refineCalendarFields(e, n, _);\n  return e.yearMonthFromFields(o, t);\n}\n\nfunction convertToIso(e, n, t, o, r) {\n  n = pluckProps(t = e.fields(t), n), o = refineFields(o, r = e.fields(r), []);\n  let i = e.mergeFields(n, o);\n  return i = refineFields(i, [ ...t, ...r ].sort(), []), e.dateFromFields(i);\n}\n\nfunction refineYear(e, n) {\n  let {era: t, eraYear: o, year: s} = n;\n  const c = getCalendarEraOrigins(e);\n  if (void 0 !== t || void 0 !== o) {\n    if (void 0 === t || void 0 === o) {\n      throw new TypeError(i);\n    }\n    if (!c) {\n      throw new RangeError(r);\n    }\n    const e = c[t];\n    if (void 0 === e) {\n      throw new RangeError(invalidEra(t));\n    }\n    const n = eraYearToYear(o, e);\n    if (void 0 !== s && s !== n) {\n      throw new RangeError(a);\n    }\n    s = n;\n  } else if (void 0 === s) {\n    throw new TypeError(missingYear(c));\n  }\n  return s;\n}\n\nfunction refineMonth(e, n, t, o) {\n  let {month: r, monthCode: i} = n;\n  if (void 0 !== i) {\n    const n = ((e, n, t, o) => {\n      const r = e.o(t), [i, a] = parseMonthCode(n);\n      let s = monthCodeNumberToMonth(i, a, r);\n      if (a) {\n        const n = getCalendarLeapMonthMeta(e);\n        if (void 0 === n) {\n          throw new RangeError(u);\n        }\n        if (n > 0) {\n          if (s > n) {\n            throw new RangeError(u);\n          }\n          if (void 0 === r) {\n            if (1 === o) {\n              throw new RangeError(u);\n            }\n            s--;\n          }\n        } else {\n          if (s !== -n) {\n            throw new RangeError(u);\n          }\n          if (void 0 === r && 1 === o) {\n            throw new RangeError(u);\n          }\n        }\n      }\n      return s;\n    })(e, i, t, o);\n    if (void 0 !== r && r !== n) {\n      throw new RangeError(s);\n    }\n    r = n, o = 1;\n  } else if (void 0 === r) {\n    throw new TypeError(c);\n  }\n  return clampEntity(\"month\", r, 1, e.i(t), o);\n}\n\nfunction refineDay(e, n, t, o, r) {\n  return clampProp(n, \"day\", 1, e.l(o, t), r);\n}\n\nfunction spliceFields(e, n, t, o) {\n  let r = 0;\n  const i = [];\n  for (const e of t) {\n    void 0 !== n[e] ? r = 1 : i.push(e);\n  }\n  if (Object.assign(e, n), r) {\n    for (const n of o || i) {\n      delete e[n];\n    }\n  }\n}\n\nfunction parseMonthCode(e) {\n  const n = Zn.exec(e);\n  if (!n) {\n    throw new RangeError(invalidMonthCode(e));\n  }\n  return [ parseInt(n[1]), Boolean(n[2]) ];\n}\n\nfunction monthCodeNumberToMonth(e, n, t) {\n  return e + (n || t && e >= t ? 1 : 0);\n}\n\nfunction monthToMonthCodeNumber(e, n) {\n  return e - (n && e >= n ? 1 : 0);\n}\n\nfunction eraYearToYear(e, n) {\n  return (n + e) * (Math.sign(n) || 1) || 0;\n}\n\nfunction getCalendarEraOrigins(e) {\n  return Ze[getCalendarIdBase(e)];\n}\n\nfunction getCalendarLeapMonthMeta(e) {\n  return Ye[getCalendarIdBase(e)];\n}\n\nfunction getCalendarIdBase(e) {\n  return computeCalendarIdBase(e.id || we);\n}\n\nfunction computeCalendarIdBase(e) {\n  return e.split(\"-\")[0];\n}\n\nfunction createIntlFieldCache(e) {\n  return createLazyGenerator((n => {\n    const t = isoToEpochMilli(n);\n    return e(t);\n  }), WeakMap);\n}\n\nfunction createIntlYearMonthCache(e) {\n  const n = e(0).year - An;\n  return createLazyGenerator((t => {\n    let o, r = isoArgsToEpochMilli(t - n);\n    const i = [], a = [];\n    do {\n      r += 400 * b;\n    } while ((o = e(r)).year <= t);\n    do {\n      r += (1 - o.day) * b, o.year === t && (i.push(r), a.push(o.month)), r -= b;\n    } while ((o = e(r)).year >= t);\n    return {\n      u: i.reverse(),\n      m: O(a.reverse())\n    };\n  }));\n}\n\nfunction parseIntlYear(e, n) {\n  let t, o, r = parseInt(e.relatedYear || e.year);\n  if (e.era) {\n    const a = Ze[n];\n    void 0 !== a && (i = (i = e.era).normalize(\"NFD\").toLowerCase().replace(/[^a-z0-9]/g, \"\"), \n    t = ke[i] || i, o = r, r = eraYearToYear(o, a[t] || 0));\n  }\n  var i;\n  return {\n    era: t,\n    eraYear: o,\n    year: r\n  };\n}\n\nfunction buildIntlFormat$1(e) {\n  return new He(bn, {\n    calendar: e,\n    timeZone: Yn,\n    era: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\"\n  });\n}\n\nfunction computeIntlDateParts(e) {\n  const {year: n, month: t, day: o} = this.p(e), {m: r} = this.h(n);\n  return [ n, r[t] + 1, o ];\n}\n\nfunction computeIntlEpochMilli(e, n = 1, t = 1) {\n  return this.h(e).u[n - 1] + (t - 1) * b;\n}\n\nfunction computeIntlLeapMonth(e) {\n  const n = queryMonthStrs(this, e), t = queryMonthStrs(this, e - 1), o = n.length;\n  if (o > t.length) {\n    const e = getCalendarLeapMonthMeta(this);\n    if (e < 0) {\n      return -e;\n    }\n    for (let e = 0; e < o; e++) {\n      if (n[e] !== t[e]) {\n        return e + 1;\n      }\n    }\n  }\n}\n\nfunction computeIntlDaysInYear(e) {\n  return diffEpochMilliByDay(computeIntlEpochMilli.call(this, e), computeIntlEpochMilli.call(this, e + 1));\n}\n\nfunction computeIntlDaysInMonth(e, n) {\n  const {u: t} = this.h(e);\n  let o = n + 1, r = t;\n  return o > t.length && (o = 1, r = this.h(e + 1).u), diffEpochMilliByDay(t[n - 1], r[o - 1]);\n}\n\nfunction computeIntlMonthsInYear(e) {\n  return this.h(e).u.length;\n}\n\nfunction queryMonthStrs(e, n) {\n  return Object.keys(e.h(n).m);\n}\n\nfunction queryNativeTimeZone(e) {\n  const n = parseOffsetNanoMaybe(e = e.toLocaleUpperCase(), 1);\n  return void 0 !== n ? new FixedTimeZone(n) : jn(e);\n}\n\nfunction createSplitTuple(e, n) {\n  return [ e, n ];\n}\n\nfunction computePeriod(e) {\n  const n = Math.floor(e / Bn) * Bn;\n  return [ n, n + Bn ];\n}\n\nfunction formatInstantIso(e, n, t, o) {\n  const [r, i, a, s] = (e => {\n    const n = refineTimeDisplayTuple(e = normalizeOptions(e));\n    return [ e.timeZone, ...n ];\n  })(o), c = void 0 !== r;\n  return ((e, n, t, o, r, i) => {\n    t = roundDayTimeNanoByInc(t, r, o, 1);\n    let a = n.getOffsetNanosecondsFor(t);\n    return formatIsoDateTimeFields(epochNanoToIso(t, a), i) + (e ? formatOffsetNano(roundToMinute(a)) : \"Z\");\n  })(c, n(c ? e(r) : Yn), t.epochNanoseconds, i, a, s);\n}\n\nfunction formatZonedDateTimeIso(e, n, t) {\n  return ((e, n, t, o, r, i, a, s, c, l) => {\n    o = roundDayTimeNanoByInc(o, c, s, 1);\n    const u = e(t).getOffsetNanosecondsFor(o);\n    return formatIsoDateTimeFields(epochNanoToIso(o, u), l) + formatOffsetNano(roundToMinute(u), a) + ((e, n) => 1 !== n ? \"[\" + (2 === n ? \"!\" : \"\") + getId(e) + \"]\" : \"\")(t, i) + formatCalendar(n, r);\n  })(e, n.calendar, n.timeZone, n.epochNanoseconds, ...(e => {\n    e = normalizeOptions(e);\n    const n = ve(e), t = refineSubsecDigits(e), o = Fe(e), r = be(e, 4), i = Ie(e, 4);\n    return [ n, Me(e), o, r, ...refineSmallestUnitAndSubsecDigits(i, t) ];\n  })(t));\n}\n\nfunction formatPlainDateTimeIso(e, n) {\n  return ((e, n, t, o, r, i) => formatIsoDateTimeFields(roundDateTimeToNano(n, r, o), i) + formatCalendar(e, t))(e.calendar, e, ...(e => (e = normalizeOptions(e), \n  [ ve(e), ...refineTimeDisplayTuple(e) ]))(n));\n}\n\nfunction formatPlainDateIso(e, n) {\n  return t = e.calendar, o = e, r = refineDateDisplayOptions(n), formatIsoDateFields(o) + formatCalendar(t, r);\n  var t, o, r;\n}\n\nfunction formatPlainYearMonthIso(e, n) {\n  return formatDateLikeIso(e.calendar, formatIsoYearMonthFields, e, refineDateDisplayOptions(n));\n}\n\nfunction formatPlainMonthDayIso(e, n) {\n  return formatDateLikeIso(e.calendar, formatIsoMonthDayFields, e, refineDateDisplayOptions(n));\n}\n\nfunction formatPlainTimeIso(e, n) {\n  return ((e, n, t, o) => formatIsoTimeFields(roundTimeToNano(e, t, n)[0], o))(e, ...refineTimeDisplayOptions(n));\n}\n\nfunction formatDurationIso(e, n) {\n  const [t, o, r] = refineTimeDisplayOptions(n, 3);\n  return o > 1 && (e = {\n    ...e,\n    ...balanceDayTimeDurationByInc(e, Math.min(getLargestDurationUnit(e), 6), o, t)\n  }), ((e, n) => {\n    const t = Hn(e), o = -1 === t ? negateDurationFields(e) : e, {hours: r, minutes: i} = o, [a, s] = dayTimeNanoToNumberRemainder(givenFieldsToDayTimeNano(o, 3, ie), Z), c = formatSubsecNano(s, n), l = n >= 0 || !t || c;\n    return (t < 0 ? \"-\" : \"\") + \"P\" + formatDurationFragments({\n      Y: formatNumberUnscientific(o.years),\n      M: formatNumberUnscientific(o.months),\n      W: formatNumberUnscientific(o.weeks),\n      D: formatNumberUnscientific(o.days)\n    }) + (r || i || a || l ? \"T\" + formatDurationFragments({\n      H: formatNumberUnscientific(r),\n      M: formatNumberUnscientific(i),\n      S: formatNumberUnscientific(a, l) + c\n    }) : \"\");\n  })(e, r);\n}\n\nfunction formatDateLikeIso(e, n, t, o) {\n  const r = getId(e), i = o > 1 || 0 === o && r !== we;\n  return 1 === o ? r === we ? n(t) : formatIsoDateFields(t) : i ? formatIsoDateFields(t) + formatCalendarId(r, 2 === o) : n(t);\n}\n\nfunction formatDurationFragments(e) {\n  const n = [];\n  for (const t in e) {\n    const o = e[t];\n    o && n.push(o, t);\n  }\n  return n.join(\"\");\n}\n\nfunction formatIsoDateTimeFields(e, n) {\n  return formatIsoDateFields(e) + \"T\" + formatIsoTimeFields(e, n);\n}\n\nfunction formatIsoDateFields(e) {\n  return formatIsoYearMonthFields(e) + \"-\" + v(e.isoDay);\n}\n\nfunction formatIsoYearMonthFields(e) {\n  const {isoYear: n} = e;\n  return (n < 0 || n > 9999 ? getSignStr(n) + padNumber(6, Math.abs(n)) : padNumber(4, n)) + \"-\" + v(e.isoMonth);\n}\n\nfunction formatIsoMonthDayFields(e) {\n  return v(e.isoMonth) + \"-\" + v(e.isoDay);\n}\n\nfunction formatIsoTimeFields(e, n) {\n  const t = [ v(e.isoHour), v(e.isoMinute) ];\n  return -1 !== n && t.push(v(e.isoSecond) + ((e, n, t, o) => formatSubsecNano(e * C + n * E + t, o))(e.isoMillisecond, e.isoMicrosecond, e.isoNanosecond, n)), \n  t.join(\":\");\n}\n\nfunction formatOffsetNano(e, n = 0) {\n  if (1 === n) {\n    return \"\";\n  }\n  const [t, o] = divModFloor(Math.abs(e), Y), [r, i] = divModFloor(o, k), [a, s] = divModFloor(i, Z);\n  return getSignStr(e) + v(t) + \":\" + v(r) + (a || s ? \":\" + v(a) + formatSubsecNano(s) : \"\");\n}\n\nfunction formatCalendar(e, n) {\n  if (1 !== n) {\n    const t = getId(e);\n    if (n > 1 || 0 === n && t !== we) {\n      return formatCalendarId(t, 2 === n);\n    }\n  }\n  return \"\";\n}\n\nfunction formatCalendarId(e, n) {\n  return \"[\" + (n ? \"!\" : \"\") + \"u-ca=\" + e + \"]\";\n}\n\nfunction formatSubsecNano(e, n) {\n  let t = padNumber(9, e);\n  return t = void 0 === n ? t.replace(qn, \"\") : t.slice(0, n), t ? \".\" + t : \"\";\n}\n\nfunction getSignStr(e) {\n  return e < 0 ? \"-\" : \"+\";\n}\n\nfunction formatNumberUnscientific(e, n) {\n  return e || n ? e.toLocaleString(\"fullwide\", {\n    useGrouping: 0\n  }) : \"\";\n}\n\nfunction zonedEpochNanoToIso(e, n) {\n  return epochNanoToIso(n, e.getOffsetNanosecondsFor(n));\n}\n\nfunction getMatchingInstantFor(e, n, t, o = 0, r = 0, i, a) {\n  if (void 0 !== t && 1 === o && (1 === o || a)) {\n    return isoToEpochNanoWithOffset(n, t);\n  }\n  const s = e.getPossibleInstantsFor(n);\n  if (void 0 !== t && 3 !== o) {\n    const e = ((e, n, t, o) => {\n      const r = isoToEpochNano(n);\n      o && (t = roundToMinute(t));\n      for (const n of e) {\n        let e = dayTimeNanoToNumber(diffDayTimeNanos(n, r));\n        if (o && (e = roundToMinute(e)), e === t) {\n          return n;\n        }\n      }\n    })(s, n, t, i);\n    if (void 0 !== e) {\n      return e;\n    }\n    if (0 === o) {\n      throw new RangeError(h);\n    }\n  }\n  return a ? isoToEpochNano(n) : getSingleInstantFor(e, n, r, s);\n}\n\nfunction getSingleInstantFor(e, n, t = 0, o = e.getPossibleInstantsFor(n)) {\n  if (1 === o.length) {\n    return o[0];\n  }\n  if (1 === t) {\n    throw new RangeError(T);\n  }\n  if (o.length) {\n    return o[3 === t ? 1 : 0];\n  }\n  const r = isoToEpochNano(n), i = ((e, n) => {\n    const t = e.getOffsetNanosecondsFor(addDayTimeNanoAndNumber(n, -B));\n    return e.getOffsetNanosecondsFor(addDayTimeNanoAndNumber(n, B)) - t;\n  })(e, r), a = i * (2 === t ? -1 : 1);\n  return (o = e.getPossibleInstantsFor(epochNanoToIso(r, a)))[2 === t ? 0 : o.length - 1];\n}\n\nfunction computeNanosecondsInDay(e, n) {\n  n = {\n    ...n,\n    ...Ae\n  };\n  const t = dayTimeNanoToNumber(diffDayTimeNanos(getSingleInstantFor(e, {\n    ...n,\n    ...Ae\n  }), getSingleInstantFor(e, {\n    ...moveByIsoDays(n, 1),\n    ...Ae\n  })));\n  if (t <= 0) {\n    throw new RangeError(d);\n  }\n  return t;\n}\n\nfunction validateTimeZoneOffset(e) {\n  if (Math.abs(e) >= B) {\n    throw new RangeError(p);\n  }\n  return e;\n}\n\nfunction totalDayTimeNano(e, n) {\n  return dayTimeNanoToNumber(e, R[n], 1);\n}\n\nfunction clampRelativeDuration(e, n, t, o, r, i) {\n  const a = {\n    ...ue,\n    [ie[n]]: t\n  }, s = i(o, e), c = i(s, a);\n  return [ r(s), r(c) ];\n}\n\nfunction computeEpochNanoFrac(e, n, t) {\n  const o = dayTimeNanoToNumber(diffDayTimeNanos(e, n));\n  if (!o) {\n    throw new RangeError(d);\n  }\n  return dayTimeNanoToNumber(diffDayTimeNanos(e, t)) / o;\n}\n\nfunction roundDateTime(e, n, t, o, r) {\n  return 6 === n ? ((e, n, t) => {\n    if (n) {\n      const o = computeNanosecondsInDay(n, e);\n      return checkIsoDateTimeInBounds({\n        ...moveByIsoDays(e, roundByInc(isoTimeFieldsToNano(e), o, t) / o),\n        ...Ae\n      });\n    }\n    return roundDateTimeToNano(e, B, t);\n  })(e, r, o) : roundDateTimeToNano(e, computeNanoInc(n, t), o);\n}\n\nfunction roundDateTimeToNano(e, n, t) {\n  const [o, r] = roundTimeToNano(e, n, t);\n  return checkIsoDateTimeInBounds({\n    ...moveByIsoDays(e, r),\n    ...o\n  });\n}\n\nfunction roundTimeToNano(e, n, t) {\n  return nanoToIsoTimeAndDay(roundByInc(isoTimeFieldsToNano(e), n, t));\n}\n\nfunction balanceDayTimeDuration(e, n, t, o, r) {\n  return nanoToDurationDayTimeFields(roundDayTimeNano(durationFieldsToDayTimeNano(e, 6), t, o, r), n);\n}\n\nfunction balanceDayTimeDurationByInc(e, n, t, o) {\n  return nanoToDurationDayTimeFields(roundDayTimeNanoByInc(durationFieldsToDayTimeNano(e, n), t, o), n);\n}\n\nfunction roundRelativeDuration(e, n, t, o, r, i, a, s, c) {\n  const l = s === identityFunc ? o > 6 ? nudgeRelativeDuration : 6 === o ? nudgeDurationDayTime : nudgeRelativeDurationTime : o > 6 ? nudgeRelativeDuration : nudgeDurationDayTime;\n  let [u, d, f] = l(e, n, t, o, r, i, a, s, c);\n  return f && (u = ((e, n, t, o, r, i, a) => {\n    const s = Hn(e);\n    for (let c = o + 1; c <= t; c++) {\n      if (7 === c && 7 !== t) {\n        continue;\n      }\n      const o = clearDurationFields(e, c - 1);\n      o[ie[c]] += s;\n      const l = dayTimeNanoToNumber(diffDayTimeNanos(i(a(r, o)), n));\n      if (l && Math.sign(l) !== s) {\n        break;\n      }\n      e = o;\n    }\n    return e;\n  })(u, d, t, Math.max(6, o), a, s, c)), u;\n}\n\nfunction computeNanoInc(e, n) {\n  return R[e] * n;\n}\n\nfunction roundByInc(e, n, t) {\n  return ((e, n) => Ve[n](e))(e / n, t) * n;\n}\n\nfunction roundToMinute(e) {\n  return roundByInc(e, k, 7);\n}\n\nfunction roundDayTimeNano(e, n, t, o, r) {\n  return 6 === n ? [ roundByInc(totalDayTimeNano(e, 6), t, o), 0 ] : roundDayTimeNanoByInc(e, computeNanoInc(n, t), o, r);\n}\n\nfunction roundDayTimeNanoByInc(e, n, t, o) {\n  let [r, i] = e;\n  o && i < 0 && (i += B, r -= 1);\n  const [a, s] = divModFloor(roundByInc(i, n, t), B);\n  return createDayTimeNano(r + a, s);\n}\n\nfunction nudgeDurationDayTime(e, n, t, o, r, i) {\n  const a = Hn(e), s = durationFieldsToDayTimeNano(e, 6), c = roundDayTimeNano(s, o, r, i), l = diffDayTimeNanos(s, c), u = Math.sign(c[0] - s[0]) === a, d = nanoToDurationDayTimeFields(c, Math.min(t, 6));\n  return [ {\n    ...e,\n    ...d\n  }, addDayTimeNanos(n, l), u ];\n}\n\nfunction nudgeRelativeDurationTime(e, n, t, o, r, i, a, s, c) {\n  const l = Hn(e);\n  let [u, d] = givenFieldsToDayTimeNano(e, 5, ie);\n  const f = computeNanoInc(o, r);\n  let m = roundByInc(d, f, i);\n  const [p, h] = clampRelativeDuration({\n    ...e,\n    ...de\n  }, 6, l, a, s, c), T = m - dayTimeNanoToNumber(diffDayTimeNanos(p, h));\n  T && Math.sign(T) !== l ? n = addDayTimeNanoAndNumber(p, m) : (u += l, m = roundByInc(T, f, i), \n  n = addDayTimeNanoAndNumber(h, m));\n  const D = nanoToDurationTimeFields(m);\n  return [ {\n    ...e,\n    ...D,\n    days: e.days + u\n  }, n, Boolean(u) ];\n}\n\nfunction nudgeRelativeDuration(e, n, t, o, r, i, a, s, c) {\n  const l = Hn(e), u = ie[o], d = clearDurationFields(e, o - 1), f = divTrunc(e[u], r) * r;\n  d[u] = f;\n  const [m, p] = clampRelativeDuration(d, o, r * l, a, s, c), h = f + computeEpochNanoFrac(m, p, n) * l * r, T = roundByInc(h, r, i), D = Math.sign(T - h) === l;\n  return d[u] = T, [ d, D ? p : m, D ];\n}\n\nfunction diffInstants(e, n, t, o) {\n  const r = refineDiffOptions(o, copyOptions(t), 3, 5);\n  let i = diffEpochNano(e.epochNanoseconds, n.epochNanoseconds, ...r);\n  return createDurationSlots(o ? negateDurationFields(i) : i);\n}\n\nfunction diffZonedDateTimes(e, n, t, o, r, i) {\n  const a = getCommonCalendarSlot(t.calendar, o.calendar), s = copyOptions(r), [c, l, u, d] = refineDiffOptions(i, s, 5), f = t.epochNanoseconds, p = o.epochNanoseconds, h = compareDayTimeNanos(p, f);\n  let T;\n  if (h) {\n    if (c < 6) {\n      T = diffEpochNano(f, p, c, l, u, d);\n    } else {\n      const r = n(((e, n) => {\n        if (!isTimeZoneSlotsEqual(e, n, 1)) {\n          throw new RangeError(m);\n        }\n        return e;\n      })(t.timeZone, o.timeZone)), i = e(a);\n      T = diffZonedEpochNanoViaCalendar(i, r, h, f, p, c, s), !h || 0 === l && 1 === u || (T = roundRelativeDuration(T, p, c, l, u, d, f, identityFunc, bindArgs(moveZonedEpochNano, i, r)));\n    }\n  } else {\n    T = ue;\n  }\n  return createDurationSlots(i ? negateDurationFields(T) : T);\n}\n\nfunction diffPlainDateTimes(e, n, t, o, r) {\n  const i = getCommonCalendarSlot(n.calendar, t.calendar), a = copyOptions(o), [s, c, l, u] = refineDiffOptions(r, a, 6), d = isoToEpochNano(n), f = isoToEpochNano(t), m = compareDayTimeNanos(f, d);\n  let p;\n  if (m) {\n    if (s <= 6) {\n      p = diffEpochNano(d, f, s, c, l, u);\n    } else {\n      const o = e(i);\n      p = diffDateTimesViaCalendar(o, m, n, t, s, a), !m || 0 === c && 1 === l || (p = roundRelativeDuration(p, f, s, c, l, u, n, isoToEpochNano, bindArgs(moveDateTime, o)));\n    }\n  } else {\n    p = ue;\n  }\n  return createDurationSlots(r ? negateDurationFields(p) : p);\n}\n\nfunction diffPlainDates(e, n, t, o, r) {\n  const i = getCommonCalendarSlot(n.calendar, t.calendar), a = copyOptions(o);\n  return diffDateLike(r || 0, (() => e(i)), n, t, ...refineDiffOptions(r, a, 6, 9, 6), a);\n}\n\nfunction diffPlainYearMonth(e, n, t, o, r) {\n  const i = getCommonCalendarSlot(n.calendar, t.calendar), a = copyOptions(o), s = refineDiffOptions(r, a, 9, 9, 8), c = e(i);\n  return diffDateLike(r || 0, (() => c), moveToMonthStart(c, n), moveToMonthStart(c, t), ...s, a);\n}\n\nfunction diffDateLike(e, n, t, o, r, i, a, s, c) {\n  const l = isoToEpochNano(t), u = isoToEpochNano(o);\n  let d;\n  if (compareDayTimeNanos(u, l)) {\n    let e;\n    6 === r ? d = diffByDay(t, o) : (e = n(), d = e.dateUntil(t, o, r, c)), 6 === i && 1 === a || (e || (e = n()), \n    d = roundRelativeDuration(d, u, r, i, a, s, t, isoToEpochNano, ((n, t) => e.dateAdd(n, t))));\n  } else {\n    d = ue;\n  }\n  return createDurationSlots(e ? negateDurationFields(d) : d);\n}\n\nfunction diffPlainTimes(e, n, t, o) {\n  const r = copyOptions(t), [i, a, s, c] = refineDiffOptions(o, r, 5, 5), l = isoTimeFieldsToNano(e), u = roundByInc(isoTimeFieldsToNano(n) - l, computeNanoInc(a, s), c);\n  let d = {\n    ...ue,\n    ...nanoToDurationTimeFields(u, i)\n  };\n  return createDurationSlots(o ? negateDurationFields(d) : d);\n}\n\nfunction diffZonedEpochNanoExact(e, n, t, o, r, i) {\n  const a = compareDayTimeNanos(o, t);\n  return a ? r < 6 ? diffEpochNanoExact(t, o, r) : diffZonedEpochNanoViaCalendar(e, n, a, t, o, r, i) : ue;\n}\n\nfunction diffDateTimesExact(e, n, t, o, r) {\n  const i = isoToEpochNano(n), a = isoToEpochNano(t), s = compareDayTimeNanos(a, i);\n  return s ? o <= 6 ? diffEpochNanoExact(i, a, o) : diffDateTimesViaCalendar(e, s, n, t, o, r) : ue;\n}\n\nfunction diffZonedEpochNanoViaCalendar(e, n, t, o, r, i, a) {\n  const s = zonedEpochNanoToIso(n, o), c = pluckProps(Be, s), l = zonedEpochNanoToIso(n, r), u = bindArgs(getSingleInstantFor, n);\n  let f, m, p, h = 0;\n  do {\n    if (h > 2) {\n      throw new RangeError(d);\n    }\n    f = {\n      ...moveByIsoDays(l, h++ * -t),\n      ...c\n    }, m = u(f), p = compareDayTimeNanos(r, m);\n  } while (p === -t);\n  return {\n    ...6 === i ? diffByDay(s, f) : e.dateUntil(s, f, i, a),\n    ...nanoToDurationTimeFields(dayTimeNanoToNumber(diffDayTimeNanos(m, r)))\n  };\n}\n\nfunction diffDateTimesViaCalendar(e, n, t, o, r, i) {\n  const a = isoTimeFieldsToNano(t);\n  let s = isoTimeFieldsToNano(o) - a, c = t;\n  return Math.sign(s) === -n && (c = moveByIsoDays(t, n), s += B * n), {\n    ...e.dateUntil({\n      ...c,\n      ...Ae\n    }, {\n      ...o,\n      ...Ae\n    }, r, i),\n    ...nanoToDurationTimeFields(s)\n  };\n}\n\nfunction diffEpochNano(e, n, t, o, r, i) {\n  return {\n    ...ue,\n    ...nanoToDurationDayTimeFields(roundDayTimeNano(diffDayTimeNanos(e, n), o, r, i), t)\n  };\n}\n\nfunction diffEpochNanoExact(e, n, t) {\n  return {\n    ...ue,\n    ...nanoToDurationDayTimeFields(diffDayTimeNanos(e, n), t)\n  };\n}\n\nfunction diffByDay(e, n) {\n  return {\n    ...ue,\n    days: diffDays(e, n)\n  };\n}\n\nfunction diffDays(e, n) {\n  return diffEpochMilliByDay(isoToEpochMilli(e), isoToEpochMilli(n));\n}\n\nfunction diffEpochMilliByDay(e, n) {\n  return Math.round((n - e) / b);\n}\n\nfunction computeIsoMonthsInYear() {\n  return xn;\n}\n\nfunction computeIsoDaysInMonth(e, n) {\n  switch (n) {\n   case 2:\n    return computeIsoInLeapYear(e) ? 29 : 28;\n\n   case 4:\n   case 6:\n   case 9:\n   case 11:\n    return 30;\n  }\n  return 31;\n}\n\nfunction computeIsoDaysInYear(e) {\n  return computeIsoInLeapYear(e) ? 366 : 365;\n}\n\nfunction computeIsoInLeapYear(e) {\n  return e % 4 == 0 && (e % 100 != 0 || e % 400 == 0);\n}\n\nfunction computeIsoDayOfYear(e) {\n  return diffEpochMilliByDay(isoToEpochMilli(isoDateYearStart(e)), isoToEpochMilli({\n    ...e,\n    ...Ae\n  })) + 1;\n}\n\nfunction computeIsoDayOfWeek(e) {\n  const [n, t] = isoToLegacyDate(e.isoYear, e.isoMonth, e.isoDay);\n  return modFloor(n.getDay() + 1 - t, 7) || 7;\n}\n\nfunction computeIsoWeekParts(e) {\n  const n = computeIsoDayOfYear(e), t = computeIsoDayOfWeek(e), o = computeIsoDayOfWeek(isoDateYearStart(e)), r = Math.floor((n - t + 10) / $n), {isoYear: i} = e;\n  return r < 1 ? [ i - 1, 5 === o || 6 === o && computeIsoInLeapYear(i - 1) ? 53 : 52 ] : 53 === r && computeIsoDaysInYear(i) - n < 4 - t ? [ i + 1, 1 ] : [ i, r ];\n}\n\nfunction isoDateYearStart(e) {\n  return {\n    ...e,\n    isoMonth: 1,\n    isoDay: 1,\n    ...Ae\n  };\n}\n\nfunction computeGregoryEraParts({isoYear: e}) {\n  return e < 1 ? [ \"bce\", 1 - e ] : [ \"ce\", e ];\n}\n\nfunction checkIsoDateTimeFields(e) {\n  return checkIsoDateFields(e), constrainIsoTimeFields(e, 1), e;\n}\n\nfunction checkIsoDateFields(e) {\n  return constrainIsoDateFields(e, 1), e;\n}\n\nfunction isIsoDateFieldsValid(e) {\n  return allFieldsEqual(Re, e, constrainIsoDateFields(e));\n}\n\nfunction constrainIsoDateFields(e, n) {\n  const {isoYear: t} = e, o = clampProp(e, \"isoMonth\", 1, computeIsoMonthsInYear(), n);\n  return {\n    isoYear: t,\n    isoMonth: o,\n    isoDay: clampProp(e, \"isoDay\", 1, computeIsoDaysInMonth(t, o), n)\n  };\n}\n\nfunction constrainIsoTimeFields(e, n) {\n  return zipProps(Be, [ clampProp(e, \"isoHour\", 0, 23, n), clampProp(e, \"isoMinute\", 0, 59, n), clampProp(e, \"isoSecond\", 0, 59, n), clampProp(e, \"isoMillisecond\", 0, 999, n), clampProp(e, \"isoMicrosecond\", 0, 999, n), clampProp(e, \"isoNanosecond\", 0, 999, n) ]);\n}\n\nfunction moveInstant(e, n, t) {\n  return createInstantSlots(checkEpochNanoInBounds(addDayTimeNanos(e.epochNanoseconds, (e => {\n    if (durationHasDateParts(e)) {\n      throw new RangeError(y);\n    }\n    return durationFieldsToDayTimeNano(e, 5);\n  })(t ? negateDurationFields(n) : n))));\n}\n\nfunction moveZonedDateTime(e, n, t, o, r = Object.create(null), i) {\n  const a = n(t.timeZone), s = moveZonedEpochNano(e(t.calendar), a, t.epochNanoseconds, i ? negateDurationFields(o) : o, r);\n  return {\n    ...t,\n    epochNanoseconds: s\n  };\n}\n\nfunction movePlainDateTime(e, n, t, o = Object.create(null), r) {\n  return createPlainDateTimeSlots({\n    ...n,\n    ...moveDateTime(e(n.calendar), n, r ? negateDurationFields(t) : t, o)\n  });\n}\n\nfunction movePlainDate(e, n, t, o, r) {\n  return {\n    ...n,\n    ...moveDateEfficient(e(n.calendar), n, r ? negateDurationFields(t) : t, o)\n  };\n}\n\nfunction movePlainYearMonth(e, n, t, o = Object.create(null), r) {\n  const i = n.calendar, a = e(i);\n  let s = moveToMonthStart(a, n);\n  r && (t = negateDuration(t)), Hn(t) < 0 && (s = a.dateAdd(s, {\n    ...ue,\n    months: 1\n  }), s = moveByIsoDays(s, -1));\n  const c = a.dateAdd(s, t, o);\n  return createPlainYearMonthSlots(moveToMonthStart(a, c), i);\n}\n\nfunction movePlainTime(e, n, t) {\n  return createPlainTimeSlots(moveTime(e, t ? negateDurationFields(n) : n)[0]);\n}\n\nfunction moveZonedEpochNano(e, n, t, o, r) {\n  const i = durationFieldsToDayTimeNano(o, 5);\n  if (durationHasDateParts(o)) {\n    const a = zonedEpochNanoToIso(n, t);\n    t = addDayTimeNanos(getSingleInstantFor(n, {\n      ...moveDateEfficient(e, a, {\n        ...o,\n        ...de\n      }, r),\n      ...pluckProps(Be, a),\n      calendar: we\n    }), i);\n  } else {\n    t = addDayTimeNanos(t, i), refineOverflowOptions(r);\n  }\n  return checkEpochNanoInBounds(t);\n}\n\nfunction moveDateTime(e, n, t, o) {\n  const [r, i] = moveTime(n, t);\n  return checkIsoDateTimeInBounds({\n    ...moveDateEfficient(e, n, {\n      ...t,\n      ...de,\n      days: t.days + i\n    }, o),\n    ...r\n  });\n}\n\nfunction moveDateEfficient(e, n, t, o) {\n  if (t.years || t.months || t.weeks) {\n    return e.dateAdd(n, t, o);\n  }\n  refineOverflowOptions(o);\n  const r = t.days + givenFieldsToDayTimeNano(t, 5, ie)[0];\n  return r ? checkIsoDateInBounds(moveByIsoDays(n, r)) : n;\n}\n\nfunction moveToMonthStart(e, n) {\n  return moveByIsoDays(n, 1 - e.day(n));\n}\n\nfunction moveTime(e, n) {\n  const [t, o] = givenFieldsToDayTimeNano(n, 5, ie), [r, i] = nanoToIsoTimeAndDay(isoTimeFieldsToNano(e) + o);\n  return [ r, t + i ];\n}\n\nfunction moveByIsoDays(e, n) {\n  return n && (e = epochMilliToIso(isoToEpochMilli(e) + n * b)), e;\n}\n\nfunction createMarkerSystem(e, n, t) {\n  const {calendar: o, timeZone: r, epochNanoseconds: i} = t, a = e(o);\n  if (i) {\n    const e = n(r);\n    return [ i, identityFunc, bindArgs(moveZonedEpochNano, a, e), bindArgs(diffZonedEpochNanoExact, a, e) ];\n  }\n  return [ {\n    ...t,\n    ...Ae\n  }, isoToEpochNano, bindArgs(moveDateTime, a), bindArgs(diffDateTimesExact, a) ];\n}\n\nfunction spanDuration(e, n, t, o, r, i, a) {\n  let s = i(o, e);\n  return n && (s = i(s, n)), [ a(o, s, t), r(s) ];\n}\n\nfunction addDurations(e, n, t, o, r, i, a) {\n  const s = e(normalizeOptions(i).relativeTo), c = Math.max(getLargestDurationUnit(o), getLargestDurationUnit(r));\n  if (c < 6 || 6 === c && (!s || !s.epochNanoseconds)) {\n    return createDurationSlots(((e, n, t, o) => {\n      const r = addDayTimeNanos(durationFieldsToDayTimeNano(e, 6), durationFieldsToDayTimeNano(n, 6), o ? -1 : 1);\n      if (!Number.isFinite(r[0])) {\n        throw new RangeError(D);\n      }\n      return {\n        ...ue,\n        ...nanoToDurationDayTimeFields(r, t)\n      };\n    })(o, r, c, a));\n  }\n  if (!s) {\n    throw new RangeError(I);\n  }\n  return a && (r = negateDurationFields(r)), createDurationSlots(spanDuration(o, r, c, ...createMarkerSystem(n, t, s))[0]);\n}\n\nfunction negateDuration(e) {\n  return createDurationSlots(negateDurationFields(e));\n}\n\nfunction negateDurationFields(e) {\n  const n = {};\n  for (const t of ie) {\n    n[t] = -1 * e[t] || 0;\n  }\n  return n;\n}\n\nfunction computeDurationSign(e, n = ie) {\n  let t = 0;\n  for (const o of n) {\n    const n = Math.sign(e[o]);\n    if (n) {\n      if (t && t !== n) {\n        throw new RangeError(g);\n      }\n      t = n;\n    }\n  }\n  return t;\n}\n\nfunction checkDurationFields(e) {\n  return Hn(e), e;\n}\n\nfunction durationFieldsToDayTimeNano(e, n) {\n  return givenFieldsToDayTimeNano(e, n, ie);\n}\n\nfunction nanoToDurationDayTimeFields(e, n = 6) {\n  const [t, o] = e, r = nanoToGivenFields(o, n, ie);\n  if (r[ie[n]] += t * (B / R[n]), !Number.isFinite(r[ie[n]])) {\n    throw new RangeError(D);\n  }\n  return r;\n}\n\nfunction nanoToDurationTimeFields(e, n = 5) {\n  return nanoToGivenFields(e, n, ie);\n}\n\nfunction clearDurationFields(e, n) {\n  const t = {\n    ...e\n  };\n  for (let e = 0; e <= n; e++) {\n    t[ie[e]] = 0;\n  }\n  return t;\n}\n\nfunction durationHasDateParts(e) {\n  return Boolean(computeDurationSign(e, ce));\n}\n\nfunction getLargestDurationUnit(e) {\n  let n = 9;\n  for (;n > 0 && !e[ie[n]]; n--) {}\n  return n;\n}\n\nfunction realizeCalendarId(e) {\n  return (e = normalizeCalendarId(e)) !== we && e !== Ee && kn(e), e;\n}\n\nfunction normalizeCalendarId(e) {\n  return \"islamicc\" === (e = e.toLocaleLowerCase()) && (e = \"islamic-civil\"), e;\n}\n\nfunction parseOffsetNano(e) {\n  const n = parseOffsetNanoMaybe(e);\n  if (void 0 === n) {\n    throw new RangeError(failedParse(e));\n  }\n  return n;\n}\n\nfunction parsePlainDate(e) {\n  const n = parseDateTimeLike(ne(e));\n  if (!n || n.I) {\n    throw new RangeError(failedParse(e));\n  }\n  return createPlainDateSlots(n.N ? finalizeDateTime(n) : finalizeDate(n));\n}\n\nfunction requireIsoCalendar(e) {\n  if (e.calendar !== we) {\n    throw new RangeError(invalidSubstring(e.calendar));\n  }\n}\n\nfunction finalizeZonedDateTime(e, n, t = 0, o = 0) {\n  const r = queryNativeTimeZone(e.timeZone);\n  return createZonedDateTimeSlots(getMatchingInstantFor(r, checkIsoDateTimeFields(e), n, t, o, !(r instanceof FixedTimeZone), e.I), r.id, realizeCalendarId(e.calendar));\n}\n\nfunction finalizeDateTime(e) {\n  return realizeCalendarSlot(checkIsoDateTimeInBounds(checkIsoDateTimeFields(e)));\n}\n\nfunction finalizeDate(e) {\n  return realizeCalendarSlot(checkIsoDateInBounds(checkIsoDateFields(e)));\n}\n\nfunction realizeCalendarSlot(e) {\n  return {\n    ...e,\n    calendar: realizeCalendarId(e.calendar)\n  };\n}\n\nfunction parseDateTimeLike(e) {\n  const n = ut.exec(e);\n  return n ? (e => {\n    const n = e[10], t = \"Z\" === (n || \"\").toUpperCase();\n    return {\n      isoYear: organizeIsoYearParts(e),\n      isoMonth: parseInt(e[4]),\n      isoDay: parseInt(e[5]),\n      ...organizeTimeParts(e.slice(5)),\n      ...organizeAnnotationParts(e[16]),\n      N: Boolean(e[6]),\n      I: t,\n      offset: t ? void 0 : n\n    };\n  })(n) : void 0;\n}\n\nfunction parseYearMonthOnly(e) {\n  const n = ct.exec(e);\n  return n ? (e => ({\n    isoYear: organizeIsoYearParts(e),\n    isoMonth: parseInt(e[4]),\n    isoDay: 1,\n    ...organizeAnnotationParts(e[5])\n  }))(n) : void 0;\n}\n\nfunction parseMonthDayOnly(e) {\n  const n = lt.exec(e);\n  return n ? (e => ({\n    isoYear: Un,\n    isoMonth: parseInt(e[1]),\n    isoDay: parseInt(e[2]),\n    ...organizeAnnotationParts(e[3])\n  }))(n) : void 0;\n}\n\nfunction parseOffsetNanoMaybe(e, n) {\n  const t = ft.exec(e);\n  return t ? ((e, n) => {\n    const t = e[4] || e[5];\n    if (n && t) {\n      throw new RangeError(invalidSubstring(t));\n    }\n    return validateTimeZoneOffset((parseInt0(e[2]) * Y + parseInt0(e[3]) * k + parseInt0(e[4]) * Z + parseSubsecNano(e[5] || \"\")) * parseSign(e[1]));\n  })(t, n) : void 0;\n}\n\nfunction organizeIsoYearParts(e) {\n  const n = parseSign(e[1]), t = parseInt(e[2] || e[3]);\n  if (n < 0 && !t) {\n    throw new RangeError(invalidSubstring(-0));\n  }\n  return n * t;\n}\n\nfunction organizeTimeParts(e) {\n  const n = parseInt0(e[3]);\n  return {\n    ...nanoToIsoTimeAndDay(parseSubsecNano(e[4] || \"\"))[0],\n    isoHour: parseInt0(e[1]),\n    isoMinute: parseInt0(e[2]),\n    isoSecond: 60 === n ? 59 : n\n  };\n}\n\nfunction organizeAnnotationParts(e) {\n  let n, t;\n  const o = [];\n  if (e.replace(mt, ((e, r, i) => {\n    const a = Boolean(r), [s, c] = i.split(\"=\").reverse();\n    if (c) {\n      if (\"u-ca\" === c) {\n        o.push(s), n || (n = a);\n      } else if (a) {\n        throw new RangeError(invalidSubstring(e));\n      }\n    } else {\n      if (t) {\n        throw new RangeError(invalidSubstring(e));\n      }\n      t = s;\n    }\n    return \"\";\n  })), o.length > 1 && n) {\n    throw new RangeError(invalidSubstring(e));\n  }\n  return {\n    timeZone: t,\n    calendar: o[0] || we\n  };\n}\n\nfunction parseSubsecNano(e) {\n  return parseInt(e.padEnd(9, \"0\"));\n}\n\nfunction createRegExp(e) {\n  return new RegExp(`^${e}$`, \"i\");\n}\n\nfunction parseSign(e) {\n  return e && \"+\" !== e ? -1 : 1;\n}\n\nfunction parseInt0(e) {\n  return void 0 === e ? 0 : parseInt(e);\n}\n\nfunction createInstantSlots(e) {\n  return {\n    O: St,\n    epochNanoseconds: e\n  };\n}\n\nfunction createZonedDateTimeSlots(e, n, t) {\n  return {\n    O: yt,\n    calendar: t,\n    timeZone: n,\n    epochNanoseconds: e\n  };\n}\n\nfunction createPlainDateTimeSlots(e, n = e.calendar) {\n  return {\n    O: gt,\n    calendar: n,\n    ...pluckProps(ze, e)\n  };\n}\n\nfunction createPlainDateSlots(e, n = e.calendar) {\n  return {\n    O: Dt,\n    calendar: n,\n    ...pluckProps(je, e)\n  };\n}\n\nfunction createPlainYearMonthSlots(e, n = e.calendar) {\n  return {\n    O: ht,\n    calendar: n,\n    ...pluckProps(je, e)\n  };\n}\n\nfunction createPlainMonthDaySlots(e, n = e.calendar) {\n  return {\n    O: Tt,\n    calendar: n,\n    ...pluckProps(je, e)\n  };\n}\n\nfunction createPlainTimeSlots(e) {\n  return {\n    O: It,\n    ...pluckProps(qe, e)\n  };\n}\n\nfunction createDurationSlots(e) {\n  return {\n    O: Nt,\n    ...pluckProps(ae, e)\n  };\n}\n\nfunction removeBranding(e) {\n  return delete (e = {\n    ...e\n  }).O, e;\n}\n\nfunction getCommonCalendarSlot(e, n) {\n  if (!isIdLikeEqual(e, n)) {\n    throw new RangeError(f);\n  }\n  return e;\n}\n\nfunction getPreferredCalendarSlot(e, n) {\n  if (e === n) {\n    return e;\n  }\n  const t = getId(e), o = getId(n);\n  if (t === o || t === we) {\n    return n;\n  }\n  if (o === we) {\n    return e;\n  }\n  throw new RangeError(f);\n}\n\nfunction isTimeZoneSlotsEqual(e, n, t) {\n  return e === n || getTimeZoneSlotRaw(e, t) === getTimeZoneSlotRaw(n, t);\n}\n\nfunction getTimeZoneSlotRaw(e, n) {\n  const t = getId(e);\n  if (n && t === Yn) {\n    return 0;\n  }\n  const o = parseOffsetNanoMaybe(t);\n  return void 0 !== o ? o : t;\n}\n\nfunction getId(e) {\n  return \"string\" == typeof e ? e : ne(e.id);\n}\n\nfunction isIdLikeEqual(e, n) {\n  return e === n || getId(e) === getId(n);\n}\n\nfunction createCalendarFieldMethods(e, n) {\n  const t = {};\n  for (const o in e) {\n    t[o] = ({P: e}, t) => {\n      const r = Uo(t) || {}, {O: i} = r, a = i === Dt || n.includes(i) ? r : toPlainDateSlots(t);\n      return e[o](a);\n    };\n  }\n  return t;\n}\n\nfunction createCalendarGetters(e) {\n  const n = {};\n  for (const t in e) {\n    n[t] = e => {\n      const {calendar: n} = e;\n      return (o = n, \"string\" == typeof o ? Kn(o) : (r = o, Object.assign(Object.create(kt), {\n        v: r\n      })))[t](e);\n      var o, r;\n    };\n  }\n  return n;\n}\n\nfunction neverValueOf() {\n  throw new TypeError(\"Cannot use valueOf\");\n}\n\nfunction getCalendarFromSlots({calendar: e}) {\n  return \"string\" == typeof e ? new Go(e) : e;\n}\n\nfunction compareInstants(e, n) {\n  return compareDayTimeNanos(e.epochNanoseconds, n.epochNanoseconds);\n}\n\nfunction compareZonedDateTimes(e, n) {\n  return compareDayTimeNanos(e.epochNanoseconds, n.epochNanoseconds);\n}\n\nfunction compareIsoDateTimeFields(e, n) {\n  return compareIsoDateFields(e, n) || compareIsoTimeFields(e, n);\n}\n\nfunction compareIsoDateFields(e, n) {\n  return compareNumbers(isoToEpochMilli(e), isoToEpochMilli(n));\n}\n\nfunction compareIsoTimeFields(e, n) {\n  return compareNumbers(isoTimeFieldsToNano(e), isoTimeFieldsToNano(n));\n}\n\nfunction instantToZonedDateTime(e, n, t = we) {\n  return createZonedDateTimeSlots(e.epochNanoseconds, n, t);\n}\n\nfunction zonedDateTimeToPlainDateTime(e, n) {\n  return createPlainDateTimeSlots(zn(n, e(n.timeZone)), n.calendar);\n}\n\nfunction zonedDateTimeToPlainDate(e, n) {\n  return createPlainDateSlots(zn(n, e(n.timeZone)), n.calendar);\n}\n\nfunction zonedDateTimeToPlainTime(e, n) {\n  return createPlainTimeSlots(zn(n, e(n.timeZone)));\n}\n\nfunction toPlainMonthDaySlots(e, n) {\n  if (n = copyOptions(n), isObjectLike(e)) {\n    const t = Uo(e);\n    if (t && t.O === Tt) {\n      return refineOverflowOptions(n), t;\n    }\n    const o = extractCalendarSlotFromBag(e);\n    return refinePlainMonthDayBag(mo(o || we), !o, e, n);\n  }\n  const t = ((e, n) => {\n    const t = parseMonthDayOnly(ne(n));\n    if (t) {\n      return requireIsoCalendar(t), createPlainMonthDaySlots(checkIsoDateFields(t));\n    }\n    const o = parsePlainDate(n), {calendar: r} = o, i = e(r), [a, s, c] = i.F(o), [l, u] = i.C(a, s), [d, f] = i.k(l, u, c);\n    return createPlainMonthDaySlots(i.B(d, f, c), r);\n  })(Kn, e);\n  return refineOverflowOptions(n), t;\n}\n\nfunction toPlainYearMonthSlots(e, n) {\n  if (n = copyOptions(n), isObjectLike(e)) {\n    const t = Uo(e);\n    return t && t.O === ht ? (refineOverflowOptions(n), t) : refinePlainYearMonthBag(uo(getCalendarSlotFromBag(e)), e, n);\n  }\n  const t = ((e, n) => {\n    const t = parseYearMonthOnly(ne(n));\n    if (t) {\n      return requireIsoCalendar(t), createPlainYearMonthSlots(checkIsoYearMonthInBounds(checkIsoDateFields(t)));\n    }\n    const o = parsePlainDate(n), r = moveToMonthStart(e(o.calendar), o);\n    return createPlainYearMonthSlots({\n      ...o,\n      ...r\n    });\n  })(Kn, e);\n  return refineOverflowOptions(n), t;\n}\n\nfunction dayAdapter(e, n, t) {\n  return requirePositiveInteger(n.call(e, Ro(createPlainDateSlots(t, e))));\n}\n\nfunction createCompoundOpsCreator(e) {\n  return n => \"string\" == typeof n ? Kn(n) : ((e, n) => {\n    const t = Object.keys(n).sort(), o = {};\n    for (const r of t) {\n      o[r] = bindArgs(n[r], e, e[r]);\n    }\n    return o;\n  })(n, e);\n}\n\nfunction getImplTransition(e, n, t) {\n  const o = n.R(toInstantSlots(t).epochNanoseconds, e);\n  return o ? Mo(createInstantSlots(o)) : null;\n}\n\nfunction slotsWithCalendar(e, n) {\n  return {\n    ...e,\n    calendar: n\n  };\n}\n\nfunction adaptToIsoFields(e) {\n  return mapProps((e => n => e(slotsToIsoFields(n))), e);\n}\n\nfunction slotsToIsoFields(e) {\n  const n = createSimpleTimeZoneOps(e.timeZone);\n  return {\n    ...zn(e, n),\n    calendar: e.calendar\n  };\n}\n\nfunction toZonedDateTimeSlots(e, n) {\n  if (n = copyOptions(n), isObjectLike(e)) {\n    const t = Uo(e);\n    if (t && t.O === yt) {\n      return refineZonedFieldOptions(n), t;\n    }\n    const o = getCalendarSlotFromBag(e);\n    return ((e, n, t, o, r, i) => {\n      const a = refineCalendarFields(t, r, K, z, U), s = e(a.timeZone), [c, l, u] = refineZonedFieldOptions(i), d = t.dateFromFields(a, overrideOverflowOptions(i, c)), f = refineTimeBag(a, c);\n      return createZonedDateTimeSlots(getMatchingInstantFor(n(s), {\n        ...d,\n        ...f\n      }, void 0 !== a.offset ? parseOffsetNano(a.offset) : void 0, l, u), s, o);\n    })(refineTimeZoneSlot, createTimeZoneOps, fo(o), o, e, n);\n  }\n  return ((e, n) => {\n    const t = parseDateTimeLike(ne(e));\n    if (!t || !t.timeZone) {\n      throw new RangeError(failedParse(e));\n    }\n    const {offset: o} = t, r = o ? parseOffsetNano(o) : void 0, [, i, a] = refineZonedFieldOptions(n);\n    return finalizeZonedDateTime(t, r, i, a);\n  })(e, n);\n}\n\nfunction toInstantSlots(e) {\n  if (isObjectLike(e)) {\n    const n = Uo(e);\n    if (n) {\n      switch (n.O) {\n       case St:\n        return n;\n\n       case yt:\n        return createInstantSlots(n.epochNanoseconds);\n      }\n    }\n  }\n  return (e => {\n    const n = parseDateTimeLike(e = toStringViaPrimitive(e));\n    if (!n) {\n      throw new RangeError(failedParse(e));\n    }\n    let t;\n    if (n.I) {\n      t = 0;\n    } else {\n      if (!n.offset) {\n        throw new RangeError(failedParse(e));\n      }\n      t = parseOffsetNano(n.offset);\n    }\n    return n.timeZone && parseOffsetNanoMaybe(n.timeZone, 1), createInstantSlots(isoToEpochNanoWithOffset(checkIsoDateTimeFields(n), t));\n  })(e);\n}\n\nfunction toTemporalInstant() {\n  return Mo(createInstantSlots(numberToDayTimeNano(this.valueOf(), C)));\n}\n\nfunction adapterGetOffsetNanosecondsFor(e, n, t) {\n  return validateTimeZoneOffset(requireInteger(n.call(e, Mo(createInstantSlots(t)))));\n}\n\nfunction createAdapterOps(e, n = bo) {\n  const t = Object.keys(n).sort(), o = {};\n  for (const r of t) {\n    o[r] = bindArgs(n[r], e, re(e[r]));\n  }\n  return o;\n}\n\nfunction createTimeZoneOps(e, n) {\n  return \"string\" == typeof e ? queryNativeTimeZone(e) : createAdapterOps(e, n);\n}\n\nfunction createSimpleTimeZoneOps(e) {\n  return createTimeZoneOps(e, wo);\n}\n\nfunction toDurationSlots(e) {\n  if (isObjectLike(e)) {\n    const n = Uo(e);\n    return n && n.O === Nt ? n : (e => {\n      const n = refineFields(e, ae);\n      return createDurationSlots(checkDurationFields({\n        ...ue,\n        ...n\n      }));\n    })(e);\n  }\n  return (e => {\n    const n = (e => {\n      const n = pt.exec(e);\n      return n ? (e => {\n        function parseUnit(e, t, i) {\n          let a = 0, s = 0;\n          if (i && ([a, r] = divModFloor(r, R[i])), void 0 !== e) {\n            if (o) {\n              throw new RangeError(invalidSubstring(e));\n            }\n            s = (e => {\n              const n = parseInt(e);\n              if (!Number.isFinite(n)) {\n                throw new RangeError(invalidSubstring(e));\n              }\n              return n;\n            })(e), n = 1, t && (r = parseSubsecNano(t) * (R[i] / Z), o = 1);\n          }\n          return a + s;\n        }\n        let n = 0, o = 0, r = 0, i = {\n          ...zipProps(ie, [ parseUnit(e[2]), parseUnit(e[3]), parseUnit(e[4]), parseUnit(e[5]), parseUnit(e[6], e[7], 5), parseUnit(e[8], e[9], 4), parseUnit(e[10], e[11], 3) ]),\n          ...nanoToGivenFields(r, 2, ie)\n        };\n        if (!n) {\n          throw new RangeError(t);\n        }\n        return parseSign(e[1]) < 0 && (i = negateDurationFields(i)), i;\n      })(n) : void 0;\n    })(ne(e));\n    if (!n) {\n      throw new RangeError(failedParse(e));\n    }\n    return createDurationSlots(n);\n  })(e);\n}\n\nfunction refinePublicRelativeTo(e) {\n  if (void 0 !== e) {\n    if (isObjectLike(e)) {\n      const n = Uo(e) || {};\n      switch (n.O) {\n       case yt:\n       case Dt:\n        return n;\n\n       case gt:\n        return createPlainDateSlots(n);\n      }\n      const t = getCalendarSlotFromBag(e);\n      return {\n        ...((e, n, t, o) => {\n          const r = refineCalendarFields(t, o, K, [], U);\n          if (void 0 !== r.timeZone) {\n            const o = t.dateFromFields(r), i = refineTimeBag(r), a = e(r.timeZone);\n            return {\n              epochNanoseconds: getMatchingInstantFor(n(a), {\n                ...o,\n                ...i\n              }, void 0 !== r.offset ? parseOffsetNano(r.offset) : void 0),\n              timeZone: a\n            };\n          }\n          return {\n            ...t.dateFromFields(r),\n            ...Ae\n          };\n        })(refineTimeZoneSlot, createTimeZoneOps, fo(t), e),\n        calendar: t\n      };\n    }\n    return (e => {\n      const n = parseDateTimeLike(ne(e));\n      if (!n) {\n        throw new RangeError(failedParse(e));\n      }\n      if (n.timeZone) {\n        return finalizeZonedDateTime(n, n.offset ? parseOffsetNano(n.offset) : void 0);\n      }\n      if (n.I) {\n        throw new RangeError(failedParse(e));\n      }\n      return finalizeDate(n);\n    })(e);\n  }\n}\n\nfunction toPlainDateTimeSlots(e, n) {\n  if (n = copyOptions(n), isObjectLike(e)) {\n    const t = Uo(e) || {};\n    switch (t.O) {\n     case gt:\n      return refineOverflowOptions(n), t;\n\n     case Dt:\n      return refineOverflowOptions(n), createPlainDateTimeSlots({\n        ...t,\n        ...Ae\n      });\n\n     case yt:\n      return refineOverflowOptions(n), zonedDateTimeToPlainDateTime(createSimpleTimeZoneOps, t);\n    }\n    return ((e, n, t) => {\n      const o = refineCalendarFields(e, n, K, [], L), r = refineOverflowOptions(t);\n      return createPlainDateTimeSlots(checkIsoDateTimeInBounds({\n        ...e.dateFromFields(o, overrideOverflowOptions(t, r)),\n        ...refineTimeBag(o, r)\n      }));\n    })(fo(getCalendarSlotFromBag(e)), e, n);\n  }\n  const t = (e => {\n    const n = parseDateTimeLike(ne(e));\n    if (!n || n.I) {\n      throw new RangeError(failedParse(e));\n    }\n    return createPlainDateTimeSlots(finalizeDateTime(n));\n  })(e);\n  return refineOverflowOptions(n), t;\n}\n\nfunction toPlainDateSlots(e, n) {\n  if (n = copyOptions(n), isObjectLike(e)) {\n    const t = Uo(e) || {};\n    switch (t.O) {\n     case Dt:\n      return refineOverflowOptions(n), t;\n\n     case gt:\n      return refineOverflowOptions(n), createPlainDateSlots(t);\n\n     case yt:\n      return refineOverflowOptions(n), zonedDateTimeToPlainDate(createSimpleTimeZoneOps, t);\n    }\n    return refinePlainDateBag(fo(getCalendarSlotFromBag(e)), e, n);\n  }\n  const t = parsePlainDate(e);\n  return refineOverflowOptions(n), t;\n}\n\nfunction toPlainTimeSlots(e, n) {\n  if (isObjectLike(e)) {\n    const t = Uo(e) || {};\n    switch (t.O) {\n     case It:\n      return refineOverflowOptions(n), t;\n\n     case gt:\n      return refineOverflowOptions(n), createPlainTimeSlots(t);\n\n     case yt:\n      return refineOverflowOptions(n), zonedDateTimeToPlainTime(createSimpleTimeZoneOps, t);\n    }\n    return ((e, n) => {\n      const t = refineOverflowOptions(n);\n      return createPlainTimeSlots(refineTimeBag(refineFields(e, j, [], 1), t));\n    })(e, n);\n  }\n  return refineOverflowOptions(n), (e => {\n    let n, t = (e => {\n      const n = dt.exec(e);\n      return n ? (organizeAnnotationParts(n[10]), organizeTimeParts(n)) : void 0;\n    })(ne(e));\n    if (!t) {\n      if (t = parseDateTimeLike(e), !t) {\n        throw new RangeError(failedParse(e));\n      }\n      if (!t.N) {\n        throw new RangeError(failedParse(e));\n      }\n      if (t.I) {\n        throw new RangeError(invalidSubstring(\"Z\"));\n      }\n      requireIsoCalendar(t);\n    }\n    if ((n = parseYearMonthOnly(e)) && isIsoDateFieldsValid(n)) {\n      throw new RangeError(failedParse(e));\n    }\n    if ((n = parseMonthDayOnly(e)) && isIsoDateFieldsValid(n)) {\n      throw new RangeError(failedParse(e));\n    }\n    return createPlainTimeSlots(constrainIsoTimeFields(t, 1));\n  })(e);\n}\n\nfunction createProtocolChecker(e) {\n  return e = e.concat(\"id\").sort(), n => {\n    if (!((e, n) => {\n      for (const t of n) {\n        if (!(t in e)) {\n          return 0;\n        }\n      }\n      return 1;\n    })(n, e)) {\n      throw new TypeError(\"Invalid protocol\");\n    }\n  };\n}\n\nfunction optionalToPlainTimeFields(e) {\n  return void 0 === e ? void 0 : toPlainTimeSlots(e);\n}\n\nfunction createSlotClass(e, n, t, r, i) {\n  function Class(...e) {\n    if (!(this instanceof Class)) {\n      throw new TypeError(o);\n    }\n    xo(this, n(...e));\n  }\n  function curryMethod(n, t) {\n    return Object.defineProperties((function(...t) {\n      const r = Uo(this);\n      if (!r || r.O !== e) {\n        throw new TypeError(o);\n      }\n      return n.call(this, r, ...t);\n    }), createNameDescriptors(t));\n  }\n  return Object.defineProperties(Class.prototype, {\n    ...createGetterDescriptors(mapProps(curryMethod, t)),\n    ...createPropDescriptors(mapProps(curryMethod, r)),\n    ...createStringTagDescriptors(\"Temporal.\" + e)\n  }), Object.defineProperties(Class, {\n    ...createPropDescriptors(i),\n    ...createNameDescriptors(e)\n  }), [ Class, e => {\n    const n = Object.create(Class.prototype);\n    return xo(n, e), n;\n  }, n => {\n    const t = Uo(n);\n    if (!t || t.O !== e) {\n      throw new TypeError(o);\n    }\n    return t;\n  } ];\n}\n\nfunction rejectInvalidBag(e) {\n  if (Uo(e) || void 0 !== e.calendar || void 0 !== e.timeZone) {\n    throw new TypeError(\"Invalid bag\");\n  }\n  return e;\n}\n\nfunction refineCalendarSlot(e) {\n  if (isObjectLike(e)) {\n    const {calendar: n} = Uo(e) || {};\n    return n || (Wo(e), e);\n  }\n  return (e => realizeCalendarId((e => {\n    const n = parseDateTimeLike(e) || parseYearMonthOnly(e) || parseMonthDayOnly(e);\n    return n ? n.calendar : e;\n  })(ne(e))))(e);\n}\n\nfunction getCalendarSlotFromBag(e) {\n  return extractCalendarSlotFromBag(e) || we;\n}\n\nfunction extractCalendarSlotFromBag(e) {\n  const {calendar: n} = e;\n  if (void 0 !== n) {\n    return refineCalendarSlot(n);\n  }\n}\n\nfunction refineTimeZoneSlot(e) {\n  if (isObjectLike(e)) {\n    const {timeZone: n} = Uo(e) || {};\n    return n || (zo(e), e);\n  }\n  return (e => queryNativeTimeZone((e => {\n    const n = parseDateTimeLike(e);\n    return n && (n.timeZone || n.I && Yn || n.offset) || e;\n  })(ne(e))).id)(e);\n}\n\nfunction getCurrentIsoDateTime(e) {\n  const n = {\n    epochNanoseconds: getCurrentEpochNanoseconds()\n  };\n  return pluckProps(Le, zn(n, e));\n}\n\nfunction getCurrentEpochNanoseconds() {\n  return numberToDayTimeNano(Date.now(), C);\n}\n\nfunction getCurrentTimeZoneId() {\n  return Vo || (Vo = (new He).resolvedOptions().timeZone);\n}\n\nconst expectedInteger = (e, n) => `Non-integer ${e}: ${n}`, expectedPositive = (e, n) => `Non-positive ${e}: ${n}`, expectedFinite = (e, n) => `Non-finite ${e}: ${n}`, forbiddenBigIntToNumber = e => `Cannot convert bigint to ${e}`, invalidBigInt = e => `Invalid bigint: ${e}`, e = \"Cannot convert Symbol to string\", n = \"Invalid object\", numberOutOfRange = (e, n, t, o) => `${e} ${n} must be between ${t}-${o}`, invalidEntity = (e, n) => `Invalid ${e}: ${n}`, missingField = e => `Missing ${e}`, forbiddenField = e => `Invalid field ${e}`, duplicateFields = e => `Duplicate field ${e}`, t = \"No valid fields\", o = \"Invalid calling context\", r = \"Forbidden era/eraYear\", i = \"Mismatching era/eraYear\", a = \"Mismatching year/eraYear\", invalidEra = e => `Invalid era: ${e}`, missingYear = e => \"Missing year\" + (e ? \"/era/eraYear\" : \"\"), invalidMonthCode = e => `Invalid monthCode: ${e}`, s = \"Mismatching month/monthCode\", c = \"Missing month/monthCode\", l = \"Cannot guess year\", u = \"Invalid leap month\", d = \"Invalid protocol results\", f = \"Mismatching Calendars\", m = \"Mismatching TimeZones\", p = \"Out-of-bounds offset\", h = \"Invalid offset for TimeZone\", T = \"Ambiguous offset\", D = \"Out-of-bounds date\", g = \"Cannot mix duration signs\", I = \"Missing relativeTo\", y = \"Cannot use large units\", S = \"smallestUnit > largestUnit\", failedParse = e => `Cannot parse: ${e}`, invalidSubstring = e => `Invalid substring: ${e}`, N = /object|function/, O = bindArgs(mapPropNames, ((e, n) => n)), P = bindArgs(mapPropNames, ((e, n, t) => t)), v = bindArgs(padNumber, 2), M = {\n  nanosecond: 0,\n  microsecond: 1,\n  millisecond: 2,\n  second: 3,\n  minute: 4,\n  hour: 5,\n  day: 6,\n  week: 7,\n  month: 8,\n  year: 9\n}, F = Object.keys(M), b = 864e5, w = 1e3, E = 1e3, C = 1e6, Z = 1e9, k = 6e10, Y = 36e11, B = 864e11, R = [ 1, E, C, Z, k, Y, B ], L = F.slice(0, 6), j = L.slice().sort(), q = [ \"offset\" ], z = [ \"timeZone\" ], A = [ ...L, ...q ], U = [ ...A, ...z ], x = [ \"era\", \"eraYear\" ], $ = [ ...x, \"year\" ], G = [ \"year\" ], W = [ \"monthCode\" ], V = [ \"month\", ...W ], H = [ \"day\" ], J = [ ...V, ...G ], _ = [ ...W, ...G ], K = [ ...H, ...J ], Q = [ ...H, ...V ], X = [ ...H, ...W ], ee = P(L, 0), ne = bindArgs(requireType, \"string\"), te = bindArgs(requireType, \"boolean\"), oe = bindArgs(requireType, \"number\"), re = bindArgs(requireType, \"function\"), ie = F.map((e => e + \"s\")), ae = ie.slice().sort(), se = ie.slice(0, 6), ce = ie.slice(6), le = O(ie), ue = P(ie, 0), de = P(se, 0), fe = \"smallestUnit\", me = \"unit\", pe = \"roundingIncrement\", he = \"fractionalSecondDigits\", Te = \"relativeTo\", De = {\n  constrain: 0,\n  reject: 1\n}, ge = Object.keys(De), Ie = bindArgs(refineUnitOption, fe), ye = bindArgs(refineUnitOption, \"largestUnit\"), Se = bindArgs(refineUnitOption, me), Ne = bindArgs(refineChoiceOption, \"overflow\", De), Oe = bindArgs(refineChoiceOption, \"disambiguation\", {\n  compatible: 0,\n  reject: 1,\n  earlier: 2,\n  later: 3\n}), Pe = bindArgs(refineChoiceOption, \"offset\", {\n  reject: 0,\n  use: 1,\n  prefer: 2,\n  ignore: 3\n}), ve = bindArgs(refineChoiceOption, \"calendarName\", {\n  auto: 0,\n  never: 1,\n  critical: 2,\n  always: 3\n}), Me = bindArgs(refineChoiceOption, \"timeZoneName\", {\n  auto: 0,\n  never: 1,\n  critical: 2\n}), Fe = bindArgs(refineChoiceOption, \"offset\", {\n  auto: 0,\n  never: 1\n}), be = bindArgs(refineChoiceOption, \"roundingMode\", {\n  floor: 0,\n  halfFloor: 1,\n  ceil: 2,\n  halfCeil: 3,\n  trunc: 4,\n  halfTrunc: 5,\n  expand: 6,\n  halfExpand: 7,\n  halfEven: 8\n}), we = \"iso8601\", Ee = \"gregory\", Ce = \"japanese\", Ze = {\n  [Ee]: {\n    bce: -1,\n    ce: 0\n  },\n  [Ce]: {\n    bce: -1,\n    ce: 0,\n    meiji: 1867,\n    taisho: 1911,\n    showa: 1925,\n    heisei: 1988,\n    reiwa: 2018\n  },\n  ethioaa: {\n    era0: 0\n  },\n  ethiopic: {\n    era0: 0,\n    era1: 5500\n  },\n  coptic: {\n    era0: -1,\n    era1: 0\n  },\n  roc: {\n    beforeroc: -1,\n    minguo: 0\n  },\n  buddhist: {\n    be: 0\n  },\n  islamic: {\n    ah: 0\n  },\n  indian: {\n    saka: 0\n  },\n  persian: {\n    ap: 0\n  }\n}, ke = {\n  bc: \"bce\",\n  ad: \"ce\"\n}, Ye = {\n  chinese: 13,\n  dangi: 13,\n  hebrew: -6\n}, Be = [ \"isoNanosecond\", \"isoMicrosecond\", \"isoMillisecond\", \"isoSecond\", \"isoMinute\", \"isoHour\" ], Re = [ \"isoDay\", \"isoMonth\", \"isoYear\" ], Le = [ ...Be, ...Re ], je = Re.slice().sort(), qe = Be.slice().sort(), ze = Le.slice().sort(), Ae = P(qe, 0), Ue = 1e8, xe = [ Ue, 0 ], $e = [ -Ue, 0 ], Ge = 275760, We = -271821, Ve = [ Math.floor, e => hasHalf(e) ? Math.floor(e) : Math.round(e), Math.ceil, e => hasHalf(e) ? Math.ceil(e) : Math.round(e), Math.trunc, e => hasHalf(e) ? Math.trunc(e) || 0 : Math.round(e), e => e < 0 ? Math.floor(e) : Math.ceil(e), e => Math.sign(e) * Math.round(Math.abs(e)) || 0, e => hasHalf(e) ? (e = Math.trunc(e) || 0) + e % 2 : Math.round(e) ], He = Intl.DateTimeFormat, Je = \"numeric\", _e = [ \"timeZoneName\" ], Ke = {\n  month: Je,\n  day: Je\n}, Qe = {\n  year: Je,\n  month: Je\n}, Xe = {\n  ...Qe,\n  day: Je\n}, en = {\n  hour: Je,\n  minute: Je,\n  second: Je\n}, nn = {\n  ...Xe,\n  ...en\n}, tn = {\n  ...nn,\n  timeZoneName: \"short\"\n}, on = Object.keys(Ke), rn = Object.keys(Qe), an = [ ...Object.keys(Xe), \"weekday\", \"dateStyle\" ], sn = [ ...Object.keys(en), \"dayPeriod\", \"timeStyle\" ], cn = [ ...an, ...sn ], ln = [ ...cn, ..._e ], un = [ ..._e, ...sn ], dn = [ ..._e, ...an ], fn = [ ..._e, \"day\", \"weekday\", \"dateStyle\", ...sn ], mn = createOptionsTransformer(on, Ke, [ ..._e, \"year\", \"weekday\", \"dateStyle\", ...sn ]), pn = createOptionsTransformer(rn, Qe, fn), hn = createOptionsTransformer(an, Xe, un), Tn = createOptionsTransformer(cn, nn, _e), Dn = createOptionsTransformer(sn, en, dn), gn = createOptionsTransformer(cn, nn), In = createOptionsTransformer(ln, tn), yn = [ pn, isoDateFieldsToEpochNano, 1 ], Sn = [ mn, isoDateFieldsToEpochNano, 1 ], Nn = [ hn, isoDateFieldsToEpochNano ], On = [ Tn, isoDateFieldsToEpochNano ], Pn = [ Dn, (e, n) => getSingleInstantFor(queryNativeTimeZone(n.timeZone), {\n  isoYear: An,\n  isoMonth: 1,\n  isoDay: 1,\n  ...e\n}) ], vn = [ gn, extractEpochNano ], Mn = [ (e, n, t) => {\n  if (void 0 !== (e = In(e)).timeZone) {\n    throw new TypeError(\"Forbidden timeZone\");\n  }\n  return e.timeZone = ((e, n) => {\n    const t = getId(e.timeZone);\n    if (n && getId(n.timeZone) !== t) {\n      throw new RangeError(m);\n    }\n    return t;\n  })(n, t), e;\n}, extractEpochNano ], Fn = {}, bn = \"en-GB\", wn = {\n  era: toStringViaPrimitive,\n  eraYear: toInteger,\n  year: toInteger,\n  month: toPositiveInteger,\n  monthCode: toStringViaPrimitive,\n  day: toPositiveInteger,\n  ...P(L, toInteger),\n  ...P(ie, toStrictInteger),\n  offset: toStringViaPrimitive\n}, En = bindArgs(((e, n, t) => {\n  const o = {};\n  for (let r = 0; r < e.length; r++) {\n    o[n[r]] = t[e[r]];\n  }\n  return o;\n}), L, Be), Cn = {\n  dateAdd(e, n, t) {\n    const o = refineOverflowOptions(t);\n    let r, {years: i, months: a, weeks: s, days: c} = n;\n    if (c += givenFieldsToDayTimeNano(n, 5, ie)[0], i || a) {\n      let [n, t, s] = this.F(e);\n      if (i) {\n        const [e, r] = this.C(n, t);\n        n += i, t = monthCodeNumberToMonth(e, r, this.o(n)), t = clampEntity(\"month\", t, 1, this.i(n), o);\n      }\n      a && ([n, t] = this.L(n, t, a)), s = clampEntity(\"day\", s, 1, this.l(n, t), o), \n      r = this.j(n, t, s);\n    } else {\n      if (!s && !c) {\n        return e;\n      }\n      r = isoToEpochMilli(e);\n    }\n    return r += (s * $n + c) * b, checkIsoDateInBounds(epochMilliToIso(r));\n  },\n  dateUntil(e, n, t) {\n    if (t <= 7) {\n      let o = 0, r = diffDays(e, n);\n      return 7 === t && ([o, r] = divModTrunc(r, $n)), {\n        ...ue,\n        weeks: o,\n        days: r\n      };\n    }\n    const o = this.F(e), r = this.F(n);\n    let [i, a, s] = ((e, n, t, o, r, i, a) => {\n      function updateYearMonth() {\n        let [o, a] = e.C(n, t), [u, d] = e.C(r, i);\n        s = r - n, c = e.i(r), l = s ? u - o || Number(d) - Number(a) : i - Math.min(t, c);\n      }\n      function updateYearMonthDay() {\n        updateYearMonth(), u = e.l(r, i), d = a - Math.min(o, u);\n      }\n      let s, c, l, u, d;\n      updateYearMonthDay();\n      const f = Math.sign(d), m = Math.sign(s) || Math.sign(l) || f;\n      if (m) {\n        if (f === -m) {\n          const n = u;\n          [r, i] = e.L(r, i, -m), updateYearMonthDay(), d += m < 0 ? -n : u;\n        }\n        if (Math.sign(l) === -m) {\n          const e = c;\n          r -= m, updateYearMonth(), l += m < 0 ? -e : c;\n        }\n      }\n      return [ s, l, d ];\n    })(this, ...o, ...r);\n    return 8 === t && (a += this.q(i, o[0]), i = 0), {\n      ...ue,\n      years: i,\n      months: a,\n      days: s\n    };\n  },\n  dateFromFields(e, n) {\n    const t = refineOverflowOptions(n), o = refineYear(this, e), r = refineMonth(this, e, o, t), i = refineDay(this, e, r, o, t);\n    return createPlainDateSlots(checkIsoDateInBounds(this.B(o, r, i)), this.id || we);\n  },\n  yearMonthFromFields(e, n) {\n    const t = refineOverflowOptions(n), o = refineYear(this, e), r = refineMonth(this, e, o, t);\n    return createPlainYearMonthSlots(checkIsoYearMonthInBounds(this.B(o, r, 1)), this.id || we);\n  },\n  monthDayFromFields(e, n) {\n    const t = refineOverflowOptions(n);\n    let o, r, i, a, c, u = !this.id, {monthCode: d, year: f, month: m} = e;\n    if (void 0 !== d) {\n      [o, r] = parseMonthCode(d), c = getDefinedProp(e, \"day\");\n      const n = this.k(o, r, c);\n      if (!n) {\n        throw new RangeError(l);\n      }\n      if ([i, a] = n, void 0 !== m && m !== a) {\n        throw new RangeError(s);\n      }\n      u && (a = clampEntity(\"month\", a, 1, xn, 1), c = clampEntity(\"day\", c, 1, computeIsoDaysInMonth(void 0 !== f ? f : i, a), t));\n    } else {\n      i = void 0 === f && u ? Un : refineYear(this, e), a = refineMonth(this, e, i, t), \n      c = refineDay(this, e, a, i, t);\n      const n = this.o(i);\n      r = a === n, o = monthToMonthCodeNumber(a, n);\n      const s = this.k(o, r, c);\n      if (!s) {\n        throw new RangeError(l);\n      }\n      [i, a] = s;\n    }\n    return createPlainMonthDaySlots(this.B(i, a, c), this.id || we);\n  },\n  fields(e) {\n    return getCalendarEraOrigins(this) && e.includes(\"year\") ? [ ...e, ...x ] : e;\n  },\n  mergeFields(e, n) {\n    const t = Object.assign(Object.create(null), e);\n    return spliceFields(t, n, V), getCalendarEraOrigins(this) && (spliceFields(t, n, $), \n    this.id === Ce && spliceFields(t, n, Q, x)), t;\n  },\n  inLeapYear(e) {\n    const [n] = this.F(e);\n    return this.U(n);\n  },\n  monthsInYear(e) {\n    const [n] = this.F(e);\n    return this.i(n);\n  },\n  daysInMonth(e) {\n    const [n, t] = this.F(e);\n    return this.l(n, t);\n  },\n  daysInYear(e) {\n    const [n] = this.F(e);\n    return this.$(n);\n  },\n  era(e) {\n    return this.G(e)[0];\n  },\n  eraYear(e) {\n    return this.G(e)[1];\n  },\n  monthCode(e) {\n    const [n, t] = this.F(e), [o, r] = this.C(n, t);\n    return ((e, n) => \"M\" + v(e) + (n ? \"L\" : \"\"))(o, r);\n  },\n  dayOfWeek: computeIsoDayOfWeek,\n  weekOfYear(e) {\n    return computeIsoWeekParts(e)[1];\n  },\n  yearOfWeek(e) {\n    return computeIsoWeekParts(e)[0];\n  },\n  daysInWeek() {\n    return $n;\n  }\n}, Zn = /^M(\\d{2})(L?)$/, kn = createLazyGenerator((e => {\n  function epochMilliToIntlFields(e) {\n    return ((e, n) => ({\n      ...parseIntlYear(e, n),\n      month: e.month,\n      day: parseInt(e.day)\n    }))(hashIntlFormatParts(n, e), t);\n  }\n  const n = buildIntlFormat$1(e), t = computeCalendarIdBase(e);\n  if (t !== computeCalendarIdBase(n.resolvedOptions().calendar)) {\n    throw new RangeError((e => `Invalid Calendar: ${e}`)(e));\n  }\n  return {\n    id: e,\n    p: createIntlFieldCache(epochMilliToIntlFields),\n    h: createIntlYearMonthCache(epochMilliToIntlFields)\n  };\n})), Yn = \"UTC\", Bn = 5184e3, Rn = isoArgsToEpochSec(1847), Ln = isoArgsToEpochSec((new Date).getUTCFullYear() + 10), jn = createLazyGenerator((e => e === Yn ? new FixedTimeZone(0, e) : new IntlTimeZone(e)));\n\nclass FixedTimeZone {\n  constructor(e, n = formatOffsetNano(e)) {\n    this.V = e, this.id = n;\n  }\n  getOffsetNanosecondsFor(e) {\n    return this.V;\n  }\n  getPossibleInstantsFor(e) {\n    return [ isoToEpochNanoWithOffset(e, this.V) ];\n  }\n  R(e, n) {}\n}\n\nclass IntlTimeZone {\n  constructor(e) {\n    const n = new He(bn, {\n      timeZone: e,\n      era: \"short\",\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\"\n    });\n    this.id = n.resolvedOptions().timeZone, this.store = (e => {\n      function getOffsetSec(e) {\n        const i = clampNumber(e, o, r), [a, s] = computePeriod(i), c = n(a), l = n(s);\n        return c === l ? c : pinch(t(a, s), c, l, e);\n      }\n      function pinch(n, t, o, r) {\n        let i, a;\n        for (;(void 0 === r || void 0 === (i = r < n[0] ? t : r >= n[1] ? o : void 0)) && (a = n[1] - n[0]); ) {\n          const t = n[0] + Math.floor(a / 2);\n          e(t) === o ? n[1] = t : n[0] = t + 1;\n        }\n        return i;\n      }\n      const n = createLazyGenerator(e), t = createLazyGenerator(createSplitTuple);\n      let o = Rn, r = Ln;\n      return {\n        J(e) {\n          const n = getOffsetSec(e - 86400), t = getOffsetSec(e + 86400), o = e - n, r = e - t;\n          if (n === t) {\n            return [ o ];\n          }\n          const i = getOffsetSec(o);\n          return i === getOffsetSec(r) ? [ e - i ] : n > t ? [ o, r ] : [];\n        },\n        _: getOffsetSec,\n        R(e, i) {\n          const a = clampNumber(e, o, r);\n          let [s, c] = computePeriod(a);\n          const l = Bn * i, u = i < 0 ? () => c > o || (o = a, 0) : () => s < r || (r = a, \n          0);\n          for (;u(); ) {\n            const o = n(s), r = n(c);\n            if (o !== r) {\n              const n = t(s, c);\n              pinch(n, o, r);\n              const a = n[0];\n              if ((compareNumbers(a, e) || 1) === i) {\n                return a;\n              }\n            }\n            s += l, c += l;\n          }\n        }\n      };\n    })((e => n => {\n      const t = hashIntlFormatParts(e, n * w);\n      return isoArgsToEpochSec(parseIntlYear(t, we).year, parseInt(t.month), parseInt(t.day), parseInt(t.hour), parseInt(t.minute), parseInt(t.second)) - n;\n    })(n));\n  }\n  getOffsetNanosecondsFor(e) {\n    return this.store._(epochNanoToSec(e)) * Z;\n  }\n  getPossibleInstantsFor(e) {\n    const [n, t] = [ isoArgsToEpochSec((o = e).isoYear, o.isoMonth, o.isoDay, o.isoHour, o.isoMinute, o.isoSecond), o.isoMillisecond * C + o.isoMicrosecond * E + o.isoNanosecond ];\n    var o;\n    return this.store.J(n).map((e => checkEpochNanoInBounds(addDayTimeNanoAndNumber(numberToDayTimeNano(e, Z), t))));\n  }\n  R(e, n) {\n    const [t, o] = (e => dayTimeNanoToNumberRemainder(e, Z))(e), r = this.store.R(t + (n > 0 || o ? 1 : 0), n);\n    if (void 0 !== r) {\n      return numberToDayTimeNano(r, Z);\n    }\n  }\n}\n\nconst qn = /0+$/, zn = createLazyGenerator(((e, n) => {\n  const {epochNanoseconds: t} = e, o = n.getOffsetNanosecondsFor(t);\n  return {\n    ...epochNanoToIso(t, o),\n    offsetNanoseconds: o\n  };\n}), WeakMap), An = 1970, Un = 1972, xn = 12, $n = 7, Gn = createLazyGenerator((e => {\n  const n = isoToEpochMilli(e);\n  if (n < Wn) {\n    return computeGregoryEraParts(e);\n  }\n  Vn || (Vn = buildIntlFormat$1(Ce));\n  const t = hashIntlFormatParts(Vn, n), {era: o, eraYear: r} = parseIntlYear(t, Ce);\n  return [ o, r ];\n}), WeakMap), Wn = isoArgsToEpochMilli(1868, 9, 8);\n\nlet Vn;\n\nconst Hn = createLazyGenerator(computeDurationSign, WeakMap), Jn = {\n  ...Cn,\n  F(e) {\n    return [ e.isoYear, e.isoMonth, e.isoDay ];\n  },\n  G(e) {\n    return this.id === Ee ? computeGregoryEraParts(e) : this.id === Ce ? Gn(e) : [ void 0, void 0 ];\n  },\n  C(e, n) {\n    return [ n, 0 ];\n  },\n  k(e, n) {\n    if (!n) {\n      return [ Un, e ];\n    }\n  },\n  U: computeIsoInLeapYear,\n  o() {},\n  i: computeIsoMonthsInYear,\n  q: e => e * xn,\n  l: computeIsoDaysInMonth,\n  $: computeIsoDaysInYear,\n  dayOfYear: computeIsoDayOfYear,\n  B(e, n, t) {\n    return {\n      isoYear: e,\n      isoMonth: n,\n      isoDay: t\n    };\n  },\n  j: isoArgsToEpochMilli,\n  L(e, n, t) {\n    return e += divTrunc(t, xn), (n += modTrunc(t, xn)) < 1 ? (e--, n += xn) : n > xn && (e++, \n    n -= xn), [ e, n ];\n  },\n  year(e) {\n    return e.isoYear;\n  },\n  month(e) {\n    return e.isoMonth;\n  },\n  day: e => e.isoDay\n}, _n = {\n  ...Cn,\n  F: computeIntlDateParts,\n  G(e) {\n    const n = this.p(e);\n    return [ n.era, n.eraYear ];\n  },\n  C(e, n) {\n    const t = computeIntlLeapMonth.call(this, e);\n    return [ monthToMonthCodeNumber(n, t), t === n ];\n  },\n  k(e, n, t) {\n    let [o, r, i] = computeIntlDateParts.call(this, {\n      isoYear: Un,\n      isoMonth: xn,\n      isoDay: 31\n    });\n    const a = computeIntlLeapMonth.call(this, o), s = r === a;\n    1 === (compareNumbers(e, monthToMonthCodeNumber(r, a)) || compareNumbers(Number(n), Number(s)) || compareNumbers(t, i)) && o--;\n    for (let r = 0; r < 100; r++) {\n      const i = o - r, a = computeIntlLeapMonth.call(this, i), s = monthCodeNumberToMonth(e, n, a);\n      if (n === (s === a) && t <= computeIntlDaysInMonth.call(this, i, s)) {\n        return [ i, s ];\n      }\n    }\n  },\n  U(e) {\n    const n = computeIntlDaysInYear.call(this, e);\n    return n > computeIntlDaysInYear.call(this, e - 1) && n > computeIntlDaysInYear.call(this, e + 1);\n  },\n  o: computeIntlLeapMonth,\n  i: computeIntlMonthsInYear,\n  q(e, n) {\n    const t = n + e, o = Math.sign(e), r = o < 0 ? -1 : 0;\n    let i = 0;\n    for (let e = n; e !== t; e += o) {\n      i += computeIntlMonthsInYear.call(this, e + r);\n    }\n    return i;\n  },\n  l: computeIntlDaysInMonth,\n  $: computeIntlDaysInYear,\n  dayOfYear(e) {\n    const n = isoToEpochMilli({\n      ...e,\n      ...Ae\n    }), {year: t} = this.p(e);\n    return diffEpochMilliByDay(computeIntlEpochMilli.call(this, t), n);\n  },\n  B(e, n, t) {\n    return checkIsoDateInBounds({\n      ...epochMilliToIso(computeIntlEpochMilli.call(this, e, n, t))\n    });\n  },\n  j: computeIntlEpochMilli,\n  L(e, n, t) {\n    if (t) {\n      if (n += t, t < 0) {\n        if (n < Number.MIN_SAFE_INTEGER) {\n          throw new RangeError(D);\n        }\n        for (;n < 1; ) {\n          n += computeIntlMonthsInYear.call(this, --e);\n        }\n      } else {\n        if (n > Number.MAX_SAFE_INTEGER) {\n          throw new RangeError(D);\n        }\n        let t;\n        for (;n > (t = computeIntlMonthsInYear.call(this, e)); ) {\n          n -= t, e++;\n        }\n      }\n    }\n    return [ e, n ];\n  },\n  year(e) {\n    return this.p(e).year;\n  },\n  month(e) {\n    const {year: n, month: t} = this.p(e), {m: o} = this.h(n);\n    return o[t] + 1;\n  },\n  day(e) {\n    return this.p(e).day;\n  }\n}, Kn = (Qn = Jn, Xn = _n, e => e === we ? Qn : e === Ee || e === Ce ? Object.assign(Object.create(Qn), {\n  id: e\n}) : Object.assign(Object.create(Xn), kn(e)));\n\nvar Qn, Xn;\n\nconst et = \"([+−-])\", nt = \"(?:[.,](\\\\d{1,9}))?\", tt = `(?:(?:${et}(\\\\d{6}))|(\\\\d{4}))-?(\\\\d{2})`, ot = \"(\\\\d{2})(?::?(\\\\d{2})(?::?(\\\\d{2})\" + nt + \")?)?\", rt = et + ot, it = tt + \"-?(\\\\d{2})(?:[T ]\" + ot + \"(Z|\" + rt + \")?)?\", at = \"\\\\[(!?)([^\\\\]]*)\\\\]\", st = `((?:${at})*)`, ct = createRegExp(tt + st), lt = createRegExp(\"(?:--)?(\\\\d{2})-?(\\\\d{2})\" + st), ut = createRegExp(it + st), dt = createRegExp(\"T?\" + ot + \"(?:\" + rt + \")?\" + st), ft = createRegExp(rt), mt = new RegExp(at, \"g\"), pt = createRegExp(`${et}?P(\\\\d+Y)?(\\\\d+M)?(\\\\d+W)?(\\\\d+D)?(?:T(?:(\\\\d+)${nt}H)?(?:(\\\\d+)${nt}M)?(?:(\\\\d+)${nt}S)?)?`), ht = \"PlainYearMonth\", Tt = \"PlainMonthDay\", Dt = \"PlainDate\", gt = \"PlainDateTime\", It = \"PlainTime\", yt = \"ZonedDateTime\", St = \"Instant\", Nt = \"Duration\", Ot = {\n  era(e) {\n    if (void 0 !== e && \"string\" != typeof e) {\n      throw new TypeError(\"Expected string or undefined\");\n    }\n    return e;\n  },\n  eraYear(e) {\n    if (\"number\" == typeof e) {\n      requireNumberIsInteger(e);\n    } else if (void 0 !== e) {\n      throw new TypeError(\"Expected integer or undefined\");\n    }\n    return e;\n  },\n  year: requireInteger,\n  month: requirePositiveInteger,\n  daysInMonth: requirePositiveInteger,\n  daysInYear: requirePositiveInteger,\n  inLeapYear: te,\n  monthsInYear: requirePositiveInteger\n}, Pt = {\n  monthCode: ne\n}, vt = {\n  day: requirePositiveInteger\n}, Mt = {\n  dayOfWeek: requirePositiveInteger,\n  dayOfYear: requirePositiveInteger,\n  weekOfYear: requirePositiveInteger,\n  yearOfWeek: requireInteger,\n  daysInWeek: requirePositiveInteger\n}, Ft = {\n  ...Ot,\n  ...Pt,\n  ...vt,\n  ...Mt\n}, bt = {\n  ...createCalendarFieldMethods(Ot, [ ht ]),\n  ...createCalendarFieldMethods(Mt, []),\n  ...createCalendarFieldMethods(Pt, [ ht, Tt ]),\n  ...createCalendarFieldMethods(vt, [ Tt ])\n}, wt = createCalendarGetters(Ft), Et = createCalendarGetters({\n  ...Ot,\n  ...Pt\n}), Ct = createCalendarGetters({\n  ...Pt,\n  ...vt\n}), Zt = {\n  calendarId: e => getId(e.calendar)\n}, kt = mapProps(((e, n) => function(t) {\n  const {v: o} = this;\n  return e(o[n](Ro(createPlainDateSlots(t, o))));\n}), Ft), Yt = mapPropNames((e => n => n[e]), ie), Bt = mapPropNames(((e, n) => e => e[Be[n]]), L), Rt = {\n  epochSeconds: e => epochNanoToSec(e.epochNanoseconds),\n  epochMilliseconds: e => epochNanoToMilli(e.epochNanoseconds),\n  epochMicroseconds: e => dayTimeNanoToBigInt(e.epochNanoseconds, E),\n  epochNanoseconds: e => dayTimeNanoToBigInt(e.epochNanoseconds)\n}, Lt = new WeakMap;\n\nclass DateTimeFormat extends He {\n  constructor(e, n = {}) {\n    super(e, n);\n    const t = this.resolvedOptions(), o = pluckProps(Object.keys(n), t);\n    Lt.set(this, ((e, n) => {\n      const t = n.locale, o = createLazyGenerator((n => {\n        const [o] = jt[n], r = o(e);\n        return new He(t, r);\n      }));\n      return (e, t) => {\n        const r = Uo(e), {O: i} = r || {};\n        let a;\n        if (void 0 !== t && (a = Uo(t), i !== (a || {}).O)) {\n          throw new TypeError(\"Mismatching types for formatting\");\n        }\n        if (i) {\n          const e = jt[i];\n          if (!e) {\n            throw new TypeError((e => `Cannot format ${e}`)(i));\n          }\n          return [ o(i), ...toEpochMillis(e, n, r, a) ];\n        }\n        return [];\n      };\n    })(o, t));\n  }\n  format(e) {\n    const n = Lt.get(this), [t, o] = n(e);\n    return t ? t.format(o) : super.format(e);\n  }\n  formatToParts(e) {\n    const n = Lt.get(this), [t, o] = n(e);\n    return t ? t.formatToParts(o) : super.formatToParts(e);\n  }\n}\n\n[ \"formatRange\", \"formatRangeToParts\" ].forEach((e => {\n  const n = He.prototype[e];\n  n && Object.defineProperties(DateTimeFormat.prototype, createPropDescriptors({\n    [e](e, t) {\n      const o = Lt.get(this), [r, i, a] = o(e, t);\n      return r ? n.call(r, i, a) : n.call(this, e, t);\n    }\n  }));\n}));\n\nconst jt = {\n  PlainYearMonth: yn,\n  PlainMonthDay: Sn,\n  PlainDate: Nn,\n  PlainDateTime: On,\n  PlainTime: Pn,\n  Instant: vn\n}, qt = createFormatPrepper(yn), zt = createFormatPrepper(Sn), At = createFormatPrepper(Nn), Ut = createFormatPrepper(On), xt = createFormatPrepper(Pn), $t = createFormatPrepper(vn), Gt = createFormatPrepper(Mn), [Wt, Vt, Ht] = createSlotClass(Tt, bindArgs(((e, n, t, o = we, r = Un) => {\n  const i = toInteger(n), a = toInteger(t), s = e(o);\n  return createPlainMonthDaySlots(checkIsoDateInBounds(checkIsoDateFields({\n    isoYear: toInteger(r),\n    isoMonth: i,\n    isoDay: a\n  })), s);\n}), refineCalendarSlot), {\n  ...Zt,\n  ...Ct\n}, {\n  with(e, n, t) {\n    return Vt(((e, n, t, o, r) => {\n      const i = copyOptions(r);\n      return ((e, n, t, o) => {\n        const r = mergeCalendarFields(e, n, t, K);\n        return e.monthDayFromFields(r, o);\n      })(e(n.calendar), t, o, i);\n    })(To, e, this, rejectInvalidBag(n), t));\n  },\n  equals(e, n) {\n    return !compareIsoDateFields(t = e, o = toPlainMonthDaySlots(n)) && isIdLikeEqual(t.calendar, o.calendar);\n    var t, o;\n  },\n  toString: formatPlainMonthDayIso,\n  toJSON: e => formatPlainMonthDayIso(e),\n  toLocaleString(e, n, t) {\n    const [o, r] = zt(n, t, e);\n    return o.format(r);\n  },\n  toPlainDate(e, n) {\n    return Ro(((e, n, t, o) => ((e, n, t) => convertToIso(e, n, X, requireObjectlike(t), G))(ho(n.calendar), t, o))(0, e, this, n));\n  },\n  getISOFields: removeBranding,\n  getCalendar: getCalendarFromSlots,\n  valueOf: neverValueOf\n}, {\n  from: (e, n) => Vt(toPlainMonthDaySlots(e, n))\n}), [Jt, _t, Kt] = createSlotClass(ht, bindArgs(((e, n, t, o = we, r = 1) => {\n  const i = toInteger(n), a = toInteger(t), s = e(o);\n  return createPlainYearMonthSlots(checkIsoYearMonthInBounds(checkIsoDateFields({\n    isoYear: i,\n    isoMonth: a,\n    isoDay: toInteger(r)\n  })), s);\n}), refineCalendarSlot), {\n  ...Zt,\n  ...Et\n}, {\n  with(e, n, t) {\n    return _t(((e, n, t, o, r) => {\n      const i = copyOptions(r);\n      return createPlainYearMonthSlots(((e, n, t, o) => {\n        const r = mergeCalendarFields(e, n, t, J);\n        return e.yearMonthFromFields(r, o);\n      })(e(n.calendar), t, o, i));\n    })(po, e, this, rejectInvalidBag(n), t));\n  },\n  add: (e, n, t) => _t(movePlainYearMonth(Io, e, toDurationSlots(n), t)),\n  subtract: (e, n, t) => _t(movePlainYearMonth(Io, e, toDurationSlots(n), t, 1)),\n  until: (e, n, t) => Co(diffPlainYearMonth(yo, e, toPlainYearMonthSlots(n), t)),\n  since: (e, n, t) => Co(diffPlainYearMonth(yo, e, toPlainYearMonthSlots(n), t, 1)),\n  equals(e, n) {\n    return !compareIsoDateFields(t = e, o = toPlainYearMonthSlots(n)) && isIdLikeEqual(t.calendar, o.calendar);\n    var t, o;\n  },\n  toString: formatPlainYearMonthIso,\n  toJSON: e => formatPlainYearMonthIso(e),\n  toLocaleString(e, n, t) {\n    const [o, r] = qt(n, t, e);\n    return o.format(r);\n  },\n  toPlainDate(e, n) {\n    return Ro(((e, n, t, o) => ((e, n, t) => convertToIso(e, n, _, requireObjectlike(t), H))(ho(n.calendar), t, o))(0, e, this, n));\n  },\n  getISOFields: removeBranding,\n  getCalendar: getCalendarFromSlots,\n  valueOf: neverValueOf\n}, {\n  from: (e, n) => _t(toPlainYearMonthSlots(e, n)),\n  compare: (e, n) => compareIsoDateFields(toPlainYearMonthSlots(e), toPlainYearMonthSlots(n))\n}), Qt = {\n  fields(e, n, t) {\n    return [ ...n.call(e, t) ];\n  }\n}, Xt = {\n  dateFromFields(e, n, t, o) {\n    return Lo(n.call(e, Object.assign(Object.create(null), t), o));\n  },\n  ...Qt\n}, eo = {\n  yearMonthFromFields(e, n, t, o) {\n    return Kt(n.call(e, Object.assign(Object.create(null), t), o));\n  },\n  ...Qt\n}, no = {\n  monthDayFromFields(e, n, t, o) {\n    return Ht(n.call(e, Object.assign(Object.create(null), t), o));\n  },\n  ...Qt\n}, to = {\n  mergeFields(e, n, t, o) {\n    return requireObjectlike(n.call(e, Object.assign(Object.create(null), t), Object.assign(Object.create(null), o)));\n  }\n}, oo = {\n  ...Xt,\n  ...to\n}, ro = {\n  ...eo,\n  ...to\n}, io = {\n  ...no,\n  ...to\n}, ao = {\n  dateAdd(e, n, t, o, r) {\n    return Lo(n.call(e, Ro(createPlainDateSlots(t, e)), Co(createDurationSlots(o)), r));\n  }\n}, so = {\n  ...ao,\n  dateUntil(e, n, t, o, r, i) {\n    return Zo(n.call(e, Ro(createPlainDateSlots(t, e)), Ro(createPlainDateSlots(o, e)), Object.assign(Object.create(null), i, {\n      largestUnit: F[r]\n    })));\n  }\n}, co = {\n  ...ao,\n  day: dayAdapter\n}, lo = {\n  ...so,\n  day: dayAdapter\n}, uo = createCompoundOpsCreator(eo), fo = createCompoundOpsCreator(Xt), mo = createCompoundOpsCreator(no), po = createCompoundOpsCreator(ro), ho = createCompoundOpsCreator(oo), To = createCompoundOpsCreator(io), Do = createCompoundOpsCreator(ao), go = createCompoundOpsCreator(so), Io = createCompoundOpsCreator(co), yo = createCompoundOpsCreator(lo), [So, No] = createSlotClass(\"TimeZone\", (e => {\n  const n = queryNativeTimeZone(ne(e));\n  return {\n    O: \"TimeZone\",\n    id: n.id,\n    P: n\n  };\n}), {\n  id: e => e.id\n}, {\n  toString: e => e.id,\n  toJSON: e => e.id,\n  getPossibleInstantsFor: ({P: e}, n) => e.getPossibleInstantsFor(toPlainDateTimeSlots(n)).map((e => Mo(createInstantSlots(e)))),\n  getOffsetNanosecondsFor: ({P: e}, n) => e.getOffsetNanosecondsFor(toInstantSlots(n).epochNanoseconds),\n  getOffsetStringFor(e, n) {\n    const t = toInstantSlots(n).epochNanoseconds;\n    return formatOffsetNano(createAdapterOps(this, wo).getOffsetNanosecondsFor(t));\n  },\n  getPlainDateTimeFor(e, n, t = we) {\n    const o = toInstantSlots(n).epochNanoseconds, r = createAdapterOps(this, wo).getOffsetNanosecondsFor(o);\n    return Yo(createPlainDateTimeSlots(epochNanoToIso(o, r), refineCalendarSlot(t)));\n  },\n  getInstantFor(e, n, t) {\n    const o = toPlainDateTimeSlots(n), r = refineEpochDisambigOptions(t), i = createAdapterOps(this);\n    return Mo(createInstantSlots(getSingleInstantFor(i, o, r)));\n  },\n  getNextTransition: ({P: e}, n) => getImplTransition(1, e, n),\n  getPreviousTransition: ({P: e}, n) => getImplTransition(-1, e, n),\n  equals(e, n) {\n    return isTimeZoneSlotsEqual(this, refineTimeZoneSlot(n));\n  }\n}, {\n  from(e) {\n    const n = refineTimeZoneSlot(e);\n    return \"string\" == typeof n ? new So(n) : n;\n  }\n}), [Oo, Po] = createSlotClass(yt, bindArgs(((e, n, t, o, r = we) => createZonedDateTimeSlots(checkEpochNanoInBounds(bigIntToDayTimeNano(toBigInt(t))), n(o), e(r))), refineCalendarSlot, refineTimeZoneSlot), {\n  ...Rt,\n  ...Zt,\n  ...adaptToIsoFields(wt),\n  ...adaptToIsoFields(Bt),\n  hoursInDay: e => ((e, n) => {\n    const t = createTimeZoneOps(n.timeZone);\n    return computeNanosecondsInDay(t, zn(n, t)) / Y;\n  })(0, e),\n  offsetNanoseconds: e => slotsToIsoFields(e).offsetNanoseconds,\n  offset: e => formatOffsetNano(slotsToIsoFields(e).offsetNanoseconds),\n  timeZoneId: e => getId(e.timeZone)\n}, {\n  with(e, n, t) {\n    return Po(((e, n, t, o, r, i) => {\n      const a = copyOptions(i), {calendar: s, timeZone: c} = t;\n      return createZonedDateTimeSlots(((e, n, t, o, r) => {\n        const i = mergeCalendarFields(e, t, o, K, A, q), [a, s, c] = refineZonedFieldOptions(r, 2);\n        return getMatchingInstantFor(n, {\n          ...e.dateFromFields(i, overrideOverflowOptions(r, a)),\n          ...refineTimeBag(i, a)\n        }, parseOffsetNano(i.offset), s, c);\n      })(e(s), n(c), o, r, a), c, s);\n    })(ho, createTimeZoneOps, e, this, rejectInvalidBag(n), t));\n  },\n  withPlainTime: (e, n) => Po(((e, n, t = Ae) => {\n    const o = n.timeZone, r = e(o), i = {\n      ...zn(n, r),\n      ...t\n    };\n    return createZonedDateTimeSlots(getMatchingInstantFor(r, i, i.offsetNanoseconds, 2), o, n.calendar);\n  })(createTimeZoneOps, e, optionalToPlainTimeFields(n))),\n  withPlainDate: (e, n) => Po(((e, n, t) => {\n    const o = n.timeZone, r = e(o), i = {\n      ...zn(n, r),\n      ...t\n    }, a = getPreferredCalendarSlot(n.calendar, t.calendar);\n    return createZonedDateTimeSlots(getMatchingInstantFor(r, i, i.offsetNanoseconds, 2), o, a);\n  })(createTimeZoneOps, e, toPlainDateSlots(n))),\n  withTimeZone: (e, n) => Po(((e, n) => ({\n    ...e,\n    timeZone: n\n  }))(e, refineTimeZoneSlot(n))),\n  withCalendar: (e, n) => Po(slotsWithCalendar(e, refineCalendarSlot(n))),\n  add: (e, n, t) => Po(moveZonedDateTime(Do, createTimeZoneOps, e, toDurationSlots(n), t)),\n  subtract: (e, n, t) => Po(moveZonedDateTime(Do, createTimeZoneOps, e, toDurationSlots(n), t, 1)),\n  until: (e, n, t) => Co(createDurationSlots(diffZonedDateTimes(go, createTimeZoneOps, e, toZonedDateTimeSlots(n), t))),\n  since: (e, n, t) => Co(createDurationSlots(diffZonedDateTimes(go, createTimeZoneOps, e, toZonedDateTimeSlots(n), t, 1))),\n  round: (e, n) => Po(((e, n, t) => {\n    let {epochNanoseconds: o, timeZone: r, calendar: i} = n;\n    const [a, s, c] = refineRoundOptions(t);\n    if (0 === a && 1 === s) {\n      return n;\n    }\n    const l = e(r), u = l.getOffsetNanosecondsFor(o);\n    let d = {\n      ...epochNanoToIso(o, u),\n      calendar: i\n    };\n    return d = {\n      calendar: i,\n      ...roundDateTime(d, a, s, c, l)\n    }, o = getMatchingInstantFor(l, d, u, 2, 0, 1), createZonedDateTimeSlots(o, r, i);\n  })(createTimeZoneOps, e, n)),\n  startOfDay: e => Po(((e, n) => {\n    let {epochNanoseconds: t, timeZone: o, calendar: r} = n;\n    const i = e(o);\n    return t = getMatchingInstantFor(i, {\n      ...zn(n, i),\n      ...Ae\n    }, void 0, 0, 0, 1), createZonedDateTimeSlots(t, o, r);\n  })(createTimeZoneOps, e)),\n  equals(e, n) {\n    return !compareZonedDateTimes(t = e, o = toZonedDateTimeSlots(n)) && isTimeZoneSlotsEqual(t.timeZone, o.timeZone) && isIdLikeEqual(t.calendar, o.calendar);\n    var t, o;\n  },\n  toString: (e, n) => formatZonedDateTimeIso(createSimpleTimeZoneOps, e, n),\n  toJSON: e => formatZonedDateTimeIso(createSimpleTimeZoneOps, e),\n  toLocaleString(e, n, t = {}) {\n    const [o, r] = Gt(n, t, e);\n    return o.format(r);\n  },\n  toInstant: e => Mo(createInstantSlots(e.epochNanoseconds)),\n  toPlainDate: e => Ro(zonedDateTimeToPlainDate(createSimpleTimeZoneOps, e)),\n  toPlainTime: e => qo(zonedDateTimeToPlainTime(createSimpleTimeZoneOps, e)),\n  toPlainDateTime: e => Yo(zonedDateTimeToPlainDateTime(createSimpleTimeZoneOps, e)),\n  toPlainYearMonth(e) {\n    return _t(convertToPlainYearMonth(uo(e.calendar), this));\n  },\n  toPlainMonthDay(e) {\n    return Vt(convertToPlainMonthDay(mo(e.calendar), this));\n  },\n  getISOFields: e => ((e, n) => {\n    const t = zn(n, createSimpleTimeZoneOps(n.timeZone));\n    return {\n      calendar: n.calendar,\n      ...pluckProps(ze, t),\n      offset: formatOffsetNano(t.offsetNanoseconds),\n      timeZone: n.timeZone\n    };\n  })(0, e),\n  getCalendar: getCalendarFromSlots,\n  getTimeZone: ({timeZone: e}) => \"string\" == typeof e ? new So(e) : e,\n  valueOf: neverValueOf\n}, {\n  from: (e, n) => Po(toZonedDateTimeSlots(e, n)),\n  compare: (e, n) => compareZonedDateTimes(toZonedDateTimeSlots(e), toZonedDateTimeSlots(n))\n}), [vo, Mo, Fo] = createSlotClass(St, (e => createInstantSlots(checkEpochNanoInBounds(bigIntToDayTimeNano(toBigInt(e))))), Rt, {\n  add: (e, n) => Mo(moveInstant(e, toDurationSlots(n))),\n  subtract: (e, n) => Mo(moveInstant(e, toDurationSlots(n), 1)),\n  until: (e, n, t) => Co(diffInstants(e, toInstantSlots(n), t)),\n  since: (e, n, t) => Co(diffInstants(e, toInstantSlots(n), t, 1)),\n  round: (e, n) => Mo(((e, n) => {\n    const [t, o, r] = refineRoundOptions(n, 5, 1);\n    return createInstantSlots(roundDayTimeNano(e.epochNanoseconds, t, o, r, 1));\n  })(e, n)),\n  equals(e, n) {\n    return !compareInstants(e, toInstantSlots(n));\n  },\n  toString: (e, n) => formatInstantIso(refineTimeZoneSlot, createSimpleTimeZoneOps, e, n),\n  toJSON: e => formatInstantIso(refineTimeZoneSlot, createSimpleTimeZoneOps, e),\n  toLocaleString(e, n, t) {\n    const [o, r] = $t(n, t, e);\n    return o.format(r);\n  },\n  toZonedDateTimeISO: (e, n) => Po(instantToZonedDateTime(e, refineTimeZoneSlot(n))),\n  toZonedDateTime(e, n) {\n    const t = requireObjectlike(n);\n    return Po(instantToZonedDateTime(e, refineTimeZoneSlot(t.timeZone), refineCalendarSlot(t.calendar)));\n  },\n  valueOf: neverValueOf\n}, {\n  from: e => Mo(toInstantSlots(e)),\n  fromEpochSeconds: e => Mo((e => createInstantSlots(checkEpochNanoInBounds(numberToDayTimeNano(e, Z))))(e)),\n  fromEpochMilliseconds: e => Mo((e => createInstantSlots(checkEpochNanoInBounds(numberToDayTimeNano(e, C))))(e)),\n  fromEpochMicroseconds: e => Mo((e => createInstantSlots(checkEpochNanoInBounds(bigIntToDayTimeNano(toBigInt(e), E))))(e)),\n  fromEpochNanoseconds: e => Mo((e => createInstantSlots(checkEpochNanoInBounds(bigIntToDayTimeNano(toBigInt(e)))))(e)),\n  compare: (e, n) => compareInstants(toInstantSlots(e), toInstantSlots(n))\n}), bo = {\n  getOffsetNanosecondsFor: adapterGetOffsetNanosecondsFor,\n  getPossibleInstantsFor(e, n, t) {\n    return [ ...n.call(e, Yo(createPlainDateTimeSlots(t, we))) ].map((e => Fo(e).epochNanoseconds));\n  }\n}, wo = {\n  getOffsetNanosecondsFor: adapterGetOffsetNanosecondsFor\n}, [Eo, Co, Zo] = createSlotClass(Nt, ((e = 0, n = 0, t = 0, o = 0, r = 0, i = 0, a = 0, s = 0, c = 0, l = 0) => createDurationSlots(checkDurationFields(mapProps(toStrictInteger, zipProps(ie, [ e, n, t, o, r, i, a, s, c, l ]))))), {\n  ...Yt,\n  blank: e => !Hn(e),\n  sign: e => Hn(e)\n}, {\n  with: (e, n) => Co(((e, n) => {\n    return createDurationSlots((t = e, o = n, checkDurationFields({\n      ...t,\n      ...refineFields(o, ae)\n    })));\n    var t, o;\n  })(e, n)),\n  add: (e, n, t) => Co(addDurations(refinePublicRelativeTo, go, createTimeZoneOps, e, toDurationSlots(n), t)),\n  subtract: (e, n, t) => Co(addDurations(refinePublicRelativeTo, go, createTimeZoneOps, e, toDurationSlots(n), t, 1)),\n  negated: e => Co(negateDuration(e)),\n  abs: e => Co((e => {\n    return createDurationSlots(-1 === Hn(n = e) ? negateDurationFields(n) : n);\n    var n;\n  })(e)),\n  round: (e, n) => Co(((e, n, t, o, r) => {\n    const i = getLargestDurationUnit(o), [a, s, c, l, u] = ((e, n, t) => {\n      e = normalizeUnitNameOptions(e, fe);\n      let o = ye(e);\n      const r = t(e[Te]);\n      let i = parseRoundingIncInteger(e);\n      const a = be(e, 7);\n      let s = Ie(e);\n      if (void 0 === o && void 0 === s) {\n        throw new RangeError(\"Required smallestUnit or largestUnit\");\n      }\n      return null == s && (s = 0), null == o && (o = Math.max(s, n)), checkLargestSmallestUnit(o, s), \n      i = refineRoundingInc(i, s, 1), [ o, s, i, a, r ];\n    })(r, i, e), f = Math.max(i, a);\n    if (f < 6 || 6 === f && (!u || !u.epochNanoseconds)) {\n      return createDurationSlots(((e, n, t, o, r) => ({\n        ...ue,\n        ...balanceDayTimeDuration(e, n, t, o, r)\n      }))(o, a, s, c, l));\n    }\n    if (!u) {\n      throw new RangeError(I);\n    }\n    const m = createMarkerSystem(n, t, u);\n    let p = 0;\n    o.weeks && 7 === s && (p = o.weeks, o = {\n      ...o,\n      weeks: 0\n    });\n    let [h, T] = spanDuration(o, void 0, a, ...m);\n    const D = Hn(o), g = Hn(h);\n    if (D && g && D !== g) {\n      throw new RangeError(d);\n    }\n    return !g || 0 === s && 1 === c || (h = roundRelativeDuration(h, T, a, s, c, l, ...m)), \n    h.weeks += p, createDurationSlots(h);\n  })(refinePublicRelativeTo, go, createTimeZoneOps, e, n)),\n  total: (e, n) => ((e, n, t, o, r) => {\n    const i = getLargestDurationUnit(o), [a, s] = ((e, n) => {\n      const t = n((e = normalizeUnitNameOptions(e, me))[Te]);\n      let o = Se(e);\n      return o = requirePropDefined(me, o), [ o, t ];\n    })(r, e), c = Math.max(a, i);\n    if (c < 6 || 6 === c && (!s || !s.epochNanoseconds)) {\n      return ((e, n) => totalDayTimeNano(durationFieldsToDayTimeNano(e, 6), n))(o, a);\n    }\n    if (!s) {\n      throw new RangeError(I);\n    }\n    const l = createMarkerSystem(n, t, s);\n    return ((e, n, t, o, r, i) => {\n      const a = Hn(e), [s, c] = clampRelativeDuration(clearDurationFields(e, t - 1), t, a, o, r, i), l = computeEpochNanoFrac(s, c, n);\n      return e[ie[t]] + l * a;\n    })(...spanDuration(o, void 0, a, ...l), a, ...l);\n  })(refinePublicRelativeTo, go, createTimeZoneOps, e, n),\n  toString: formatDurationIso,\n  toLocaleString(e, n, t) {\n    return new Intl.DurationFormat(n, t).format(this);\n  },\n  toJSON: e => formatDurationIso(e),\n  valueOf: neverValueOf\n}, {\n  from: e => Co(toDurationSlots(e)),\n  compare: (e, n, t) => ((e, n, t, o, r, i) => {\n    const a = e(normalizeOptions(i).relativeTo), s = Math.max(getLargestDurationUnit(o), getLargestDurationUnit(r));\n    if (allFieldsEqual(ie, o, r)) {\n      return 0;\n    }\n    if (s < 6 || 6 === s && (!a || !a.epochNanoseconds)) {\n      return compareDayTimeNanos(givenFieldsToDayTimeNano(o, 6, ie), givenFieldsToDayTimeNano(r, 6, ie));\n    }\n    if (!a) {\n      throw new RangeError(I);\n    }\n    const [c, l, u] = createMarkerSystem(n, t, a);\n    return compareDayTimeNanos(l(u(c, o)), l(u(c, r)));\n  })(refinePublicRelativeTo, go, createTimeZoneOps, toDurationSlots(e), toDurationSlots(n), t)\n}), [ko, Yo] = createSlotClass(gt, bindArgs(((e, n, t, o, r = 0, i = 0, a = 0, s = 0, c = 0, l = 0, u = we) => createPlainDateTimeSlots(checkIsoDateTimeInBounds(checkIsoDateTimeFields(mapProps(toInteger, zipProps(Le, [ n, t, o, r, i, a, s, c, l ])))), e(u))), refineCalendarSlot), {\n  ...Zt,\n  ...wt,\n  ...Bt\n}, {\n  with(e, n, t) {\n    return Yo(((e, n, t, o, r) => {\n      const i = copyOptions(r);\n      return createPlainDateTimeSlots(((e, n, t, o) => {\n        const r = mergeCalendarFields(e, n, t, K, L), i = refineOverflowOptions(o);\n        return checkIsoDateTimeInBounds({\n          ...e.dateFromFields(r, overrideOverflowOptions(o, i)),\n          ...refineTimeBag(r, i)\n        });\n      })(e(n.calendar), t, o, i));\n    })(ho, e, this, rejectInvalidBag(n), t));\n  },\n  withPlainTime: (e, n) => Yo(((e, n = Ae) => createPlainDateTimeSlots({\n    ...e,\n    ...n\n  }))(e, optionalToPlainTimeFields(n))),\n  withPlainDate(e, n) {\n    return Yo((t = e, o = toPlainDateSlots(n), createPlainDateTimeSlots({\n      ...t,\n      ...o\n    }, getPreferredCalendarSlot(t.calendar, o.calendar))));\n    var t, o;\n  },\n  withCalendar: (e, n) => Yo(slotsWithCalendar(e, refineCalendarSlot(n))),\n  add: (e, n, t) => Yo(movePlainDateTime(Do, e, toDurationSlots(n), t)),\n  subtract: (e, n, t) => Yo(movePlainDateTime(Do, e, toDurationSlots(n), t, 1)),\n  until: (e, n, t) => Co(diffPlainDateTimes(go, e, toPlainDateTimeSlots(n), t)),\n  since: (e, n, t) => Co(diffPlainDateTimes(go, e, toPlainDateTimeSlots(n), t, 1)),\n  round: (e, n) => Yo(((e, n) => createPlainDateTimeSlots(roundDateTime(e, ...refineRoundOptions(n)), e.calendar))(e, n)),\n  equals(e, n) {\n    return !compareIsoDateTimeFields(t = e, o = toPlainDateTimeSlots(n)) && isIdLikeEqual(t.calendar, o.calendar);\n    var t, o;\n  },\n  toString: (e, n) => formatPlainDateTimeIso(e, n),\n  toJSON: e => formatPlainDateTimeIso(e),\n  toLocaleString(e, n, t) {\n    const [o, r] = Ut(n, t, e);\n    return o.format(r);\n  },\n  toZonedDateTime: (e, n, t) => Po(((e, n, t, o) => createZonedDateTimeSlots(((e, n, t, o) => {\n    const r = refineEpochDisambigOptions(o);\n    return checkEpochNanoInBounds(getSingleInstantFor(e(n), t, r));\n  })(e, t, n, o), t, n.calendar))(createTimeZoneOps, e, refineTimeZoneSlot(n), t)),\n  toPlainDate: e => Ro(createPlainDateSlots(e)),\n  toPlainYearMonth(e) {\n    return _t(((e, n, t) => {\n      const o = uo(n.calendar);\n      return createPlainYearMonthSlots({\n        ...n,\n        ...convertToPlainYearMonth(o, t)\n      });\n    })(0, e, this));\n  },\n  toPlainMonthDay(e) {\n    return Vt(convertToPlainMonthDay(mo(e.calendar), this));\n  },\n  toPlainTime: e => qo(createPlainTimeSlots(e)),\n  getISOFields: removeBranding,\n  getCalendar: getCalendarFromSlots,\n  valueOf: neverValueOf\n}, {\n  from: (e, n) => Yo(toPlainDateTimeSlots(e, n)),\n  compare: (e, n) => compareIsoDateTimeFields(toPlainDateTimeSlots(e), toPlainDateTimeSlots(n))\n}), [Bo, Ro, Lo] = createSlotClass(Dt, bindArgs(((e, n, t, o, r = we) => createPlainDateSlots(checkIsoDateInBounds(checkIsoDateFields(mapProps(toInteger, {\n  isoYear: n,\n  isoMonth: t,\n  isoDay: o\n}))), e(r))), refineCalendarSlot), {\n  ...Zt,\n  ...wt\n}, {\n  with(e, n, t) {\n    return Ro(((e, n, t, o, r) => {\n      const i = copyOptions(r);\n      return ((e, n, t, o) => {\n        const r = mergeCalendarFields(e, n, t, K);\n        return e.dateFromFields(r, o);\n      })(e(n.calendar), t, o, i);\n    })(ho, e, this, rejectInvalidBag(n), t));\n  },\n  withCalendar: (e, n) => Ro(slotsWithCalendar(e, refineCalendarSlot(n))),\n  add: (e, n, t) => Ro(movePlainDate(Do, e, toDurationSlots(n), t)),\n  subtract: (e, n, t) => Ro(movePlainDate(Do, e, toDurationSlots(n), t, 1)),\n  until: (e, n, t) => Co(diffPlainDates(go, e, toPlainDateSlots(n), t)),\n  since: (e, n, t) => Co(diffPlainDates(go, e, toPlainDateSlots(n), t, 1)),\n  equals(e, n) {\n    return !compareIsoDateFields(t = e, o = toPlainDateSlots(n)) && isIdLikeEqual(t.calendar, o.calendar);\n    var t, o;\n  },\n  toString: formatPlainDateIso,\n  toJSON: e => formatPlainDateIso(e),\n  toLocaleString(e, n, t) {\n    const [o, r] = At(n, t, e);\n    return o.format(r);\n  },\n  toZonedDateTime(e, n) {\n    const t = !isObjectLike(n) || n instanceof So ? {\n      timeZone: n\n    } : n;\n    return Po(((e, n, t, o, r) => {\n      const i = refineTimeZoneSlot(r.timeZone), a = r.plainTime, s = void 0 !== a ? n(a) : Ae;\n      return createZonedDateTimeSlots(getSingleInstantFor(t(i), {\n        ...o,\n        ...s\n      }), i, o.calendar);\n    })(0, toPlainTimeSlots, createTimeZoneOps, e, t));\n  },\n  toPlainDateTime: (e, n) => Yo(((e, n = Ae) => createPlainDateTimeSlots(checkIsoDateTimeInBounds({\n    ...e,\n    ...n\n  })))(e, optionalToPlainTimeFields(n))),\n  toPlainYearMonth(e) {\n    return _t(convertToPlainYearMonth(uo(e.calendar), this));\n  },\n  toPlainMonthDay(e) {\n    return Vt(convertToPlainMonthDay(mo(e.calendar), this));\n  },\n  getISOFields: removeBranding,\n  getCalendar: getCalendarFromSlots,\n  valueOf: neverValueOf\n}, {\n  from: (e, n) => Ro(toPlainDateSlots(e, n)),\n  compare: (e, n) => compareIsoDateFields(toPlainDateSlots(e), toPlainDateSlots(n))\n}), [jo, qo] = createSlotClass(It, ((e = 0, n = 0, t = 0, o = 0, r = 0, i = 0) => createPlainTimeSlots(constrainIsoTimeFields(mapProps(toInteger, zipProps(Be, [ e, n, t, o, r, i ])), 1))), Bt, {\n  with(e, n, t) {\n    return qo(((e, n, t) => createPlainTimeSlots(((e, n, t) => {\n      const o = refineOverflowOptions(t);\n      return refineTimeBag({\n        ...pluckProps(j, e),\n        ...refineFields(n, j)\n      }, o);\n    })(e, n, t)))(this, rejectInvalidBag(n), t));\n  },\n  add: (e, n) => qo(movePlainTime(e, toDurationSlots(n))),\n  subtract: (e, n) => qo(movePlainTime(e, toDurationSlots(n), 1)),\n  until: (e, n, t) => Co(diffPlainTimes(e, toPlainTimeSlots(n), t)),\n  since: (e, n, t) => Co(diffPlainTimes(e, toPlainTimeSlots(n), t, 1)),\n  round: (e, n) => qo(((e, n) => createPlainTimeSlots(((e, n, t, o) => roundTimeToNano(e, computeNanoInc(n, t), o)[0])(e, ...refineRoundOptions(n, 5))))(e, n)),\n  equals(e, n) {\n    return !compareIsoTimeFields(e, toPlainTimeSlots(n));\n  },\n  toString: formatPlainTimeIso,\n  toJSON: e => formatPlainTimeIso(e),\n  toLocaleString(e, n, t) {\n    const [o, r] = xt(n, t, e);\n    return o.format(r);\n  },\n  toZonedDateTime: (e, n) => Po(((e, n, t, o, r) => {\n    const i = toPlainDateSlots(r.plainDate), a = e(r.timeZone);\n    return createZonedDateTimeSlots(getSingleInstantFor(t(a), {\n      ...i,\n      ...o\n    }), a, i.calendar);\n  })(refineTimeZoneSlot, 0, createTimeZoneOps, e, n)),\n  toPlainDateTime(e, n) {\n    return Yo((t = e, o = toPlainDateSlots(n), createPlainDateTimeSlots(checkIsoDateTimeInBounds({\n      ...t,\n      ...o\n    }))));\n    var t, o;\n  },\n  getISOFields: removeBranding,\n  valueOf: neverValueOf\n}, {\n  from: (e, n) => qo(toPlainTimeSlots(e, n)),\n  compare: (e, n) => compareIsoTimeFields(toPlainTimeSlots(e), toPlainTimeSlots(n))\n}), zo = createProtocolChecker(Object.keys(bo)), Ao = new WeakMap, Uo = Ao.get.bind(Ao), xo = Ao.set.bind(Ao), $o = {\n  toString: e => e.id,\n  toJSON: e => e.id,\n  ...bt,\n  dateAdd: ({id: e, P: n}, t, o, r) => Ro(createPlainDateSlots(n.dateAdd(toPlainDateSlots(t), toDurationSlots(o), r), e)),\n  dateUntil: ({P: e}, n, t, o) => Co(createDurationSlots(e.dateUntil(toPlainDateSlots(n), toPlainDateSlots(t), (e => (e = normalizeOptions(e), \n  ye(e, 9, 6, 1)))(o)))),\n  dateFromFields: ({id: e, P: n}, t, o) => Ro(refinePlainDateBag(n, t, o, e === we ? [ \"year\", \"day\" ] : [])),\n  yearMonthFromFields: ({id: e, P: n}, t, o) => _t(refinePlainYearMonthBag(n, t, o, e === we ? G : [])),\n  monthDayFromFields: ({id: e, P: n}, t, o) => Vt(refinePlainMonthDayBag(n, 0, t, o, e === we ? H : [])),\n  fields({P: e}, n) {\n    const t = new Set(K), o = [];\n    for (const e of n) {\n      if (ne(e), !t.has(e)) {\n        throw new RangeError(forbiddenField(e));\n      }\n      t.delete(e), o.push(e);\n    }\n    return e.fields(o);\n  },\n  mergeFields: ({P: e}, n, t) => e.mergeFields(excludeUndefinedProps(requireNonNullish(n)), excludeUndefinedProps(requireNonNullish(t)))\n}, [Go] = createSlotClass(\"Calendar\", (e => ({\n  O: \"Calendar\",\n  id: e = normalizeCalendarId(ne(e)),\n  P: Kn(e)\n})), {\n  id: e => e.id\n}, $o, {\n  from(e) {\n    const n = refineCalendarSlot(e);\n    return \"string\" == typeof n ? new Go(n) : n;\n  }\n}), Wo = createProtocolChecker(Object.keys($o).slice(4));\n\nlet Vo;\n\nconst Ho = Object.defineProperties({}, {\n  ...createStringTagDescriptors(\"Temporal.Now\"),\n  ...createPropDescriptors({\n    timeZoneId: () => getCurrentTimeZoneId(),\n    instant: () => Mo(createInstantSlots(getCurrentEpochNanoseconds())),\n    zonedDateTime: (e, n = getCurrentTimeZoneId()) => Po(createZonedDateTimeSlots(getCurrentEpochNanoseconds(), refineTimeZoneSlot(n), refineCalendarSlot(e))),\n    zonedDateTimeISO: (e = getCurrentTimeZoneId()) => Po(createZonedDateTimeSlots(getCurrentEpochNanoseconds(), refineTimeZoneSlot(e), we)),\n    plainDateTime: (e, n = getCurrentTimeZoneId()) => Yo(createPlainDateTimeSlots(getCurrentIsoDateTime(createSimpleTimeZoneOps(refineTimeZoneSlot(n))), refineCalendarSlot(e))),\n    plainDateTimeISO: (e = getCurrentTimeZoneId()) => Yo(createPlainDateTimeSlots(getCurrentIsoDateTime(createSimpleTimeZoneOps(refineTimeZoneSlot(e))), we)),\n    plainDate: (e, n = getCurrentTimeZoneId()) => Ro(createPlainDateSlots(getCurrentIsoDateTime(createSimpleTimeZoneOps(refineTimeZoneSlot(n))), refineCalendarSlot(e))),\n    plainDateISO: (e = getCurrentTimeZoneId()) => Ro(createPlainDateSlots(getCurrentIsoDateTime(createSimpleTimeZoneOps(refineTimeZoneSlot(e))), we)),\n    plainTimeISO: (e = getCurrentTimeZoneId()) => qo(createPlainTimeSlots(getCurrentIsoDateTime(createSimpleTimeZoneOps(refineTimeZoneSlot(e)))))\n  })\n}), Jo = Object.defineProperties({}, {\n  ...createStringTagDescriptors(\"Temporal\"),\n  ...createPropDescriptors({\n    PlainYearMonth: Jt,\n    PlainMonthDay: Wt,\n    PlainDate: Bo,\n    PlainTime: jo,\n    PlainDateTime: ko,\n    ZonedDateTime: Oo,\n    Instant: vo,\n    Calendar: Go,\n    TimeZone: So,\n    Duration: Eo,\n    Now: Ho\n  })\n});\n\nexport { DateTimeFormat as D, Jo as T, createPropDescriptors as c, toTemporalInstant as t };\n","/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n  // The default values below must be integers within the stated ranges.\r\n\r\n  /*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */\r\nvar DP = 20,          // 0 to MAX_DP\r\n\r\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\r\n  RM = 1,             // 0, 1, 2 or 3\r\n\r\n  // The maximum value of DP and Big.DP.\r\n  MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n  // The maximum magnitude of the exponent argument to the pow method.\r\n  MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\r\n  NE = -7,            // 0 to -1000000\r\n\r\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n   */\r\n  PE = 21,            // 0 to 1000000\r\n\r\n  /*\r\n   * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n   * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n   * primitive number without a loss of precision.\r\n   */\r\n  STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n  // Error messages.\r\n  NAME = '[big.js] ',\r\n  INVALID = NAME + 'Invalid ',\r\n  INVALID_DP = INVALID + 'decimal places',\r\n  INVALID_RM = INVALID + 'rounding mode',\r\n  DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n  // The shared prototype object.\r\n  P = {},\r\n  UNDEFINED = void 0,\r\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n/*\r\n * Create and return a Big constructor.\r\n */\r\nfunction _Big_() {\r\n\r\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\r\n  function Big(n) {\r\n    var x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n    // Duplicate.\r\n    if (n instanceof Big) {\r\n      x.s = n.s;\r\n      x.e = n.e;\r\n      x.c = n.c.slice();\r\n    } else {\r\n      if (typeof n !== 'string') {\r\n        if (Big.strict === true && typeof n !== 'bigint') {\r\n          throw TypeError(INVALID + 'value');\r\n        }\r\n\r\n        // Minus zero?\r\n        n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n      }\r\n\r\n      parse(x, n);\r\n    }\r\n\r\n    // Retain a reference to this Big constructor.\r\n    // Shadow Big.prototype.constructor which points to Object.\r\n    x.constructor = Big;\r\n  }\r\n\r\n  Big.prototype = P;\r\n  Big.DP = DP;\r\n  Big.RM = RM;\r\n  Big.NE = NE;\r\n  Big.PE = PE;\r\n  Big.strict = STRICT;\r\n  Big.roundDown = 0;\r\n  Big.roundHalfUp = 1;\r\n  Big.roundHalfEven = 2;\r\n  Big.roundUp = 3;\r\n\r\n  return Big;\r\n}\r\n\r\n\r\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\r\nfunction parse(x, n) {\r\n  var e, i, nl;\r\n\r\n  if (!NUMERIC.test(n)) {\r\n    throw Error(INVALID + 'number');\r\n  }\r\n\r\n  // Determine sign.\r\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n  // Decimal point?\r\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = n.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +n.slice(i + 1);\r\n    n = n.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = n.length;\r\n  }\r\n\r\n  nl = n.length;\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n  if (i == nl) {\r\n\r\n    // Zero.\r\n    x.c = [x.e = 0];\r\n  } else {\r\n\r\n    // Determine trailing zeros.\r\n    for (; nl > 0 && n.charAt(--nl) == '0';);\r\n    x.e = e - i - 1;\r\n    x.c = [];\r\n\r\n    // Convert string to array of digits without leading/trailing zeros.\r\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n *\r\n * x {Big} The Big to round.\r\n * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\r\nfunction round(x, sd, rm, more) {\r\n  var xc = x.c;\r\n\r\n  if (rm === UNDEFINED) rm = x.constructor.RM;\r\n  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n    throw Error(INVALID_RM);\r\n  }\r\n\r\n  if (sd < 1) {\r\n    more =\r\n      rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n      rm === 1 && xc[0] >= 5 ||\r\n      rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n    );\r\n\r\n    xc.length = 1;\r\n\r\n    if (more) {\r\n\r\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n      x.e = x.e - sd + 1;\r\n      xc[0] = 1;\r\n    } else {\r\n\r\n      // Zero.\r\n      xc[0] = x.e = 0;\r\n    }\r\n  } else if (sd < xc.length) {\r\n\r\n    // xc[sd] is the digit after the digit that may be rounded up.\r\n    more =\r\n      rm === 1 && xc[sd] >= 5 ||\r\n      rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n        (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n      rm === 3 && (more || !!xc[0]);\r\n\r\n    // Remove any digits after the required precision.\r\n    xc.length = sd;\r\n\r\n    // Round up?\r\n    if (more) {\r\n\r\n      // Rounding up may mean the previous digit has to be rounded up.\r\n      for (; ++xc[--sd] > 9;) {\r\n        xc[sd] = 0;\r\n        if (sd === 0) {\r\n          ++x.e;\r\n          xc.unshift(1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (sd = xc.length; !xc[--sd];) xc.pop();\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n */\r\nfunction stringify(x, doExponential, isNonzero) {\r\n  var e = x.e,\r\n    s = x.c.join(''),\r\n    n = s.length;\r\n\r\n  // Exponential notation?\r\n  if (doExponential) {\r\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n  // Normal notation.\r\n  } else if (e < 0) {\r\n    for (; ++e;) s = '0' + s;\r\n    s = '0.' + s;\r\n  } else if (e > 0) {\r\n    if (++e > n) {\r\n      for (e -= n; e--;) s += '0';\r\n    } else if (e < n) {\r\n      s = s.slice(0, e) + '.' + s.slice(e);\r\n    }\r\n  } else if (n > 1) {\r\n    s = s.charAt(0) + '.' + s.slice(1);\r\n  }\r\n\r\n  return x.s < 0 && isNonzero ? '-' + s : s;\r\n}\r\n\r\n\r\n// Prototype/instance methods\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\r\nP.abs = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n */\r\nP.cmp = function (y) {\r\n  var isneg,\r\n    x = this,\r\n    xc = x.c,\r\n    yc = (y = new x.constructor(y)).c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  isneg = i < 0;\r\n\r\n  // Compare exponents.\r\n  if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = -1; ++i < j;) {\r\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.div = function (y) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    a = x.c,                  // dividend\r\n    b = (y = new Big(y)).c,   // divisor\r\n    k = x.s == y.s ? 1 : -1,\r\n    dp = Big.DP;\r\n\r\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n    throw Error(INVALID_DP);\r\n  }\r\n\r\n  // Divisor is zero?\r\n  if (!b[0]) {\r\n    throw Error(DIV_BY_ZERO);\r\n  }\r\n\r\n  // Dividend is 0? Return +-0.\r\n  if (!a[0]) {\r\n    y.s = k;\r\n    y.c = [y.e = 0];\r\n    return y;\r\n  }\r\n\r\n  var bl, bt, n, cmp, ri,\r\n    bz = b.slice(),\r\n    ai = bl = b.length,\r\n    al = a.length,\r\n    r = a.slice(0, bl),   // remainder\r\n    rl = r.length,\r\n    q = y,                // quotient\r\n    qc = q.c = [],\r\n    qi = 0,\r\n    p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n  q.s = k;\r\n  k = p < 0 ? 0 : p;\r\n\r\n  // Create version of divisor with leading zero.\r\n  bz.unshift(0);\r\n\r\n  // Add zeros to make remainder as long as divisor.\r\n  for (; rl++ < bl;) r.push(0);\r\n\r\n  do {\r\n\r\n    // n is how many times the divisor goes into current remainder.\r\n    for (n = 0; n < 10; n++) {\r\n\r\n      // Compare divisor and remainder.\r\n      if (bl != (rl = r.length)) {\r\n        cmp = bl > rl ? 1 : -1;\r\n      } else {\r\n        for (ri = -1, cmp = 0; ++ri < bl;) {\r\n          if (b[ri] != r[ri]) {\r\n            cmp = b[ri] > r[ri] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If divisor < remainder, subtract divisor from remainder.\r\n      if (cmp < 0) {\r\n\r\n        // Remainder can't be more than 1 digit longer than divisor.\r\n        // Equalise lengths using divisor with extra leading zero?\r\n        for (bt = rl == bl ? b : bz; rl;) {\r\n          if (r[--rl] < bt[rl]) {\r\n            ri = rl;\r\n            for (; ri && !r[--ri];) r[ri] = 9;\r\n            --r[ri];\r\n            r[rl] += 10;\r\n          }\r\n          r[rl] -= bt[rl];\r\n        }\r\n\r\n        for (; !r[0];) r.shift();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Add the digit n to the result array.\r\n    qc[qi++] = cmp ? n : ++n;\r\n\r\n    // Update the remainder.\r\n    if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n    else r = [a[ai]];\r\n\r\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n  if (!qc[0] && qi != 1) {\r\n\r\n    // There can't be more than one zero.\r\n    qc.shift();\r\n    q.e--;\r\n    p--;\r\n  }\r\n\r\n  // Round?\r\n  if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n  return q;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\r\nP.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\r\nP.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.gte = function (y) {\r\n  return this.cmp(y) > -1;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\r\nP.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var i, j, t, xlty,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.plus(y);\r\n  }\r\n\r\n  var xc = x.c.slice(),\r\n    xe = x.e,\r\n    yc = y.c,\r\n    ye = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n    if (yc[0]) {\r\n      y.s = -b;\r\n    } else if (xc[0]) {\r\n      y = new Big(x);\r\n    } else {\r\n      y.s = 1;\r\n    }\r\n    return y;\r\n  }\r\n\r\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n  if (a = xe - ye) {\r\n\r\n    if (xlty = a < 0) {\r\n      a = -a;\r\n      t = xc;\r\n    } else {\r\n      ye = xe;\r\n      t = yc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (b = a; b--;) t.push(0);\r\n    t.reverse();\r\n  } else {\r\n\r\n    // Exponents equal. Check digit by digit.\r\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n    for (a = b = 0; b < j; b++) {\r\n      if (xc[b] != yc[b]) {\r\n        xlty = xc[b] < yc[b];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // x < y? Point xc to the array of the bigger number.\r\n  if (xlty) {\r\n    t = xc;\r\n    xc = yc;\r\n    yc = t;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\r\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n  // Subtract yc from xc.\r\n  for (b = i; j > a;) {\r\n    if (xc[--j] < yc[j]) {\r\n      for (i = j; i && !xc[--i];) xc[i] = 9;\r\n      --xc[i];\r\n      xc[j] += 10;\r\n    }\r\n\r\n    xc[j] -= yc[j];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xc[--b] === 0;) xc.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xc[0] === 0;) {\r\n    xc.shift();\r\n    --ye;\r\n  }\r\n\r\n  if (!xc[0]) {\r\n\r\n    // n - n = +0\r\n    y.s = 1;\r\n\r\n    // Result must be zero.\r\n    xc = [ye = 0];\r\n  }\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\r\nP.mod = function (y) {\r\n  var ygtx,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  if (!y.c[0]) {\r\n    throw Error(DIV_BY_ZERO);\r\n  }\r\n\r\n  x.s = y.s = 1;\r\n  ygtx = y.cmp(x) == 1;\r\n  x.s = a;\r\n  y.s = b;\r\n\r\n  if (ygtx) return new Big(x);\r\n\r\n  a = Big.DP;\r\n  b = Big.RM;\r\n  Big.DP = Big.RM = 0;\r\n  x = x.div(y);\r\n  Big.DP = a;\r\n  Big.RM = b;\r\n\r\n  return this.minus(x.times(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big negated.\r\n */\r\nP.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\r\nP.plus = P.add = function (y) {\r\n  var e, k, t,\r\n    x = this,\r\n    Big = x.constructor;\r\n\r\n  y = new Big(y);\r\n\r\n  // Signs differ?\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  var xe = x.e,\r\n    xc = x.c,\r\n    ye = y.e,\r\n    yc = y.c;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n    if (!yc[0]) {\r\n      if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = x.s;\r\n      }\r\n    }\r\n    return y;\r\n  }\r\n\r\n  xc = xc.slice();\r\n\r\n  // Prepend zeros to equalise exponents.\r\n  // Note: reverse faster than unshifts.\r\n  if (e = xe - ye) {\r\n    if (e > 0) {\r\n      ye = xe;\r\n      t = yc;\r\n    } else {\r\n      e = -e;\r\n      t = xc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (; e--;) t.push(0);\r\n    t.reverse();\r\n  }\r\n\r\n  // Point xc to the longer array.\r\n  if (xc.length - yc.length < 0) {\r\n    t = yc;\r\n    yc = xc;\r\n    xc = t;\r\n  }\r\n\r\n  e = yc.length;\r\n\r\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n  for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n  if (k) {\r\n    xc.unshift(k);\r\n    ++ye;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\r\nP.pow = function (n) {\r\n  var x = this,\r\n    one = new x.constructor('1'),\r\n    y = one,\r\n    isneg = n < 0;\r\n\r\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n    throw Error(INVALID + 'exponent');\r\n  }\r\n\r\n  if (isneg) n = -n;\r\n\r\n  for (;;) {\r\n    if (n & 1) y = y.times(x);\r\n    n >>= 1;\r\n    if (!n) break;\r\n    x = x.times(x);\r\n  }\r\n\r\n  return isneg ? one.div(y) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.prec = function (sd, rm) {\r\n  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n    throw Error(INVALID + 'precision');\r\n  }\r\n  return round(new this.constructor(this), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n * using rounding mode rm, or Big.RM if rm is not specified.\r\n * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.round = function (dp, rm) {\r\n  if (dp === UNDEFINED) dp = 0;\r\n  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n    throw Error(INVALID_DP);\r\n  }\r\n  return round(new this.constructor(this), dp + this.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.sqrt = function () {\r\n  var r, c, t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    s = x.s,\r\n    e = x.e,\r\n    half = new Big('0.5');\r\n\r\n  // Zero?\r\n  if (!x.c[0]) return new Big(x);\r\n\r\n  // Negative?\r\n  if (s < 0) {\r\n    throw Error(NAME + 'No square root');\r\n  }\r\n\r\n  // Estimate.\r\n  s = Math.sqrt(x + '');\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n  if (s === 0 || s === 1 / 0) {\r\n    c = x.c.join('');\r\n    if (!(c.length + e & 1)) c += '0';\r\n    s = Math.sqrt(c);\r\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n  } else {\r\n    r = new Big(s + '');\r\n  }\r\n\r\n  e = r.e + (Big.DP += 4);\r\n\r\n  // Newton-Raphson iteration.\r\n  do {\r\n    t = r;\r\n    r = half.times(t.plus(x.div(t)));\r\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n  return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\r\nP.times = P.mul = function (y) {\r\n  var c,\r\n    x = this,\r\n    Big = x.constructor,\r\n    xc = x.c,\r\n    yc = (y = new Big(y)).c,\r\n    a = xc.length,\r\n    b = yc.length,\r\n    i = x.e,\r\n    j = y.e;\r\n\r\n  // Determine sign of result.\r\n  y.s = x.s == y.s ? 1 : -1;\r\n\r\n  // Return signed 0 if either 0.\r\n  if (!xc[0] || !yc[0]) {\r\n    y.c = [y.e = 0];\r\n    return y;\r\n  }\r\n\r\n  // Initialise exponent of result as x.e + y.e.\r\n  y.e = i + j;\r\n\r\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n  if (a < b) {\r\n    c = xc;\r\n    xc = yc;\r\n    yc = c;\r\n    j = a;\r\n    a = b;\r\n    b = j;\r\n  }\r\n\r\n  // Initialise coefficient array of result with zeros.\r\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n  // Multiply.\r\n\r\n  // i is initially xc.length.\r\n  for (i = b; i--;) {\r\n    b = 0;\r\n\r\n    // a is yc.length.\r\n    for (j = a + i; j > i;) {\r\n\r\n      // Current sum of products at this digit position, plus carry.\r\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n      c[j--] = b % 10;\r\n\r\n      // carry\r\n      b = b / 10 | 0;\r\n    }\r\n\r\n    c[j] = b;\r\n  }\r\n\r\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n  if (b) ++y.e;\r\n  else c.shift();\r\n\r\n  // Remove trailing zeros.\r\n  for (i = c.length; !c[--i];) c.pop();\r\n  y.c = c;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var x = this,\r\n    n = x.c[0];\r\n\r\n  if (dp !== UNDEFINED) {\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    x = round(new x.constructor(x), ++dp, rm);\r\n    for (; x.c.length < dp;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, true, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var x = this,\r\n    n = x.c[0];\r\n\r\n  if (dp !== UNDEFINED) {\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n    // x.e may have changed if the value is rounded up.\r\n    for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, false, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toJSON = P.toString = function () {\r\n  var x = this,\r\n    Big = x.constructor;\r\n  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Big as a primitve number.\r\n */\r\nP.toNumber = function () {\r\n  var n = Number(stringify(this, true, true));\r\n  if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n    throw Error(NAME + 'Imprecise conversion');\r\n  }\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * rounding mode rm, or Big.RM if rm is not specified.\r\n * Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    n = x.c[0];\r\n\r\n  if (sd !== UNDEFINED) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    x = round(new Big(x), sd, rm);\r\n    for (; x.c.length < sd;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\r\nP.valueOf = function () {\r\n  var x = this,\r\n    Big = x.constructor;\r\n  if (Big.strict === true) {\r\n    throw Error(NAME + 'valueOf disallowed');\r\n  }\r\n  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n};\r\n\r\n\r\n// Export\r\n\r\n\r\nexport var Big = _Big_();\r\n\r\n/// <reference types=\"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts\" />\r\nexport default Big;\r\n","import { Temporal } from 'temporal-polyfill'\r\n\r\nexport namespace Utils {\r\n  // https://stackoverflow.com/a/40577337/8037425\r\n  export function getAllMethodNames(obj: object, excludeContructors: boolean = false): string[] {\r\n    let _obj: object | null = obj;\r\n    const methods: Set<string> = new Set();\r\n\r\n    // eslint-disable-next-line no-cond-assign\r\n    while ((_obj = Reflect.getPrototypeOf(_obj)) && Reflect.getPrototypeOf(_obj)) {\r\n      const keys: Array<string> = Reflect.ownKeys(_obj) as Array<string>;\r\n      keys.filter((key: string) => !excludeContructors || key !== 'constructor')\r\n        .forEach((key: string) => methods.add(key));\r\n    }\r\n\r\n    // Convert Symbols to strings, if there are any\r\n    return Array.from(methods, value => value.toString())\r\n      .sort();\r\n  }\r\n}\r\n\r\nexport namespace TimeZone {\r\n  /**\r\n   * Returns the amount of time in nanoseconds to add to UTC to get\r\n   * standard time in this time zone. Because this value is not\r\n   * affected by daylight saving time, it is called <I>raw\r\n   * offset</I>.\r\n   *\r\n   * Since JS doesn't have a native function for this, use the lesser offset of January and July.\r\n   *\r\n   * @return the amount of raw offset time in nanoseconds to add to UTC.\r\n   */\r\n  export function getRawOffset(timeZoneId: string): number {\r\n    const timeZone = Temporal.TimeZone.from(timeZoneId);\r\n    const msCount = [\r\n      { month: 7, day: 1, year: new Date().getFullYear(), timeZone: timeZoneId },\r\n      { month: 1, day: 1, year: new Date().getFullYear(), timeZone: timeZoneId }\r\n    ]\r\n    .map(monthDay => Temporal.ZonedDateTime.from(monthDay).toInstant())\r\n    .map(instant => timeZone.getOffsetNanosecondsFor(instant))\r\n\r\n    return Math.min(...msCount);\r\n  }\r\n\r\n  /**\r\n   * Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale.\r\n   * @param {string} timeZoneId\r\n   */\r\n  export function getDisplayName(timeZoneId: string): string | null {\r\n    let dtf = new Intl.DateTimeFormat('en-US', { timeZone: timeZoneId, timeZoneName: 'long' });\r\n    return dtf.formatToParts().find(part => part.type === 'timeZoneName')!.value; // result: 'Eastern Standard Time'\r\n  }\r\n\r\n  /**\r\n   * Returns the amount of time to be added to local standard time to get local wall clock time.\r\n   * The default implementation returns 3600000000000 nanoseconds (i.e., one hour) if a call to useDaylightTime() returns true.\r\n   * Otherwise, 0 (zero) is returned.\r\n   * @param {string} timeZoneId\r\n   * @return {number}\r\n   */\r\n  export function getDSTSavings(timeZoneId: string): number {\r\n    const timeZone = Temporal.TimeZone.from(timeZoneId);\r\n    const msCount = [\r\n      { month: 7, day: 1, year: new Date().getFullYear() },\r\n      { month: 1, day: 1, year: new Date().getFullYear() }\r\n    ]\r\n    .map(monthDay => Temporal.PlainDate.from(monthDay))\r\n    .map(plainMonthDay => timeZone.getInstantFor!(plainMonthDay))\r\n    .map(instant => timeZone.getOffsetNanosecondsFor(instant))\r\n\r\n    return Math.abs(msCount[0] - msCount[1]);\r\n  }\r\n\r\n  /**\r\n   * Returns the offset of this time zone from UTC at the specified date. If Daylight Saving Time is in effect at the\r\n   * specified date, the offset value is adjusted with the amount of daylight saving.\r\n   *\r\n   * This method returns a historically correct offset value if an underlying TimeZone implementation subclass\r\n   * supports historical Daylight Saving Time schedule and GMT offset changes.\r\n   * @param {string} timeZoneId\r\n   * @param {number} millisSinceEpoch\r\n   */\r\n  export function getOffset(timeZoneId: string, millisSinceEpoch: number): number {\r\n    const timeZone = Temporal.TimeZone.from(timeZoneId);\r\n    return timeZone.getOffsetNanosecondsFor(Temporal.Instant.fromEpochMilliseconds(millisSinceEpoch));\r\n  }\r\n}\r\n\r\n/**\r\n * java.util.Calendar\r\n */\r\nexport namespace Calendar {\r\n  export const JANUARY: number = 0;\r\n  export const FEBRUARY: number = 1;\r\n  export const MARCH: number = 2;\r\n  export const APRIL: number = 3;\r\n  export const MAY: number = 4;\r\n  export const JUNE: number = 5;\r\n  export const JULY: number = 6;\r\n  export const AUGUST: number = 7;\r\n  export const SEPTEMBER: number = 8;\r\n  export const OCTOBER: number = 9;\r\n  export const NOVEMBER: number = 10;\r\n  export const DECEMBER: number = 11;\r\n\r\n  export const SUNDAY: number = 1;\r\n  export const MONDAY: number = 2;\r\n  export const TUESDAY: number = 3;\r\n  export const WEDNESDAY: number = 4;\r\n  export const THURSDAY: number = 5;\r\n  export const FRIDAY: number = 6;\r\n  export const SATURDAY: number = 7;\r\n\r\n  export const DATE = 5;\r\n  export const MONTH = 2;\r\n  export const YEAR = 1;\r\n}\r\n\r\n/**\r\n * java.lang.Math\r\n */\r\nexport namespace MathUtils {\r\n  /**\r\n   * java.lang.Math.toRadians\r\n   * @param degrees\r\n   */\r\n  export function degreesToRadians(degrees: number): number {\r\n    return degrees * Math.PI / 180;\r\n  }\r\n\r\n  /**\r\n   * java.lang.Math.toDegrees\r\n   * @param radians\r\n   */\r\n  export function radiansToDegrees(radians: number): number {\r\n    return radians * 180 / Math.PI;\r\n  }\r\n}\r\n\r\n/**\r\n * java.lang.String\r\n */\r\nexport namespace StringUtils {\r\n  /**\r\n   * Compares two strings lexicographically.\r\n   * The comparison is based on the Unicode value of each character in\r\n   * the strings. The character sequence represented by this\r\n   * {@code String} object is compared lexicographically to the\r\n   * character sequence represented by the argument string. The result is\r\n   * a negative integer if this {@code String} object\r\n   * lexicographically precedes the argument string. The result is a\r\n   * positive integer if this {@code String} object lexicographically\r\n   * follows the argument string. The result is zero if the strings\r\n   * are equal; {@code compareTo} returns {@code 0} exactly when\r\n   * the {@link #equals(Object)} method would return {@code true}.\r\n   * <p>\r\n   * This is the definition of lexicographic ordering. If two strings are\r\n   * different, then either they have different characters at some index\r\n   * that is a valid index for both strings, or their lengths are different,\r\n   * or both. If they have different characters at one or more index\r\n   * positions, let <i>k</i> be the smallest such index; then the string\r\n   * whose character at position <i>k</i> has the smaller value, as\r\n   * determined by using the &lt; operator, lexicographically precedes the\r\n   * other string. In this case, {@code compareTo} returns the\r\n   * difference of the two character values at position {@code k} in\r\n   * the two string -- that is, the value:\r\n   * <blockquote><pre>\r\n   * this.charAt(k)-anotherString.charAt(k)\r\n   * </pre></blockquote>\r\n   * If there is no index position at which they differ, then the shorter\r\n   * string lexicographically precedes the longer string. In this case,\r\n   * {@code compareTo} returns the difference of the lengths of the\r\n   * strings -- that is, the value:\r\n   * <blockquote><pre>\r\n   * this.length()-anotherString.length()\r\n   * </pre></blockquote>\r\n   *\r\n   * @param string1\r\n   * @param   string2   the {@code String} to be compared.\r\n   * @return  the value {@code 0} if the argument string is equal to\r\n   *          this string; a value less than {@code 0} if this string\r\n   *          is lexicographically less than the string argument; and a\r\n   *          value greater than {@code 0} if this string is\r\n   *          lexicographically greater than the string argument.\r\n   */\r\n  export function compareTo(string1: string, string2: string): number {\r\n    let k: number = 0;\r\n    while (k < Math.min(string1.length, string2.length)) {\r\n      if (string1.substr(k, 1) !== string2.substr(k, 1)) {\r\n        return string1.charCodeAt(k) - string2.charCodeAt(k);\r\n      }\r\n      k++;\r\n    }\r\n    return string1.length - string2.length;\r\n  }\r\n}\r\n\r\nexport namespace IntegerUtils {\r\n  /**\r\n   * Compares 2 numbers\r\n   * @param x\r\n   * @param y\r\n   */\r\n  export function compare(x: number, y: number): number {\r\n    if (x === y) return 0;\r\n    return x > y ? 1 : -1;\r\n  }\r\n\r\n}\r\n\r\n// export const Long_MIN_VALUE = 0;\r\nexport const Long_MIN_VALUE = NaN;\r\n\r\n/**\r\n * @param {number} num\r\n * @param {number} places - The number of places to pad with zeros\r\n * @returns {string} - The formatted integer\r\n */\r\nexport function padZeros(num: number, places: number): string {\r\n  const int = Math.trunc(num);\r\n  if (int >= Math.pow(10, places)) return int.toString();\r\n  return '0'.repeat(places).concat(int.toString()).slice(-places);\r\n}","/* eslint-disable max-classes-per-file */\r\nclass BaseCustomError extends Error {\r\n  constructor(message?: string) {\r\n    super(message);\r\n    this.name = this.constructor.name;\r\n  }\r\n}\r\n\r\nexport class NullPointerException extends BaseCustomError {\r\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\nexport class IllegalArgumentException extends BaseCustomError {}\r\n\r\nexport class UnsupportedError extends BaseCustomError {}\r\n","import { MathUtils, TimeZone } from '../polyfills/Utils';\r\nimport { IllegalArgumentException, UnsupportedError } from '../polyfills/errors';\r\n\r\n/**\r\n * A class that contains location information such as latitude and longitude required for astronomical calculations. The\r\n * elevation field may not be used by some calculation engines and would be ignored if set. Check the documentation for\r\n * specific implementations of the {@link AstronomicalCalculator} to see if elevation is calculated as part of the\r\n * algorithm.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2016\r\n * @version 1.1\r\n */\r\nexport class GeoLocation {\r\n  /**\r\n   * @see #getLatitude()\r\n   * @see #setLatitude(double)\r\n   * @see #setLatitude(int, int, double, String)\r\n   */\r\n  private latitude!: number;\r\n\r\n  /**\r\n   * @see #getLongitude()\r\n   * @see #setLongitude(double)\r\n   * @see #setLongitude(int, int, double, String)\r\n   */\r\n  private longitude!: number;\r\n\r\n  /**\r\n   * @see #getLocationName()\r\n   * @see #setLocationName(String)\r\n   */\r\n  private locationName: string | null = null;\r\n\r\n  /**\r\n   * @see #getTimeZone()\r\n   * @see #setTimeZone(TimeZone)\r\n   */\r\n  private timeZoneId!: string;\r\n\r\n  /**\r\n   * @see #getElevation()\r\n   * @see #setElevation(double)\r\n   */\r\n  private elevation!: number;\r\n\r\n  /**\r\n   * Constant for a distance type calculation.\r\n   * @see #getGeodesicDistance(GeoLocation)\r\n   */\r\n  private static readonly DISTANCE: number = 0;\r\n\r\n  /**\r\n   * Constant for a initial bearing type calculation.\r\n   * @see #getGeodesicInitialBearing(GeoLocation)\r\n   */\r\n  private static readonly INITIAL_BEARING: number = 1;\r\n\r\n  /**\r\n   * Constant for a final bearing type calculation.\r\n   * @see #getGeodesicFinalBearing(GeoLocation)\r\n   */\r\n  private static readonly FINAL_BEARING: number = 2;\r\n\r\n  /** constant for nanoseconds in a minute (60 * 1000 * 1000 * 1000) */\r\n  private static readonly MINUTE_NANOS: number = 60 * 1000 * 1000 * 1000;\r\n\r\n  /** constant for milliseconds in an hour (3,600,000) */\r\n  private static readonly HOUR_NANOS: number = GeoLocation.MINUTE_NANOS * 60;\r\n\r\n  /**\r\n   * Method to get the elevation in Meters.\r\n   *\r\n   * @return Returns the elevation in Meters.\r\n   */\r\n  public getElevation(): number {\r\n    return this.elevation;\r\n  }\r\n\r\n  /**\r\n   * Method to set the elevation in Meters <b>above </b> sea level.\r\n   *\r\n   * @param elevation\r\n   *            The elevation to set in Meters. An IllegalArgumentException will be thrown if the value is a negative.\r\n   */\r\n  public setElevation(elevation: number): void {\r\n    if (elevation < 0) {\r\n      throw new IllegalArgumentException('Elevation cannot be negative');\r\n    }\r\n    this.elevation = elevation;\r\n  }\r\n\r\n  /**\r\n   * GeoLocation constructor with parameters for all required fields.\r\n   *\r\n   * @param name\r\n   *            The location name for display use such as &quot;Lakewood, NJ&quot;\r\n   * @param latitude\r\n   *            the latitude in a double format such as 40.095965 for Lakewood, NJ.\r\n   *            <b>Note: </b> For latitudes south of the equator, a negative value should be used.\r\n   * @param longitude\r\n   *            double the longitude in a double format such as -74.222130 for Lakewood, NJ.\r\n   *            <b>Note: </b> For longitudes east of the <a href=\"https://en.wikipedia.org/wiki/Prime_Meridian\">Prime\r\n   *            Meridian </a> (Greenwich), a negative value should be used.\r\n   * @param timeZone\r\n   *            the <code>TimeZone</code> for the location.\r\n   */\r\n\r\n  /*\r\n      public GeoLocation(String name, double latitude, double longitude, TimeZone timeZone) {\r\n          this(name, latitude, longitude, 0, timeZone);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * GeoLocation constructor with parameters for all required fields.\r\n   *\r\n   * @param name\r\n   *            The location name for display use such as &quot;Lakewood, NJ&quot;\r\n   * @param latitude\r\n   *            the latitude in a double format such as 40.095965 for Lakewood, NJ.\r\n   *            <b>Note: </b> For latitudes south of the equator, a negative value should be used.\r\n   * @param longitude\r\n   *            double the longitude in a double format such as -74.222130 for Lakewood, NJ.\r\n   *            <b>Note: </b> For longitudes east of the <a href=\"https://en.wikipedia.org/wiki/Prime_Meridian\">Prime\r\n   *            Meridian </a> (Greenwich), a negative value should be used.\r\n   * @param elevation\r\n   *            the elevation above sea level in Meters. Elevation is not used in most algorithms used for calculating\r\n   *            sunrise and set.\r\n   * @param timeZoneId\r\n   *            the <code>TimeZone</code> for the location.\r\n   */\r\n  constructor(name: string | null, latitude: number, longitude: number, elevation: number, timeZoneId?: string);\r\n  constructor(name: string | null, latitude: number, longitude: number, timeZoneId: string);\r\n  constructor(name: string | null, latitude: number, longitude: number, elevationOrTimeZoneId?: number | string, timeZoneId?: string) {\r\n    let elevation: number = 0;\r\n    if (timeZoneId) {\r\n      elevation = elevationOrTimeZoneId as number;\r\n    } else {\r\n      timeZoneId = elevationOrTimeZoneId as string;\r\n    }\r\n\r\n    this.setLocationName(name);\r\n    this.setLatitude(latitude);\r\n    this.setLongitude(longitude);\r\n    this.setElevation(elevation);\r\n    this.setTimeZone(timeZoneId);\r\n  }\r\n\r\n  /**\r\n   * Default GeoLocation constructor will set location to the Prime Meridian at Greenwich, England and a TimeZone of\r\n   * GMT. The longitude will be set to 0 and the latitude will be 51.4772 to match the location of the <a\r\n   * href=\"http://www.rog.nmm.ac.uk\">Royal Observatory, Greenwich </a>. No daylight savings time will be used.\r\n   */\r\n  /*\r\n      public GeoLocation() {\r\n          setLocationName(\"Greenwich, England\");\r\n          setLongitude(0); // added for clarity\r\n          setLatitude(51.4772);\r\n          setTimeZone(TimeZone.getTimeZone(\"GMT\"));\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Method to set the latitude.\r\n   *\r\n   * @param latitude\r\n   *            The degrees of latitude to set. The values should be between -90&deg; and 90&deg;. An\r\n   *            IllegalArgumentException will be thrown if the value exceeds the limit. For example 40.095965 would be\r\n   *            used for Lakewood, NJ. <b>Note: </b> For latitudes south of the equator, a negative value should be\r\n   *            used.\r\n   */\r\n\r\n  /*\r\n      public setLatitude(latitude: number): void {\r\n          if (latitude > 90 || latitude < -90) {\r\n              throw new IllegalArgumentException(\"Latitude must be between -90 and  90\");\r\n          }\r\n          this.latitude = latitude;\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Method to set the latitude in degrees, minutes and seconds.\r\n   *\r\n   * @param degrees\r\n   *            The degrees of latitude to set between 0&deg; and 90&deg;. For example 40 would be used for Lakewood, NJ.\r\n   *            An IllegalArgumentException will be thrown if the value exceeds the limit.\r\n   * @param minutes\r\n   *            <a href=\"https://en.wikipedia.org/wiki/Minute_of_arc#Cartography\">minutes of arc</a>\r\n   * @param seconds\r\n   *            <a href=\"https://en.wikipedia.org/wiki/Minute_of_arc#Cartography\">seconds of arc</a>\r\n   * @param direction\r\n   *            N for north and S for south. An IllegalArgumentException will be thrown if the value is not S or N.\r\n   */\r\n  public setLatitude(degrees: number, minutes: number, seconds: number, direction: 'N' | 'S'): void;\r\n  public setLatitude(latitude: number): void;\r\n  public setLatitude(degreesOrLatitude: number, minutes?: number, seconds?: number, direction?: 'N' | 'S'): void {\r\n    if (!minutes) {\r\n      const latitude: number = degreesOrLatitude;\r\n\r\n      if (latitude > 90 || latitude < -90) {\r\n        throw new IllegalArgumentException('Latitude must be between -90 and  90');\r\n      }\r\n\r\n      this.latitude = latitude;\r\n    } else {\r\n      const degrees: number = degreesOrLatitude;\r\n\r\n      let tempLat: number = degrees + ((minutes + (seconds! / 60)) / 60);\r\n      if (tempLat > 90 || tempLat < 0) { // FIXME An exception should be thrown if degrees, minutes or seconds are negative\r\n        throw new IllegalArgumentException('Latitude must be between 0 and  90. Use direction of S instead of negative.');\r\n      }\r\n      if (direction === 'S') {\r\n        tempLat *= -1;\r\n      } else if (!(direction === 'N')) {\r\n        throw new IllegalArgumentException('Latitude direction must be N or S');\r\n      }\r\n      this.latitude = tempLat;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return Returns the latitude.\r\n   */\r\n  public getLatitude(): number {\r\n    return this.latitude;\r\n  }\r\n\r\n  /**\r\n   * Method to set the longitude in a double format.\r\n   *\r\n   * @param longitude\r\n   *            The degrees of longitude to set in a double format between -180&deg; and 180&deg;. An\r\n   *            IllegalArgumentException will be thrown if the value exceeds the limit. For example -74.2094 would be\r\n   *            used for Lakewood, NJ. Note: for longitudes east of the <a\r\n   *            href=\"https://en.wikipedia.org/wiki/Prime_Meridian\">Prime Meridian</a> (Greenwich) a negative value\r\n   *            should be used.\r\n   */\r\n\r\n  /*\r\n      public setLongitude(longitude: number): void {\r\n          if (longitude > 180 || longitude < -180) {\r\n              throw new IllegalArgumentException(\"Longitude must be between -180 and  180\");\r\n          }\r\n          this.longitude = longitude;\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Method to set the longitude in degrees, minutes and seconds.\r\n   *\r\n   * @param degrees\r\n   *            The degrees of longitude to set between 0&deg; and 180&deg;. As an example 74 would be set for Lakewood, NJ.\r\n   *            An IllegalArgumentException will be thrown if the value exceeds the limits.\r\n   * @param minutes\r\n   *            <a href=\"https://en.wikipedia.org/wiki/Minute_of_arc#Cartography\">minutes of arc</a>\r\n   * @param seconds\r\n   *            <a href=\"https://en.wikipedia.org/wiki/Minute_of_arc#Cartography\">seconds of arc</a>\r\n   * @param direction\r\n   *            E for east of the <a href=\"https://en.wikipedia.org/wiki/Prime_Meridian\">Prime Meridian </a> or W for west of it.\r\n   *            An IllegalArgumentException will be thrown if\r\n   *            the value is not E or W.\r\n   */\r\n  public setLongitude(degrees: number, minutes: number, seconds: number, direction: 'E' | 'W'): void;\r\n  public setLongitude(longitude: number): void;\r\n  public setLongitude(degreesOrLongitude: number, minutes?: number, seconds?: number, direction?: 'E' | 'W'): void {\r\n    if (!minutes) {\r\n      const longitude: number = degreesOrLongitude;\r\n\r\n      if (longitude > 180 || longitude < -180) {\r\n        throw new IllegalArgumentException('Longitude must be between -180 and  180');\r\n      }\r\n\r\n      this.longitude = longitude;\r\n    } else {\r\n      const degrees: number = degreesOrLongitude;\r\n\r\n      let longTemp: number = degrees + ((minutes + (seconds! / 60)) / 60);\r\n      if (longTemp > 180 || this.longitude < 0) { // FIXME An exception should be thrown if degrees, minutes or seconds are negative\r\n        throw new IllegalArgumentException('Longitude must be between 0 and  180.  Use a direction of W instead of negative.');\r\n      }\r\n      if (direction === 'W') {\r\n        longTemp *= -1;\r\n      } else if (!(direction === 'E')) {\r\n        throw new IllegalArgumentException('Longitude direction must be E or W');\r\n      }\r\n      this.longitude = longTemp;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return Returns the longitude.\r\n   */\r\n  public getLongitude(): number {\r\n    return this.longitude;\r\n  }\r\n\r\n  /**\r\n   * @return Returns the location name.\r\n   */\r\n  public getLocationName(): string | null {\r\n    return this.locationName;\r\n  }\r\n\r\n  /**\r\n   * @param name\r\n   *            The setter method for the display name.\r\n   */\r\n  public setLocationName(name: string | null): void {\r\n    this.locationName = name;\r\n  }\r\n\r\n  /**\r\n   * @return Returns the timeZone.\r\n   */\r\n  public getTimeZone(): string {\r\n    return this.timeZoneId;\r\n  }\r\n\r\n  /**\r\n   * Method to set the TimeZone. If this is ever set after the GeoLocation is set in the\r\n   * {@link AstronomicalCalendar}, it is critical that\r\n   * {@link AstronomicalCalendar#getCalendar()}.\r\n   * {@link java.util.Calendar#setTimeZone(TimeZone) setTimeZone(TimeZone)} be called in order for the\r\n   * AstronomicalCalendar to output times in the expected offset. This situation will arise if the\r\n   * AstronomicalCalendar is ever {@link AstronomicalCalendar#clone() cloned}.\r\n   *\r\n   * @param timeZone\r\n   *            The timeZone to set.\r\n   */\r\n  public setTimeZone(timeZoneId: string): void {\r\n    this.timeZoneId = timeZoneId;\r\n  }\r\n\r\n  /**\r\n   * A method that will return the location's local mean time offset in nanoseconds from local <a\r\n   * href=\"https://en.wikipedia.org/wiki/Standard_time\">standard time</a>. The globe is split into 360&deg;, with\r\n   * 15&deg; per hour of the day. For a local that is at a longitude that is evenly divisible by 15 (longitude % 15 ==\r\n   * 0), at solar {@link AstronomicalCalendar#getSunTransit() noon} (with adjustment for the <a\r\n   * href=\"https://en.wikipedia.org/wiki/Equation_of_time\">equation of time</a>) the sun should be directly overhead,\r\n   * so a user who is 1&deg; west of this will have noon at 4 minutes after standard time noon, and conversely, a user\r\n   * who is 1&deg; east of the 15&deg; longitude will have noon at 11:56 AM. Lakewood, N.J., whose longitude is\r\n   * -74.2094, is 0.7906 away from the closest multiple of 15 at -75&deg;. This is multiplied by 4 to yield 3 minutes\r\n   * and 10 seconds earlier than standard time. The offset returned does not account for the <a\r\n   * href=\"https://en.wikipedia.org/wiki/Daylight_saving_time\">Daylight saving time</a> offset since this class is\r\n   * unaware of dates.\r\n   *\r\n   * @return the offset in nanoseconds not accounting for Daylight saving time. A positive value will be returned\r\n   *         East of the 15&deg; timezone line, and a negative value West of it.\r\n   * @since 1.1\r\n   */\r\n  public getLocalMeanTimeOffset(): number {\r\n    return this.getLongitude() * 4 * GeoLocation.MINUTE_NANOS - TimeZone.getRawOffset(this.getTimeZone());\r\n  }\r\n\r\n  /**\r\n   * Adjust the date for <a href=\"https://en.wikipedia.org/wiki/180th_meridian\">antimeridian</a> crossover. This is\r\n   * needed to deal with edge cases such as Samoa that use a different calendar date than expected based on their\r\n   * geographic location.\r\n   *\r\n   * The actual Time Zone offset may deviate from the expected offset based on the longitude. Since the 'absolute time'\r\n   * calculations are always based on longitudinal offset from UTC for a given date, the date is presumed to only\r\n   * increase East of the Prime Meridian, and to only decrease West of it. For Time Zones that cross the antimeridian,\r\n   * the date will be artificially adjusted before calculation to conform with this presumption.\r\n   *\r\n   * For example, Apia, Samoa with a longitude of -171.75 uses a local offset of +14:00.  When calculating sunrise for\r\n   * 2018-02-03, the calculator should operate using 2018-02-02 since the expected zone is -11.  After determining the\r\n   * UTC time, the local DST offset of <a href=\"https://en.wikipedia.org/wiki/UTC%2B14:00\">UTC+14:00</a> should be applied\r\n   * to bring the date back to 2018-02-03.\r\n   *\r\n   * @return the number of days to adjust the date This will typically be 0 unless the date crosses the antimeridian\r\n   */\r\n  public getAntimeridianAdjustment(): -1 | 1 | 0 {\r\n    const localHoursOffset: number = this.getLocalMeanTimeOffset() / GeoLocation.HOUR_NANOS;\r\n\r\n    // if the offset is 20 hours or more in the future (never expected anywhere other\r\n    // than a location using a timezone across the anti meridian to the east such as Samoa)\r\n    if (localHoursOffset >= 20) {\r\n      // roll the date forward a day\r\n      return 1;\r\n    } else if (localHoursOffset <= -20) {\r\n      // if the offset is 20 hours or more in the past (no current location is known\r\n      // that crosses the antimeridian to the west, but better safe than sorry)\r\n      // roll the date back a day\r\n      return -1;\r\n    }\r\n    // 99.999% of the world will have no adjustment\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate the initial <a href=\"https://en.wikipedia.org/wiki/Great_circle\">geodesic</a> bearing between this\r\n   * Object and a second Object passed to this method using <a\r\n   * href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a> inverse formula See T Vincenty, \"<a\r\n   * href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics on the Ellipsoid\r\n   * with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975\r\n   *\r\n   * @param location\r\n   *            the destination location\r\n   * @return the initial bearing\r\n   */\r\n  public getGeodesicInitialBearing(location: GeoLocation): number {\r\n    return this.vincentyFormula(location, GeoLocation.INITIAL_BEARING);\r\n  }\r\n\r\n  /**\r\n   * Calculate the final <a href=\"https://en.wikipedia.org/wiki/Great_circle\">geodesic</a> bearing between this Object\r\n   * and a second Object passed to this method using <a href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus\r\n   * Vincenty's</a> inverse formula See T Vincenty, \"<a href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and\r\n   * Inverse Solutions of Geodesics on the Ellipsoid with application of nested equations</a>\", Survey Review, vol\r\n   * XXII no 176, 1975\r\n   *\r\n   * @param location\r\n   *            the destination location\r\n   * @return the final bearing\r\n   */\r\n  public getGeodesicFinalBearing(location: GeoLocation): number {\r\n    return this.vincentyFormula(location, GeoLocation.FINAL_BEARING);\r\n  }\r\n\r\n  /**\r\n   * Calculate <a href=\"https://en.wikipedia.org/wiki/Great-circle_distance\">geodesic distance</a> in Meters between\r\n   * this Object and a second Object passed to this method using <a\r\n   * href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a> inverse formula See T Vincenty, \"<a\r\n   * href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics on the Ellipsoid\r\n   * with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975\r\n   *\r\n   * @see #vincentyFormula(GeoLocation, int)\r\n   * @param location\r\n   *            the destination location\r\n   * @return the geodesic distance in Meters\r\n   */\r\n  public getGeodesicDistance(location: GeoLocation): number {\r\n    return this.vincentyFormula(location, GeoLocation.DISTANCE);\r\n  }\r\n\r\n  /**\r\n   * Calculate <a href=\"https://en.wikipedia.org/wiki/Great-circle_distance\">geodesic distance</a> in Meters between\r\n   * this Object and a second Object passed to this method using <a\r\n   * href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a> inverse formula See T Vincenty, \"<a\r\n   * href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics on the Ellipsoid\r\n   * with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975\r\n   *\r\n   * @param location\r\n   *            the destination location\r\n   * @param formula\r\n   *            This formula calculates initial bearing ({@link #INITIAL_BEARING}), final bearing (\r\n   *            {@link #FINAL_BEARING}) and distance ({@link #DISTANCE}).\r\n   * @return geodesic distance in Meters\r\n   */\r\n  private vincentyFormula(location: GeoLocation, formula: number): number {\r\n    const a: number = 6378137;\r\n    const b: number = 6356752.3142;\r\n    const f: number = 1 / 298.257223563; // WGS-84 ellipsiod\r\n    const L: number = MathUtils.degreesToRadians(location.getLongitude() - this.getLongitude());\r\n    const U1: number = Math.atan((1 - f) * Math.tan(MathUtils.degreesToRadians(this.getLatitude())));\r\n    const U2: number = Math.atan((1 - f) * Math.tan(MathUtils.degreesToRadians(location.getLatitude())));\r\n    const sinU1: number = Math.sin(U1);\r\n    const cosU1: number = Math.cos(U1);\r\n    const sinU2: number = Math.sin(U2);\r\n    const cosU2: number = Math.cos(U2);\r\n\r\n    let lambda: number = L;\r\n    let lambdaP: number = 2 * Math.PI;\r\n    let iterLimit: number = 20;\r\n    let sinLambda: number = 0;\r\n    let cosLambda: number = 0;\r\n    let sinSigma: number = 0;\r\n    let cosSigma: number = 0;\r\n    let sigma: number = 0;\r\n    let sinAlpha: number = 0;\r\n    let cosSqAlpha: number = 0;\r\n    let cos2SigmaM: number = 0;\r\n    let C: number;\r\n\r\n    while (Math.abs(lambda - lambdaP) > 1e-12 && --iterLimit > 0) {\r\n      sinLambda = Math.sin(lambda);\r\n      cosLambda = Math.cos(lambda);\r\n      sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)\r\n        + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));\r\n      if (sinSigma === 0) return 0; // co-incident points\r\n      cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;\r\n      sigma = Math.atan2(sinSigma, cosSigma);\r\n      sinAlpha = (cosU1 * cosU2 * sinLambda) / sinSigma;\r\n      cosSqAlpha = 1 - sinAlpha * sinAlpha;\r\n      cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;\r\n      if (Number.isNaN(cos2SigmaM)) cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (§6)\r\n      C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));\r\n      lambdaP = lambda;\r\n      lambda = L + (1 - C) * f * sinAlpha\r\n        * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));\r\n    }\r\n    if (iterLimit === 0) return Number.NaN; // formula failed to converge\r\n\r\n    const uSq: number = cosSqAlpha * (a * a - b * b) / (b * b);\r\n    const A: number = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\r\n    const B: number = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\r\n    const deltaSigma: number = B * sinSigma\r\n      * (cos2SigmaM + B / 4\r\n        * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM\r\n          * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\r\n    const distance: number = b * A * (sigma - deltaSigma);\r\n\r\n    // initial bearing\r\n    const fwdAz: number = MathUtils.radiansToDegrees(Math.atan2(cosU2 * sinLambda, cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));\r\n    // final bearing\r\n    const revAz: number = MathUtils.radiansToDegrees(Math.atan2(cosU1 * sinLambda, -sinU1 * cosU2 + cosU1 * sinU2 * cosLambda));\r\n    if (formula === GeoLocation.DISTANCE) {\r\n      return distance;\r\n    } else if (formula === GeoLocation.INITIAL_BEARING) {\r\n      return fwdAz;\r\n    } else if (formula === GeoLocation.FINAL_BEARING) {\r\n      return revAz;\r\n    }\r\n    // should never happen\r\n    return Number.NaN;\r\n  }\r\n\r\n  /**\r\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Rhumb_line\">rhumb line</a> bearing from the current location to\r\n   * the GeoLocation passed in.\r\n   *\r\n   * @param location\r\n   *            destination location\r\n   * @return the bearing in degrees\r\n   */\r\n  public getRhumbLineBearing(location: GeoLocation): number {\r\n    let dLon: number = MathUtils.degreesToRadians(location.getLongitude() - this.getLongitude());\r\n    const dPhi: number = Math.log(Math.tan(MathUtils.degreesToRadians(location.getLatitude()) / 2 + Math.PI / 4)\r\n      / Math.tan(MathUtils.degreesToRadians(this.getLatitude()) / 2 + Math.PI / 4));\r\n    if (Math.abs(dLon) > Math.PI) dLon = dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);\r\n    return MathUtils.radiansToDegrees(Math.atan2(dLon, dPhi));\r\n  }\r\n\r\n  /**\r\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Rhumb_line\">rhumb line</a> distance from the current location\r\n   * to the GeoLocation passed in.\r\n   *\r\n   * @param location\r\n   *            the destination location\r\n   * @return the distance in Meters\r\n   */\r\n  public getRhumbLineDistance(location: GeoLocation): number {\r\n    const earthRadius: number = 6378137; // earth's mean radius in km\r\n    const dLat: number = MathUtils.degreesToRadians(location.getLatitude()) - MathUtils.degreesToRadians(this.getLatitude());\r\n    let dLon: number = Math.abs(MathUtils.degreesToRadians(location.getLongitude()) - MathUtils.degreesToRadians(this.getLongitude()));\r\n    const dPhi: number = Math.log(Math.tan(MathUtils.degreesToRadians(location.getLatitude()) / 2 + Math.PI / 4)\r\n      / Math.tan(MathUtils.degreesToRadians(this.getLatitude()) / 2 + Math.PI / 4));\r\n\r\n    let q: number = dLat / dPhi;\r\n    if (!Number.isFinite(q)) {\r\n      q = Math.cos(MathUtils.degreesToRadians(this.getLatitude()));\r\n    }\r\n\r\n    // if dLon over 180° take shorter rhumb across 180° meridian:\r\n    if (dLon > Math.PI) {\r\n      dLon = 2 * Math.PI - dLon;\r\n    }\r\n    const d: number = Math.sqrt(dLat * dLat + q * q * dLon * dLon);\r\n    return d * earthRadius;\r\n  }\r\n\r\n  /**\r\n   * A method that returns an XML formatted <code>String</code> representing the serialized <code>Object</code>. Very\r\n   * similar to the toString method but the return value is in an xml format. The format currently used (subject to\r\n   * change) is:\r\n   *\r\n   * <pre>\r\n   *   &lt;GeoLocation&gt;\r\n   *        &lt;LocationName&gt;Lakewood, NJ&lt;/LocationName&gt;\r\n   *        &lt;Latitude&gt;40.0828&amp;deg&lt;/Latitude&gt;\r\n   *        &lt;Longitude&gt;-74.2094&amp;deg&lt;/Longitude&gt;\r\n   *        &lt;Elevation&gt;0 Meters&lt;/Elevation&gt;\r\n   *        &lt;TimezoneName&gt;America/New_York&lt;/TimezoneName&gt;\r\n   *        &lt;TimeZoneDisplayName&gt;Eastern Standard Time&lt;/TimeZoneDisplayName&gt;\r\n   *        &lt;TimezoneGMTOffset&gt;-5&lt;/TimezoneGMTOffset&gt;\r\n   *        &lt;TimezoneDSTOffset&gt;1&lt;/TimezoneDSTOffset&gt;\r\n   *   &lt;/GeoLocation&gt;\r\n   * </pre>\r\n   *\r\n   * @return The XML formatted <code>String</code>.\r\n   * @deprecated\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public toXML(): void {\r\n    throw new UnsupportedError('This method is deprecated');\r\n  }\r\n\r\n  /**\r\n   * @see java.lang.Object#equals(Object)\r\n   */\r\n  public equals(object: object): boolean {\r\n    if (this === object) return true;\r\n    if (!(object instanceof GeoLocation)) return false;\r\n\r\n    const geo: GeoLocation = object as GeoLocation;\r\n    return this.latitude === geo.latitude\r\n      && this.longitude === geo.longitude\r\n      && this.elevation === geo.elevation\r\n      && this.locationName === geo.locationName\r\n      && this.timeZoneId === geo.getTimeZone();\r\n  }\r\n\r\n  /**\r\n   * @see java.lang.Object#toString()\r\n   */\r\n  public toString(): string {\r\n    return (`Location Name:\\t\\t\\t${this.getLocationName()}`)\r\n      .concat(`\\nLatitude:\\t\\t\\t${this.getLatitude().toString()}\\u00B0`)\r\n      .concat(`\\nLongitude:\\t\\t\\t${this.getLongitude().toString()}\\u00B0`)\r\n      .concat(`\\nElevation:\\t\\t\\t${this.getElevation().toString()} Meters`)\r\n      .concat(`\\nTimezone ID:\\t\\t\\t${this.getTimeZone()}`)\r\n      .concat(`\\nTimezone Display Name:\\t\\t${TimeZone.getDisplayName(this.getTimeZone())}`)\r\n      .concat(`\\nTimezone GMT Offset:\\t\\t${(TimeZone.getRawOffset(this.getTimeZone()) / GeoLocation.HOUR_NANOS).toString()}`)\r\n      .concat(`\\nTimezone DST Offset:\\t\\t${(TimeZone.getDSTSavings(this.getTimeZone()) / GeoLocation.HOUR_NANOS).toString()}`);\r\n  }\r\n\r\n  /**\r\n   * An implementation of the {@link java.lang.Object#clone()} method that creates a <a\r\n   * href=\"https://en.wikipedia.org/wiki/Object_copy#Deep_copy\">deep copy</a> of the object.\r\n   * <b>Note:</b> If the {@link java.util.TimeZone} in the clone will be changed from the original, it is critical\r\n   * that {@link AstronomicalCalendar#getCalendar()}.\r\n   * {@link java.util.Calendar#setTimeZone(TimeZone) setTimeZone(TimeZone)} is called after cloning in order for the\r\n   * AstronomicalCalendar to output times in the expected offset.\r\n   *\r\n   * @see java.lang.Object#clone()\r\n   * @since 1.1\r\n   */\r\n  public clone(): GeoLocation {\r\n    return JSON.parse(JSON.stringify(this));\r\n  }\r\n}\r\n","import { GeoLocation } from './GeoLocation';\r\nimport { MathUtils } from '../polyfills/Utils';\r\nimport { UnsupportedError } from '../polyfills/errors';\r\nimport { Temporal } from 'temporal-polyfill'\r\n\r\n/**\r\n * An abstract class that all sun time calculating classes extend. This allows the algorithm used to be changed at\r\n * runtime, easily allowing comparison the results of using different algorithms.\r\n * TODO: Consider methods that would allow atmospheric modeling. This can currently be adjusted by {@link\r\n  * #setRefraction(double) setting the refraction}.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2020\r\n */\r\nexport abstract class AstronomicalCalculator {\r\n  /**\r\n   * The commonly used average solar refraction. Calendrical Calculations lists a more accurate global average of\r\n   * 34.478885263888294\r\n   *\r\n   * @see #getRefraction()\r\n   */\r\n  private refraction: number = 34 / 60;\r\n  // private double refraction = 34.478885263888294 / 60d;\r\n\r\n  /**\r\n   * The commonly used average solar radius in minutes of a degree.\r\n   *\r\n   * @see #getSolarRadius()\r\n   */\r\n  private solarRadius: number = 16 / 60;\r\n\r\n  /**\r\n   * The commonly used average earth radius in KM. At this time, this only affects elevation adjustment and not the\r\n   * sunrise and sunset calculations. The value currently defaults to 6356.9 KM.\r\n   *\r\n   * @see #getEarthRadius()\r\n   * @see #setEarthRadius(double)\r\n   */\r\n  private earthRadius: number = 6356.9; // in KM\r\n\r\n  /**\r\n   * A method that returns the earth radius in KM. The value currently defaults to 6356.9 KM if not set.\r\n   *\r\n   * @return the earthRadius the earth radius in KM.\r\n   */\r\n  public getEarthRadius(): number {\r\n    return this.earthRadius;\r\n  }\r\n\r\n  /**\r\n   * A method that allows setting the earth's radius.\r\n   *\r\n   * @param earthRadius\r\n   *            the earthRadius to set in KM\r\n   */\r\n  public setEarthRadius(earthRadius: number): void {\r\n    this.earthRadius = earthRadius;\r\n  }\r\n\r\n  /**\r\n   * The zenith of astronomical sunrise and sunset. The sun is 90&deg; from the vertical 0&deg;\r\n   */\r\n  private static readonly GEOMETRIC_ZENITH: number = 90;\r\n\r\n  /**\r\n   * Returns the default class for calculating sunrise and sunset. This is currently the {@link NOAACalculator},\r\n   * but this may change.\r\n   *\r\n   * @return AstronomicalCalculator the default class for calculating sunrise and sunset. In the current\r\n   *         implementation the default calculator returned is the {@link NOAACalculator}.\r\n   * @deprecated This depends on a circular dependency. Use <pre>new NOAACalculator()</pre> instead\r\n   */\r\n  public static getDefault(): void {\r\n    throw new UnsupportedError('This method is deprecated, due to the fact that it depends on a circular dependency. '\r\n      + 'Use `new NOAACalculator()` instead.');\r\n  }\r\n\r\n  /**\r\n   * Returns the name of the algorithm.\r\n   *\r\n   * @return the descriptive name of the algorithm.\r\n   */\r\n  public abstract getCalculatorName(): string;\r\n\r\n  /**\r\n   * Setter method for the descriptive name of the calculator. This will typically not have to be set\r\n   *\r\n   * @param calculatorName\r\n   *            descriptive name of the algorithm.\r\n   */\r\n\r\n  /**\r\n   * A method that calculates UTC sunrise as well as any time based on an angle above or below sunrise. This abstract\r\n   * method is implemented by the classes that extend this class.\r\n   *\r\n   * @param calendar\r\n   *            Used to calculate day of year.\r\n   * @param geoLocation\r\n   *            The location information used for astronomical calculating sun times.\r\n   * @param zenith\r\n   *            the azimuth below the vertical zenith of 90 degrees. for sunrise typically the {@link #adjustZenith\r\n     *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link #adjustZenith adjusts}\r\n   *            this slightly to account for solar refraction and the sun's radius. Another example would be\r\n   *            {@link AstronomicalCalendar#getBeginNauticalTwilight()} that passes\r\n   *            {@link AstronomicalCalendar#NAUTICAL_ZENITH} to this method.\r\n   * @param adjustForElevation\r\n   *            Should the time be adjusted for elevation\r\n   * @return The UTC time of sunrise in 24 hour format. 5:45:00 AM will return 5.75.0. If an error was encountered in\r\n   *         the calculation (expected behavior for some locations such as near the poles,\r\n   *         {@link java.lang.Double#NaN} will be returned.\r\n   * @see #getElevationAdjustment(double)\r\n   */\r\n  public abstract getUTCSunrise(date: Temporal.PlainDate, geoLocation: GeoLocation, zenith: number,\r\n      adjustForElevation: boolean): number; // eslint-disable-line @typescript-eslint/indent\r\n\r\n  /**\r\n   * A method that calculates UTC sunset as well as any time based on an angle above or below sunset. This abstract\r\n   * method is implemented by the classes that extend this class.\r\n   *\r\n   * @param calendar\r\n   *            Used to calculate day of year.\r\n   * @param geoLocation\r\n   *            The location information used for astronomical calculating sun times.\r\n   * @param zenith\r\n   *            the azimuth below the vertical zenith of 90&deg;. For sunset typically the {@link #adjustZenith\r\n   *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link #adjustZenith adjusts}\r\n   *            this slightly to account for solar refraction and the sun's radius. Another example would be\r\n   *            {@link AstronomicalCalendar#getEndNauticalTwilight()} that passes\r\n   *            {@link AstronomicalCalendar#NAUTICAL_ZENITH} to this method.\r\n   * @param adjustForElevation\r\n   *            Should the time be adjusted for elevation\r\n   * @return The UTC time of sunset in 24 hour format. 5:45:00 AM will return 5.75.0. If an error was encountered in\r\n   *         the calculation (expected behavior for some locations such as near the poles,\r\n   *         {@link java.lang.Double#NaN} will be returned.\r\n   * @see #getElevationAdjustment(double)\r\n   */\r\n  public abstract getUTCSunset(date: Temporal.PlainDate, geoLocation: GeoLocation, zenith: number, adjustForElevation: boolean): number;\r\n\r\n  /**\r\n\t * Return <a href=\"https://en.wikipedia.org/wiki/Noon#Solar_noon\">solar noon</a> (UTC) for the given day at the\r\n\t * given location on earth. The the {@link com.kosherjava.zmanim.util.NOAACalculator} implementation calculates\r\n\t * true solar noon, while the {@link com.kosherjava.zmanim.util.SunTimesCalculator} approximates it, calculating\r\n\t * the time as halfway between sunrise and sunset.\r\n\t * \r\n\t * @param calendar\r\n\t *            Used to calculate day of year.\r\n\t * @param geoLocation\r\n\t *            The location information used for astronomical calculating sun times.         \r\n\t * \r\n\t * @return the time in minutes from zero UTC\r\n\t */\r\n  public abstract getUTCNoon(calendar: Temporal.PlainDate, geoLocation: GeoLocation): number;\r\n\r\n  /**\r\n   * Method to return the adjustment to the zenith required to account for the elevation. Since a person at a higher\r\n   * elevation can see farther below the horizon, the calculation for sunrise / sunset is calculated below the horizon\r\n   * used at sea level. This is only used for sunrise and sunset and not times before or after it such as\r\n   * {@link AstronomicalCalendar#getBeginNauticalTwilight() nautical twilight} since those\r\n   * calculations are based on the level of available light at the given dip below the horizon, something that is not\r\n   * affected by elevation, the adjustment should only made if the zenith == 90&deg; {@link #adjustZenith adjusted}\r\n   * for refraction and solar radius. The algorithm used is\r\n   *\r\n   * <pre>\r\n   * elevationAdjustment = Math.toDegrees(Math.acos(earthRadiusInMeters / (earthRadiusInMeters + elevationMeters)));\r\n   * </pre>\r\n   *\r\n   * The source of this algorithm is <a href=\"http://www.calendarists.com\">Calendrical Calculations</a> by Edward M.\r\n   * Reingold and Nachum Dershowitz. An alternate algorithm that produces an almost identical (but not accurate)\r\n   * result found in Ma'aglay Tzedek by Moishe Kosower and other sources is:\r\n   *\r\n   * <pre>\r\n   * elevationAdjustment = 0.0347 * Math.sqrt(elevationMeters);\r\n   * </pre>\r\n   *\r\n   * @param elevation\r\n   *            elevation in Meters.\r\n   * @return the adjusted zenith\r\n   */\r\n  public getElevationAdjustment(elevation: number): number {\r\n    // double elevationAdjustment = 0.0347 * Math.sqrt(elevation);\r\n    const elevationAdjustment: number = MathUtils.radiansToDegrees(Math.acos(this.earthRadius / (this.earthRadius + (elevation / 1000))));\r\n    return elevationAdjustment;\r\n  }\r\n\r\n  /**\r\n   * Adjusts the zenith of astronomical sunrise and sunset to account for solar refraction, solar radius and\r\n   * elevation. The value for Sun's zenith and true rise/set Zenith (used in this class and subclasses) is the angle\r\n   * that the center of the Sun makes to a line perpendicular to the Earth's surface. If the Sun were a point and the\r\n   * Earth were without an atmosphere, true sunset and sunrise would correspond to a 90&deg; zenith. Because the Sun\r\n   * is not a point, and because the atmosphere refracts light, this 90&deg; zenith does not, in fact, correspond to\r\n   * true sunset or sunrise, instead the centre of the Sun's disk must lie just below the horizon for the upper edge\r\n   * to be obscured. This means that a zenith of just above 90&deg; must be used. The Sun subtends an angle of 16\r\n   * minutes of arc (this can be changed via the {@link #setSolarRadius(double)} method , and atmospheric refraction\r\n   * accounts for 34 minutes or so (this can be changed via the {@link #setRefraction(double)} method), giving a total\r\n   * of 50 arcminutes. The total value for ZENITH is 90+(5/6) or 90.8333333&deg; for true sunrise/sunset. Since a\r\n   * person at an elevation can see blow the horizon of a person at sea level, this will also adjust the zenith to\r\n   * account for elevation if available. Note that this will only adjust the value if the zenith is exactly 90 degrees.\r\n   * For values below and above this no correction is done. As an example, astronomical twilight is when the sun is\r\n   * 18&deg; below the horizon or {@link AstronomicalCalendar#ASTRONOMICAL_ZENITH 108&deg;\r\n   * below the zenith}. This is traditionally calculated with none of the above mentioned adjustments. The same goes\r\n   * for various <em>tzais</em> and <em>alos</em> times such as the\r\n   * {@link ZmanimCalendar#ZENITH_16_POINT_1 16.1&deg;} dip used in\r\n   * {@link ComplexZmanimCalendar#getAlos16Point1Degrees()}.\r\n   *\r\n   * @param zenith\r\n   *            the azimuth below the vertical zenith of 90&deg;. For sunset typically the {@link #adjustZenith\r\n   *            zenith} used for the calculation uses geometric zenith of 90&deg; and {@link #adjustZenith adjusts}\r\n   *            this slightly to account for solar refraction and the sun's radius. Another example would be\r\n   *            {@link AstronomicalCalendar#getEndNauticalTwilight()} that passes\r\n   *            {@link AstronomicalCalendar#NAUTICAL_ZENITH} to this method.\r\n   * @param elevation\r\n   *            elevation in Meters.\r\n   * @return The zenith adjusted to include the {@link #getSolarRadius sun's radius}, {@link #getRefraction\r\n     *         refraction} and {@link #getElevationAdjustment elevation} adjustment. This will only be adjusted for\r\n   *         sunrise and sunset (if the zenith == 90&deg;)\r\n   * @see #getElevationAdjustment(double)\r\n   */\r\n  public adjustZenith(zenith: number, elevation: number) {\r\n    let adjustedZenith: number = zenith;\r\n    if (zenith === AstronomicalCalculator.GEOMETRIC_ZENITH) { // only adjust if it is exactly sunrise or sunset\r\n      adjustedZenith = zenith + (this.getSolarRadius() + this.getRefraction() + this.getElevationAdjustment(elevation));\r\n    }\r\n    return adjustedZenith;\r\n  }\r\n\r\n  /**\r\n   * Method to get the refraction value to be used when calculating sunrise and sunset. The default value is 34 arc\r\n   * minutes. The <a href=\"http://emr.cs.iit.edu/home/reingold/calendar-book/second-edition/errata.pdf\">Errata and\r\n   * Notes for Calendrical Calculations: The Millennium Edition</a> by Edward M. Reingold and Nachum Dershowitz lists\r\n   * the actual average refraction value as 34.478885263888294 or approximately 34' 29\". The refraction value as well\r\n   * as the solarRadius and elevation adjustment are added to the zenith used to calculate sunrise and sunset.\r\n   *\r\n   * @return The refraction in arc minutes.\r\n   */\r\n  public getRefraction(): number {\r\n    return this.refraction;\r\n  }\r\n\r\n  /**\r\n   * A method to allow overriding the default refraction of the calculator.\r\n   * @todo At some point in the future, an AtmosphericModel or Refraction object that models the atmosphere of different\r\n   * locations might be used for increased accuracy.\r\n   *\r\n   * @param refraction\r\n   *            The refraction in arc minutes.\r\n   * @see #getRefraction()\r\n   */\r\n  public setRefraction(refraction: number): void {\r\n    this.refraction = refraction;\r\n  }\r\n\r\n  /**\r\n   * Method to get the sun's radius. The default value is 16 arc minutes. The sun's radius as it appears from earth is\r\n   * almost universally given as 16 arc minutes but in fact it differs by the time of the year. At the <a\r\n   * href=\"https://en.wikipedia.org/wiki/Perihelion\">perihelion</a> it has an apparent radius of 16.293, while at the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Aphelion\">aphelion</a> it has an apparent radius of 15.755. There is little\r\n   * affect for most location, but at high and low latitudes the difference becomes more apparent. My Calculations for\r\n   * the difference at the location of the <a href=\"http://www.rog.nmm.ac.uk\">Royal Observatory, Greenwich </a> show\r\n   * only a 4.494 second difference between the perihelion and aphelion radii, but moving into the arctic circle the\r\n   * difference becomes more noticeable. Tests for Tromso, Norway (latitude 69.672312, longitude 19.049787) show that\r\n   * on May 17, the rise of the midnight sun, a 2 minute 23 second difference is observed between the perihelion and\r\n   * aphelion radii using the USNO algorithm, but only 1 minute and 6 seconds difference using the NOAA algorithm.\r\n   * Areas farther north show an even greater difference. Note that these test are not real valid test cases because\r\n   * they show the extreme difference on days that are not the perihelion or aphelion, but are shown for illustrative\r\n   * purposes only.\r\n   *\r\n   * @return The sun's radius in arc minutes.\r\n   */\r\n  public getSolarRadius(): number {\r\n    return this.solarRadius;\r\n  }\r\n\r\n  /**\r\n   * Method to set the sun's radius.\r\n   *\r\n   * @param solarRadius\r\n   *            The sun's radius in arc minutes.\r\n   * @see #getSolarRadius()\r\n   */\r\n  public setSolarRadius(solarRadius: number): void {\r\n    this.solarRadius = solarRadius;\r\n  }\r\n\r\n  /**\r\n   * @see java.lang.Object#clone()\r\n   * @since 1.1\r\n   */\r\n  public clone(): AstronomicalCalculator {\r\n    return JSON.parse(JSON.stringify(this));\r\n  }\r\n\r\n  public equals(object: object) {\r\n    return this === object;\r\n  }\r\n}\r\n","import { GeoLocation } from './GeoLocation';\r\nimport { AstronomicalCalculator } from './AstronomicalCalculator';\r\nimport { MathUtils } from '../polyfills/Utils';\r\nimport { Temporal } from 'temporal-polyfill'\r\n\r\n/**\r\n * Implementation of sunrise and sunset methods to calculate astronomical times based on the <a\r\n * href=\"http://noaa.gov\">NOAA</a> algorithm. This calculator uses the Java algorithm based on the implementation by <a\r\n * href=\"http://noaa.gov\">NOAA - National Oceanic and Atmospheric Administration</a>'s <a href =\r\n * \"http://www.srrb.noaa.gov/highlights/sunrise/sunrise.html\">Surface Radiation Research Branch</a>. NOAA's <a\r\n * href=\"http://www.srrb.noaa.gov/highlights/sunrise/solareqns.PDF\">implementation</a> is based on equations from <a\r\n * href=\"http://www.willbell.com/math/mc1.htm\">Astronomical Algorithms</a> by <a\r\n * href=\"https://en.wikipedia.org/wiki/Jean_Meeus\">Jean Meeus</a>. Added to the algorithm is an adjustment of the zenith\r\n * to account for elevation. The algorithm can be found in the <a\r\n * href=\"https://en.wikipedia.org/wiki/Sunrise_equation\">Wikipedia Sunrise Equation</a> article.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\r\n */\r\nexport class NOAACalculator extends AstronomicalCalculator {\r\n  /**\r\n   * The <a href=\"https://en.wikipedia.org/wiki/Julian_day\">Julian day</a> of January 1, 2000\r\n   */\r\n  private static readonly JULIAN_DAY_JAN_1_2000: number = 2451545;\r\n\r\n  /**\r\n   * Julian days per century\r\n   */\r\n  private static readonly JULIAN_DAYS_PER_CENTURY: number = 36525;\r\n\r\n  /**\r\n   * @see AstronomicalCalculator#getCalculatorName()\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public getCalculatorName(): string {\r\n    return 'US National Oceanic and Atmospheric Administration Algorithm';\r\n  }\r\n\r\n  /**\r\n   * @see AstronomicalCalculator#getUTCSunrise(Calendar, GeoLocation, double, boolean)\r\n   */\r\n  public getUTCSunrise(date: Temporal.PlainDate, geoLocation: GeoLocation, zenith: number, adjustForElevation: boolean): number {\r\n    const elevation: number = adjustForElevation ? geoLocation.getElevation() : 0;\r\n    const adjustedZenith: number = this.adjustZenith(zenith, elevation);\r\n\r\n    let sunrise: number = NOAACalculator.getSunriseUTC(NOAACalculator.getJulianDay(date), geoLocation.getLatitude(), -geoLocation.getLongitude(),\r\n      adjustedZenith);\r\n    sunrise = sunrise / 60;\r\n\r\n    // ensure that the time is >= 0 and < 24\r\n    while (sunrise < 0) {\r\n      sunrise += 24;\r\n    }\r\n    while (sunrise >= 24) {\r\n      sunrise -= 24;\r\n    }\r\n    return sunrise;\r\n  }\r\n\r\n  /**\r\n   * @see AstronomicalCalculator#getUTCSunset(Calendar, GeoLocation, double, boolean)\r\n   */\r\n  public getUTCSunset(date: Temporal.PlainDate, geoLocation: GeoLocation, zenith: number, adjustForElevation: boolean): number {\r\n    const elevation: number = adjustForElevation ? geoLocation.getElevation() : 0;\r\n    const adjustedZenith: number = this.adjustZenith(zenith, elevation);\r\n\r\n    let sunset: number = NOAACalculator.getSunsetUTC(NOAACalculator.getJulianDay(date), geoLocation.getLatitude(), -geoLocation.getLongitude(),\r\n      adjustedZenith);\r\n    sunset = sunset / 60;\r\n\r\n    // ensure that the time is >= 0 and < 24\r\n    while (sunset < 0) {\r\n      sunset += 24;\r\n    }\r\n    while (sunset >= 24) {\r\n      sunset -= 24;\r\n    }\r\n    return sunset;\r\n  }\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Julian_day\">Julian day</a> from a Java Calendar\r\n   *\r\n   * @param calendar\r\n   *            The Java Calendar\r\n   * @return the Julian day corresponding to the date Note: Number is returned for start of day. Fractional days\r\n   *         should be added later.\r\n   */\r\n  private static getJulianDay(date: Temporal.PlainDate): number {\r\n    let { year, month } = date;\r\n    const { day } = date;\r\n    if (month <= 2) {\r\n      year -= 1;\r\n      month += 12;\r\n    }\r\n    const a: number = Math.trunc(year / 100);\r\n    const b: number = Math.trunc(2 - a + a / 4);\r\n\r\n    return Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\r\n  }\r\n\r\n  /**\r\n   * Convert <a href=\"https://en.wikipedia.org/wiki/Julian_day\">Julian day</a> to centuries since J2000.0.\r\n   *\r\n   * @param julianDay\r\n   *            the Julian Day to convert\r\n   * @return the centuries since 2000 Julian corresponding to the Julian Day\r\n   */\r\n  private static getJulianCenturiesFromJulianDay(julianDay: number): number {\r\n    return (julianDay - NOAACalculator.JULIAN_DAY_JAN_1_2000) / NOAACalculator.JULIAN_DAYS_PER_CENTURY;\r\n  }\r\n\r\n  /**\r\n   * Convert centuries since J2000.0 to <a href=\"https://en.wikipedia.org/wiki/Julian_day\">Julian day</a>.\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return the Julian Day corresponding to the Julian centuries passed in\r\n   */\r\n  private static getJulianDayFromJulianCenturies(julianCenturies: number): number {\r\n    return julianCenturies * NOAACalculator.JULIAN_DAYS_PER_CENTURY + NOAACalculator.JULIAN_DAY_JAN_1_2000;\r\n  }\r\n\r\n  /**\r\n   * Returns the Geometric <a href=\"https://en.wikipedia.org/wiki/Mean_longitude\">Mean Longitude</a> of the Sun.\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return the Geometric Mean Longitude of the Sun in degrees\r\n   */\r\n  private static getSunGeometricMeanLongitude(julianCenturies: number): number {\r\n    let longitude: number = 280.46646 + julianCenturies * (36000.76983 + 0.0003032 * julianCenturies);\r\n    while (longitude > 360) {\r\n      longitude -= 360;\r\n    }\r\n    while (longitude < 0) {\r\n      longitude += 360;\r\n    }\r\n\r\n    return longitude; // in degrees\r\n  }\r\n\r\n  /**\r\n   * Returns the Geometric <a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">Mean Anomaly</a> of the Sun.\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return the Geometric Mean Anomaly of the Sun in degrees\r\n   */\r\n  private static getSunGeometricMeanAnomaly(julianCenturies: number): number {\r\n    return 357.52911 + julianCenturies * (35999.05029 - 0.0001537 * julianCenturies); // in degrees\r\n  }\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Eccentricity_%28orbit%29\">eccentricity of earth's orbit</a>.\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return the unitless eccentricity\r\n   */\r\n  private static getEarthOrbitEccentricity(julianCenturies: number): number {\r\n    return 0.016708634 - julianCenturies * (0.000042037 + 0.0000001267 * julianCenturies); // unitless\r\n  }\r\n\r\n  /**\r\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Equation_of_the_center\">equation of center</a> for the sun.\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return the equation of center for the sun in degrees\r\n   */\r\n  private static getSunEquationOfCenter(julianCenturies: number): number {\r\n    const m: number = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\r\n\r\n    const mrad: number = MathUtils.degreesToRadians(m);\r\n    const sinm: number = Math.sin(mrad);\r\n    const sin2m: number = Math.sin(mrad + mrad);\r\n    const sin3m: number = Math.sin(mrad + mrad + mrad);\r\n\r\n    return sinm * (1.914602 - julianCenturies * (0.004817 + 0.000014 * julianCenturies)) + sin2m\r\n      * (0.019993 - 0.000101 * julianCenturies) + sin3m * 0.000289; // in degrees\r\n  }\r\n\r\n  /**\r\n   * Return the true longitude of the sun\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return the sun's true longitude in degrees\r\n   */\r\n  private static getSunTrueLongitude(julianCenturies: number): number {\r\n    const sunLongitude: number = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\r\n    const center: number = NOAACalculator.getSunEquationOfCenter(julianCenturies);\r\n\r\n    return sunLongitude + center; // in degrees\r\n  }\r\n\r\n  // /**\r\n  // * Returns the <a href=\"https://en.wikipedia.org/wiki/True_anomaly\">true anamoly</a> of the sun.\r\n  // *\r\n  // * @param julianCenturies\r\n  // * the number of Julian centuries since J2000.0\r\n  // * @return the sun's true anamoly in degrees\r\n  // */\r\n  // private static double getSunTrueAnomaly(double julianCenturies) {\r\n  // double meanAnomaly = getSunGeometricMeanAnomaly(julianCenturies);\r\n  // double equationOfCenter = getSunEquationOfCenter(julianCenturies);\r\n  //\r\n  // return meanAnomaly + equationOfCenter; // in degrees\r\n  // }\r\n\r\n  /**\r\n   * Return the apparent longitude of the sun\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return sun's apparent longitude in degrees\r\n   */\r\n  private static getSunApparentLongitude(julianCenturies: number): number {\r\n    const sunTrueLongitude: number = NOAACalculator.getSunTrueLongitude(julianCenturies);\r\n\r\n    const omega: number = 125.04 - 1934.136 * julianCenturies;\r\n    const lambda: number = sunTrueLongitude - 0.00569 - 0.00478 * Math.sin(MathUtils.degreesToRadians(omega));\r\n    return lambda; // in degrees\r\n  }\r\n\r\n  /**\r\n   * Returns the mean <a href=\"https://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial tilt).\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return the mean obliquity in degrees\r\n   */\r\n  private static getMeanObliquityOfEcliptic(julianCenturies: number): number {\r\n    const seconds: number = 21.448 - julianCenturies\r\n      * (46.8150 + julianCenturies * (0.00059 - julianCenturies * (0.001813)));\r\n    return 23 + (26 + (seconds / 60)) / 60; // in degrees\r\n  }\r\n\r\n  /**\r\n   * Returns the corrected <a href=\"https://en.wikipedia.org/wiki/Axial_tilt\">obliquity of the ecliptic</a> (Axial\r\n   * tilt).\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return the corrected obliquity in degrees\r\n   */\r\n  private static getObliquityCorrection(julianCenturies: number): number {\r\n    const obliquityOfEcliptic: number = NOAACalculator.getMeanObliquityOfEcliptic(julianCenturies);\r\n\r\n    const omega: number = 125.04 - 1934.136 * julianCenturies;\r\n    return obliquityOfEcliptic + 0.00256 * Math.cos(MathUtils.degreesToRadians(omega)); // in degrees\r\n  }\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Declination\">declination</a> of the sun.\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return\r\n   *            the sun's declination in degrees\r\n   */\r\n  private static getSunDeclination(julianCenturies: number): number {\r\n    const obliquityCorrection: number = NOAACalculator.getObliquityCorrection(julianCenturies);\r\n    const lambda: number = NOAACalculator.getSunApparentLongitude(julianCenturies);\r\n\r\n    const sint: number = Math.sin(MathUtils.degreesToRadians(obliquityCorrection)) * Math.sin(MathUtils.degreesToRadians(lambda));\r\n    const theta: number = MathUtils.radiansToDegrees(Math.asin(sint));\r\n    return theta; // in degrees\r\n  }\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Equation_of_time\">Equation of Time</a> - the difference between\r\n   * true solar time and mean solar time\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @return equation of time in minutes of time\r\n   */\r\n  private static getEquationOfTime(julianCenturies: number): number {\r\n    const epsilon: number = NOAACalculator.getObliquityCorrection(julianCenturies);\r\n    const geomMeanLongSun: number = NOAACalculator.getSunGeometricMeanLongitude(julianCenturies);\r\n    const eccentricityEarthOrbit: number = NOAACalculator.getEarthOrbitEccentricity(julianCenturies);\r\n    const geomMeanAnomalySun: number = NOAACalculator.getSunGeometricMeanAnomaly(julianCenturies);\r\n\r\n    let y: number = Math.tan(MathUtils.degreesToRadians(epsilon) / 2);\r\n    y *= y;\r\n\r\n    const sin2l0: number = Math.sin(2 * MathUtils.degreesToRadians(geomMeanLongSun));\r\n    const sinm: number = Math.sin(MathUtils.degreesToRadians(geomMeanAnomalySun));\r\n    const cos2l0: number = Math.cos(2 * MathUtils.degreesToRadians(geomMeanLongSun));\r\n    const sin4l0: number = Math.sin(4 * MathUtils.degreesToRadians(geomMeanLongSun));\r\n    const sin2m: number = Math.sin(2 * MathUtils.degreesToRadians(geomMeanAnomalySun));\r\n\r\n    const equationOfTime: number = y * sin2l0 - 2 * eccentricityEarthOrbit * sinm + 4 * eccentricityEarthOrbit * y\r\n      * sinm * cos2l0 - 0.5 * y * y * sin4l0 - 1.25 * eccentricityEarthOrbit * eccentricityEarthOrbit * sin2m;\r\n    return MathUtils.radiansToDegrees(equationOfTime) * 4; // in minutes of time\r\n  }\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun at sunrise for the\r\n   * latitude.\r\n   *\r\n   * @param lat\r\n   *            , the latitude of observer in degrees\r\n   * @param solarDec\r\n   *            the declination angle of sun in degrees\r\n   * @param zenith\r\n   *            the zenith\r\n   * @return hour angle of sunrise in radians\r\n   */\r\n  private static getSunHourAngleAtSunrise(lat: number, solarDec: number, zenith: number): number {\r\n    const latRad: number = MathUtils.degreesToRadians(lat);\r\n    const sdRad: number = MathUtils.degreesToRadians(solarDec);\r\n\r\n    return (Math.acos(Math.cos(MathUtils.degreesToRadians(zenith)) / (Math.cos(latRad) * Math.cos(sdRad))\r\n      - Math.tan(latRad) * Math.tan(sdRad))); // in radians\r\n  }\r\n\r\n  /**\r\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Hour_angle\">hour angle</a> of the sun at sunset for the\r\n   * latitude. TODO: use - {@link #getSunHourAngleAtSunrise(double, double, double)} implementation to avoid\r\n   * duplication of code.\r\n   *\r\n   * @param lat\r\n   *            the latitude of observer in degrees\r\n   * @param solarDec\r\n   *            the declination angle of sun in degrees\r\n   * @param zenith\r\n   *            the zenith\r\n   * @return the hour angle of sunset in radians\r\n   */\r\n  private static getSunHourAngleAtSunset(lat: number, solarDec: number, zenith: number): number {\r\n    const latRad: number = MathUtils.degreesToRadians(lat);\r\n    const sdRad: number = MathUtils.degreesToRadians(solarDec);\r\n\r\n    const hourAngle: number = (Math.acos(Math.cos(MathUtils.degreesToRadians(zenith)) / (Math.cos(latRad) * Math.cos(sdRad))\r\n      - Math.tan(latRad) * Math.tan(sdRad)));\r\n    return -hourAngle; // in radians\r\n  }\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Elevation</a> for the\r\n   * horizontal coordinate system at the given location at the given time. Can be negative if the sun is below the\r\n   * horizon. Not corrected for altitude.\r\n   *\r\n   * @param cal\r\n   *            time of calculation\r\n   * @param lat\r\n   *            latitude of location for calculation\r\n   * @param lon\r\n   *            longitude of location for calculation\r\n   * @return solar elevation in degrees - horizon is 0 degrees, civil twilight is -6 degrees\r\n   */\r\n\r\n  /*public static getSolarElevation(date: Temporal.PlainDate, lat: number, lon: number): number {\r\n    const julianDay: number = NOAACalculator.getJulianDay(date);\r\n    const julianCenturies: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\r\n\r\n    const equationOfTime: number = NOAACalculator.getEquationOfTime(julianCenturies);\r\n\r\n    let longitude: number = (date.hour + 12) + (date.minute + equationOfTime + date.second / 60) / 60;\r\n\r\n    longitude = -(longitude * 360 / 24) % 360;\r\n    const hourAngleRad: number = MathUtils.degreesToRadians(lon - longitude);\r\n    const declination: number = NOAACalculator.getSunDeclination(julianCenturies);\r\n    const decRad: number = MathUtils.degreesToRadians(declination);\r\n    const latRad: number = MathUtils.degreesToRadians(lat);\r\n    return MathUtils.radiansToDegrees(Math.asin((Math.sin(latRad) * Math.sin(decRad))\r\n      + (Math.cos(latRad) * Math.cos(decRad) * Math.cos(hourAngleRad))));\r\n  } */\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Celestial_coordinate_system\">Solar Azimuth</a> for the\r\n   * horizontal coordinate system at the given location at the given time. Not corrected for altitude. True south is 0\r\n   * degrees.\r\n   *\r\n   * @param cal\r\n   *            time of calculation\r\n   * @param latitude\r\n   *            latitude of location for calculation\r\n   * @param lon\r\n   *            longitude of location for calculation\r\n   * @return FIXME\r\n   */\r\n\r\n  /* public static getSolarAzimuth(date: Temporal.PlainDate, latitude: number, lon: number): number {\r\n    const julianDay: number = NOAACalculator.getJulianDay(date);\r\n    const julianCenturies: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\r\n\r\n    const equationOfTime: number = NOAACalculator.getEquationOfTime(julianCenturies);\r\n\r\n    let longitude: number = (date.hour + 12) + (date.minute + equationOfTime + date.second / 60) / 60;\r\n\r\n    longitude = -(longitude * 360 / 24) % 360;\r\n    const hourAngleRad: number = MathUtils.degreesToRadians(lon - longitude);\r\n    const declination: number = NOAACalculator.getSunDeclination(julianCenturies);\r\n    const decRad: number = MathUtils.degreesToRadians(declination);\r\n    const latRad: number = MathUtils.degreesToRadians(latitude);\r\n\r\n    return MathUtils.radiansToDegrees(Math.atan(Math.sin(hourAngleRad)\r\n      / ((Math.cos(hourAngleRad) * Math.sin(latRad)) - (Math.tan(decRad) * Math.cos(latRad))))) + 180;\r\n  } */\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\r\n   * of sunrise for the given day at the given location on earth\r\n   *\r\n   * @param julianDay\r\n   *            the Julian day\r\n   * @param latitude\r\n   *            the latitude of observer in degrees\r\n   * @param longitude\r\n   *            the longitude of observer in degrees\r\n   * @param zenith\r\n   *            the zenith\r\n   * @return the time in minutes from zero UTC\r\n   */\r\n  private static getSunriseUTC(julianDay: number, latitude: number, longitude: number, zenith: number): number {\r\n    const julianCenturies: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\r\n\r\n    // Find the time of solar noon at the location, and use that declination. This is better than start of the\r\n    // Julian day\r\n\r\n    const noonmin: number = NOAACalculator.getSolarNoonUTC(julianCenturies, longitude);\r\n    const tnoon: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440);\r\n\r\n    // First pass to approximate sunrise (using solar noon)\r\n\r\n    let eqTime: number = NOAACalculator.getEquationOfTime(tnoon);\r\n    let solarDec: number = NOAACalculator.getSunDeclination(tnoon);\r\n    let hourAngle: number = NOAACalculator.getSunHourAngleAtSunrise(latitude, solarDec, zenith);\r\n\r\n    let delta: number = longitude - MathUtils.radiansToDegrees(hourAngle);\r\n    let timeDiff: number = 4 * delta; // in minutes of time\r\n    let timeUTC: number = 720 + timeDiff - eqTime; // in minutes\r\n\r\n    // Second pass includes fractional Julian Day in gamma calc\r\n\r\n    const newt: number = NOAACalculator.getJulianCenturiesFromJulianDay(\r\n      NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + timeUTC / 1440);\r\n    eqTime = NOAACalculator.getEquationOfTime(newt);\r\n    solarDec = NOAACalculator.getSunDeclination(newt);\r\n    hourAngle = NOAACalculator.getSunHourAngleAtSunrise(latitude, solarDec, zenith);\r\n    delta = longitude - MathUtils.radiansToDegrees(hourAngle);\r\n    timeDiff = 4 * delta;\r\n    timeUTC = 720 + timeDiff - eqTime; // in minutes\r\n    return timeUTC;\r\n  }\r\n\r\n  public getUTCNoon(calendar: Temporal.PlainDate, geoLocation: GeoLocation) {\r\n    const julianDay = NOAACalculator.getJulianDay(calendar);\r\n    const julianCenturies = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\r\n\t\t\r\n    let noon = NOAACalculator.getSolarNoonUTC(julianCenturies, -geoLocation.getLongitude());\r\n    noon = noon / 60;\r\n\r\n    // ensure that the time is >= 0 and < 24\r\n    while (noon < 0.0) {\r\n      noon += 24.0;\r\n    }\r\n    while (noon >= 24.0) {\r\n      noon -= 24.0;\r\n    }\r\n    return noon;\r\n  }\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\r\n   * of <a href=\"https://en.wikipedia.org/wiki/Noon#Solar_noon\">solar noon</a> for the given day at the given location\r\n   * on earth.\r\n   *\r\n   * @param julianCenturies\r\n   *            the number of Julian centuries since J2000.0\r\n   * @param longitude\r\n   *            the longitude of observer in degrees\r\n   * @return the time in minutes from zero UTC\r\n   */\r\n  private static getSolarNoonUTC(julianCenturies: number, longitude: number): number {\r\n    // First pass uses approximate solar noon to calculate eqtime\r\n    const tnoon: number = NOAACalculator.getJulianCenturiesFromJulianDay(\r\n      NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + longitude / 360);\r\n    let eqTime: number = NOAACalculator.getEquationOfTime(tnoon);\r\n    const solNoonUTC: number = 720 + (longitude * 4) - eqTime; // min\r\n\r\n    const newt: number = NOAACalculator.getJulianCenturiesFromJulianDay(\r\n      NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) - 0.5 + solNoonUTC / 1440);\r\n\r\n    eqTime = NOAACalculator.getEquationOfTime(newt);\r\n    return 720 + (longitude * 4) - eqTime; // min\r\n  }\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\r\n   * of sunset for the given day at the given location on earth\r\n   *\r\n   * @param julianDay\r\n   *            the Julian day\r\n   * @param latitude\r\n   *            the latitude of observer in degrees\r\n   * @param longitude\r\n   *            : longitude of observer in degrees\r\n   * @param zenith\r\n   *            the zenith\r\n   * @return the time in minutes from zero Universal Coordinated Time (UTC)\r\n   */\r\n  private static getSunsetUTC(julianDay: number, latitude: number, longitude: number, zenith: number): number {\r\n    const julianCenturies: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay);\r\n\r\n    // Find the time of solar noon at the location, and use that declination. This is better than start of the\r\n    // Julian day\r\n\r\n    const noonmin: number = NOAACalculator.getSolarNoonUTC(julianCenturies, longitude);\r\n    const tnoon: number = NOAACalculator.getJulianCenturiesFromJulianDay(julianDay + noonmin / 1440);\r\n\r\n    // First calculates sunrise and approx length of day\r\n\r\n    let eqTime: number = NOAACalculator.getEquationOfTime(tnoon);\r\n    let solarDec: number = NOAACalculator.getSunDeclination(tnoon);\r\n    let hourAngle: number = NOAACalculator.getSunHourAngleAtSunset(latitude, solarDec, zenith);\r\n\r\n    let delta: number = longitude - MathUtils.radiansToDegrees(hourAngle);\r\n    let timeDiff: number = 4 * delta;\r\n    let timeUTC: number = 720 + timeDiff - eqTime;\r\n\r\n    // Second pass includes fractional Julian Day in gamma calc\r\n\r\n    const newt: number = NOAACalculator.getJulianCenturiesFromJulianDay(\r\n      NOAACalculator.getJulianDayFromJulianCenturies(julianCenturies) + timeUTC / 1440);\r\n    eqTime = NOAACalculator.getEquationOfTime(newt);\r\n    solarDec = NOAACalculator.getSunDeclination(newt);\r\n    hourAngle = NOAACalculator.getSunHourAngleAtSunset(latitude, solarDec, zenith);\r\n\r\n    delta = longitude - MathUtils.radiansToDegrees(hourAngle);\r\n    timeDiff = 4 * delta;\r\n    timeUTC = 720 + timeDiff - eqTime; // in minutes\r\n    return timeUTC;\r\n  }\r\n}\r\n","import { Big } from 'big.js';\r\nimport { Temporal } from 'temporal-polyfill'\r\n\r\nimport { GeoLocation } from './util/GeoLocation';\r\nimport { AstronomicalCalculator } from './util/AstronomicalCalculator';\r\nimport { NOAACalculator } from './util/NOAACalculator';\r\nimport { IllegalArgumentException, UnsupportedError } from './polyfills/errors';\r\nimport { TimeZone } from './polyfills/Utils';\r\n\r\n/**\r\n * A Java calendar that calculates astronomical times such as {@link #getSunrise() sunrise} and {@link #getSunset()\r\n * sunset} times. This class contains a {@link #getCalendar() Calendar} and can therefore use the standard Calendar\r\n * functionality to change dates etc... The calculation engine used to calculate the astronomical times can be changed\r\n * to a different implementation by implementing the abstract {@link AstronomicalCalculator} and setting it with the\r\n * {@link #setAstronomicalCalculator(AstronomicalCalculator)}. A number of different calculation engine implementations\r\n * are included in the util package.\r\n * <b>Note:</b> There are times when the algorithms can't calculate proper values for sunrise, sunset and twilight. This\r\n * is usually caused by trying to calculate times for areas either very far North or South, where sunrise / sunset never\r\n * happen on that date. This is common when calculating twilight with a deep dip below the horizon for locations as far\r\n * south of the North Pole as London, in the northern hemisphere. The sun never reaches this dip at certain times of the\r\n * year. When the calculations encounter this condition a null will be returned when a\r\n * <code>{@link java.util.Date}</code> is expected and {@link Long#MIN_VALUE} when a <code>long</code> is expected. The\r\n * reason that <code>Exception</code>s are not thrown in these cases is because the lack of a rise/set or twilight is\r\n * not an exception, but an expected condition in many parts of the world.\r\n *\r\n * Here is a simple example of how to use the API to calculate sunrise.\r\n * First create the Calendar for the location you would like to calculate sunrise or sunset times for:\r\n *\r\n * <pre>\r\n * String locationName = &quot;Lakewood, NJ&quot;;\r\n * double latitude = 40.0828; // Lakewood, NJ\r\n * double longitude = -74.2094; // Lakewood, NJ\r\n * double elevation = 20; // optional elevation correction in Meters\r\n * // the String parameter in getTimeZone() has to be a valid timezone listed in\r\n * // {@link java.util.TimeZone#getAvailableIDs()}\r\n * TimeZone timeZone = TimeZone.getTimeZone(&quot;America/New_York&quot;);\r\n * GeoLocation location = new GeoLocation(locationName, latitude, longitude, elevation, timeZone);\r\n * AstronomicalCalendar ac = new AstronomicalCalendar(location);\r\n * </pre>\r\n *\r\n * To get the time of sunrise, first set the date you want (if not set, the date will default to today):\r\n *\r\n * <pre>\r\n * ac.getCalendar().set(Calendar.MONTH, Calendar.FEBRUARY);\r\n * ac.getCalendar().set(Calendar.DAY_OF_MONTH, 8);\r\n * Date sunrise = ac.getSunrise();\r\n * </pre>\r\n *\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2016\r\n */\r\nexport class AstronomicalCalendar {\r\n  /**\r\n   * 90&deg; below the vertical. Used as a basis for most calculations since the location of the sun is 90&deg; below\r\n   * the horizon at sunrise and sunset.\r\n   * <b>Note </b>: it is important to note that for sunrise and sunset the {@link AstronomicalCalculator#adjustZenith\r\n     * adjusted zenith} is required to account for the radius of the sun and refraction. The adjusted zenith should not\r\n   * be used for calculations above or below 90&deg; since they are usually calculated as an offset to 90&deg;.\r\n   */\r\n  public static readonly GEOMETRIC_ZENITH: number = 90;\r\n\r\n  /** Sun's zenith at civil twilight (96&deg;). */\r\n  public static readonly CIVIL_ZENITH: number = 96;\r\n\r\n  /** Sun's zenith at nautical twilight (102&deg;). */\r\n  public static readonly NAUTICAL_ZENITH: number = 102;\r\n\r\n  /** Sun's zenith at astronomical twilight (108&deg;). */\r\n  public static readonly ASTRONOMICAL_ZENITH: number = 108;\r\n\r\n  /** constant for milliseconds in a minute (60,000) */\r\n  public static readonly MINUTE_MILLIS: number = 60 * 1000;\r\n\r\n  /** constant for milliseconds in an hour (3,600,000) */\r\n  public static readonly HOUR_MILLIS: number = AstronomicalCalendar.MINUTE_MILLIS * 60;\r\n\r\n  /**\r\n   * The Java Calendar encapsulated by this class to track the current date used by the class\r\n   */\r\n  private date!: Temporal.PlainDate;\r\n\r\n  /**\r\n   * the {@link GeoLocation} used for calculations.\r\n   */\r\n  private geoLocation!: GeoLocation;\r\n\r\n  /**\r\n   * the internal {@link AstronomicalCalculator} used for calculating solar based times.\r\n   */\r\n  private astronomicalCalculator!: AstronomicalCalculator;\r\n\r\n  /**\r\n   * The getSunrise method Returns a <code>Date</code> representing the\r\n   * {@link AstronomicalCalculator#getElevationAdjustment(double) elevation adjusted} sunrise time. The zenith used\r\n   * for the calculation uses {@link #GEOMETRIC_ZENITH geometric zenith} of 90&deg; plus\r\n   * {@link AstronomicalCalculator#getElevationAdjustment(double)}. This is adjusted by the\r\n   * {@link AstronomicalCalculator} to add approximately 50/60 of a degree to account for 34 archminutes of refraction\r\n   * and 16 archminutes for the sun's radius for a total of {@link AstronomicalCalculator#adjustZenith 90.83333&deg;}.\r\n   * See documentation for the specific implementation of the {@link AstronomicalCalculator} that you are using.\r\n   *\r\n   * @return the <code>Date</code> representing the exact sunrise time. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the page.\r\n   * @see AstronomicalCalculator#adjustZenith\r\n   * @see #getSeaLevelSunrise()\r\n   * @see AstronomicalCalendar#getUTCSunrise\r\n   */\r\n  public getSunrise(): Temporal.ZonedDateTime | null {\r\n    const sunrise: number = this.getUTCSunrise(AstronomicalCalendar.GEOMETRIC_ZENITH);\r\n    if (Number.isNaN(sunrise)) return null;\r\n    return this.getDateFromTime(sunrise, true);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the sunrise without {@link AstronomicalCalculator#getElevationAdjustment(double) elevation\r\n     * adjustment}. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible light,\r\n   * something that is not affected by elevation. This method returns sunrise calculated at sea level. This forms the\r\n   * base for dawn calculations that are calculated as a dip below the horizon before sunrise.\r\n   *\r\n   * @return the <code>Date</code> representing the exact sea-level sunrise time. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a null will be returned. See detailed explanation on top of the page.\r\n   * @see AstronomicalCalendar#getSunrise\r\n   * @see AstronomicalCalendar#getUTCSeaLevelSunrise\r\n   * @see #getSeaLevelSunset()\r\n   */\r\n  public getSeaLevelSunrise(): Temporal.ZonedDateTime | null {\r\n    const sunrise: number = this.getUTCSeaLevelSunrise(AstronomicalCalendar.GEOMETRIC_ZENITH);\r\n    if (Number.isNaN(sunrise)) return null;\r\n    return this.getDateFromTime(sunrise, true);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the beginning of <a href=\"https://en.wikipedia.org/wiki/Twilight#Civil_twilight\">civil twilight</a>\r\n\t * (dawn) using a zenith of {@link #CIVIL_ZENITH 96&deg;}.\r\n\t * \r\n\t * @return The <code>Date</code> of the beginning of civil twilight using a zenith of 96&deg;. If the calculation\r\n\t *         can't be computed, null will be returned. See detailed explanation on top of the page.\r\n\t * @see #CIVIL_ZENITH\r\n\t */\r\n  public getBeginCivilTwilight(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(AstronomicalCalendar.CIVIL_ZENITH);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the beginning of <a href=\r\n\t * \"https://en.wikipedia.org/wiki/Twilight#Nautical_twilight\">nautical twilight</a> using a zenith of {@link\r\n   * #NAUTICAL_ZENITH 102&deg;}.\r\n   * \r\n   * @return The <code>Date</code> of the beginning of nautical twilight using a zenith of 102&deg;. If the\r\n   *         calculation can't be computed null will be returned. See detailed explanation on top of the page.\r\n   * @see #NAUTICAL_ZENITH\r\n   */\r\n  public getBeginNauticalTwilight(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(AstronomicalCalendar.NAUTICAL_ZENITH);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the beginning of <a href=\r\n\t * \"https://en.wikipedia.org/wiki/Twilight#Astronomical_twilight\">astronomical twilight</a> using a zenith of\r\n\t * {@link #ASTRONOMICAL_ZENITH 108&deg;}.\r\n   *\r\n   * @return The <code>Date</code> of the beginning of astronomical twilight using a zenith of 108&deg;. If the\r\n   *         calculation can't be computed, null will be returned. See detailed explanation on top of the page.\r\n   * @see #ASTRONOMICAL_ZENITH\r\n   */\r\n  public getBeginAstronomicalTwilight(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(AstronomicalCalendar.ASTRONOMICAL_ZENITH);\r\n  }\r\n\r\n  /**\r\n   * The getSunset method Returns a <code>Date</code> representing the\r\n   * {@link AstronomicalCalculator#getElevationAdjustment(double) elevation adjusted} sunset time. The zenith used for\r\n   * the calculation uses {@link #GEOMETRIC_ZENITH geometric zenith} of 90&deg; plus\r\n   * {@link AstronomicalCalculator#getElevationAdjustment(double)}. This is adjusted by the\r\n   * {@link AstronomicalCalculator} to add approximately 50/60 of a degree to account for 34 archminutes of refraction\r\n   * and 16 archminutes for the sun's radius for a total of {@link AstronomicalCalculator#adjustZenith 90.83333&deg;}.\r\n   * See documentation for the specific implementation of the {@link AstronomicalCalculator} that you are using. Note:\r\n   * In certain cases the calculates sunset will occur before sunrise. This will typically happen when a timezone\r\n   * other than the local timezone is used (calculating Los Angeles sunset using a GMT timezone for example). In this\r\n   * case the sunset date will be incremented to the following date.\r\n   *\r\n   * @return the <code>Date</code> representing the exact sunset time. If the calculation can't be computed such as in\r\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the page.\r\n   * @see AstronomicalCalculator#adjustZenith\r\n   * @see #getSeaLevelSunset()\r\n   * @see AstronomicalCalendar#getUTCSunset\r\n   */\r\n  public getSunset(): Temporal.ZonedDateTime | null {\r\n    const sunset: number = this.getUTCSunset(AstronomicalCalendar.GEOMETRIC_ZENITH);\r\n    if (Number.isNaN(sunset)) return null;\r\n    return this.getDateFromTime(sunset, false);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the sunset without {@link AstronomicalCalculator#getElevationAdjustment(double) elevation\r\n     * adjustment}. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible light,\r\n   * something that is not affected by elevation. This method returns sunset calculated at sea level. This forms the\r\n   * base for dusk calculations that are calculated as a dip below the horizon after sunset.\r\n   *\r\n   * @return the <code>Date</code> representing the exact sea-level sunset time. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a null will be returned. See detailed explanation on top of the page.\r\n   * @see AstronomicalCalendar#getSunset\r\n   * @see AstronomicalCalendar#getUTCSeaLevelSunset 2see {@link #getSunset()}\r\n   */\r\n  public getSeaLevelSunset(): Temporal.ZonedDateTime | null {\r\n    const sunset: number = this.getUTCSeaLevelSunset(AstronomicalCalendar.GEOMETRIC_ZENITH);\r\n    if (Number.isNaN(sunset)) return null;\r\n    return this.getDateFromTime(sunset, false);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the end of <a href=\"https://en.wikipedia.org/wiki/Twilight#Civil_twilight\">civil twilight</a>\r\n\t * using a zenith of {@link #CIVIL_ZENITH 96&deg;}.\r\n   *\r\n   * @return The <code>Date</code> of the end of civil twilight using a zenith of {@link #CIVIL_ZENITH 96&deg;}. If\r\n   *         the calculation can't be computed, null will be returned. See detailed explanation on top of the page.\r\n   * @see #CIVIL_ZENITH\r\n   */\r\n  public getEndCivilTwilight(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(AstronomicalCalendar.CIVIL_ZENITH);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the end of nautical twilight using a zenith of {@link #NAUTICAL_ZENITH 102&deg;}.\r\n   *\r\n   * @return The <code>Date</code> of the end of nautical twilight using a zenith of {@link #NAUTICAL_ZENITH 102&deg;}\r\n   *         . If the calculation can't be computed, null will be returned. See detailed explanation on top of the\r\n   *         page.\r\n   * @see #NAUTICAL_ZENITH\r\n   */\r\n  public getEndNauticalTwilight(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(AstronomicalCalendar.NAUTICAL_ZENITH);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the end of astronomical twilight using a zenith of {@link #ASTRONOMICAL_ZENITH 108&deg;}.\r\n   *\r\n   * @return the <code>Date</code> of the end of astronomical twilight using a zenith of {@link #ASTRONOMICAL_ZENITH\r\n     *         108&deg;}. If the calculation can't be computed, null will be returned. See detailed explanation on top\r\n   *         of the page.\r\n   * @see #ASTRONOMICAL_ZENITH\r\n   */\r\n  public getEndAstronomicalTwilight(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(AstronomicalCalendar.ASTRONOMICAL_ZENITH);\r\n  }\r\n\r\n  /**\r\n   * A utility method that returns the time of an offset by degrees below or above the horizon of\r\n   * {@link #getSunrise() sunrise}. Note that the degree offset is from the vertical, so for a calculation of 14&deg;\r\n   * before sunrise, an offset of 14 + {@link #GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\r\n   *\r\n   * @param offsetZenith\r\n   *            the degrees before {@link #getSunrise()} to use in the calculation. For time after sunrise use\r\n   *            negative numbers. Note that the degree offset is from the vertical, so for a calculation of 14&deg;\r\n   *            before sunrise, an offset of 14 + {@link #GEOMETRIC_ZENITH} = 104 would have to be passed as a\r\n   *            parameter.\r\n   * @return The {@link java.util.Date} of the offset after (or before) {@link #getSunrise()}. If the calculation\r\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\r\n   *         not rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         page.\r\n   */\r\n  public getSunriseOffsetByDegrees(offsetZenith: number): Temporal.ZonedDateTime | null {\r\n    const dawn: number = this.getUTCSunrise(offsetZenith);\r\n    if (Number.isNaN(dawn)) return null;\r\n    return this.getDateFromTime(dawn, true);\r\n  }\r\n\r\n  /**\r\n   * A utility method that returns the time of an offset by degrees below or above the horizon of {@link #getSunset()\r\n     * sunset}. Note that the degree offset is from the vertical, so for a calculation of 14&deg; after sunset, an\r\n   * offset of 14 + {@link #GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\r\n   *\r\n   * @param offsetZenith\r\n   *            the degrees after {@link #getSunset()} to use in the calculation. For time before sunset use negative\r\n   *            numbers. Note that the degree offset is from the vertical, so for a calculation of 14&deg; after\r\n   *            sunset, an offset of 14 + {@link #GEOMETRIC_ZENITH} = 104 would have to be passed as a parameter.\r\n   * @return The {@link java.util.Date}of the offset after (or before) {@link #getSunset()}. If the calculation can't\r\n   *         be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\r\n   *         rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         page.\r\n   */\r\n  public getSunsetOffsetByDegrees(offsetZenith: number): Temporal.ZonedDateTime | null {\r\n    const sunset: number = this.getUTCSunset(offsetZenith);\r\n    if (Number.isNaN(sunset)) return null;\r\n    return this.getDateFromTime(sunset, false);\r\n  }\r\n\r\n  /**\r\n   * Default constructor will set a default {@link GeoLocation#GeoLocation()}, a default\r\n   * {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} and default the calendar to the current date.\r\n   */\r\n\r\n  /*\r\n  constructor() {\r\n      this(new GeoLocation());\r\n  }\r\n  */\r\n\r\n  /**\r\n   * A constructor that takes in <a href=\"https://en.wikipedia.org/wiki/Geolocation\">geolocation</a> information as a\r\n   * parameter. The default {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} used for solar\r\n   * calculations is the the {@link NOAACalculator}.\r\n   *\r\n   * @param geoLocation\r\n   *            The location information used for calculating astronomical sun times.\r\n   *\r\n   * @see #setAstronomicalCalculator(AstronomicalCalculator) for changing the calculator class.\r\n   */\r\n  constructor(geoLocation: GeoLocation) {\r\n    this.setDate(Temporal.Now.plainDateISO());\r\n    this.setGeoLocation(geoLocation); // duplicate call\r\n    this.setAstronomicalCalculator(new NOAACalculator());\r\n  }\r\n\r\n  /**\r\n   * A method that returns the sunrise in UTC time without correction for time zone offset from GMT and without using\r\n   * daylight savings time.\r\n   *\r\n   * @param zenith\r\n   *            the degrees below the horizon. For time after sunrise use negative numbers.\r\n   * @return The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, {@link Double#NaN} will be returned. See detailed explanation on top of the page.\r\n   */\r\n  public getUTCSunrise(zenith: number): number {\r\n    return this.getAstronomicalCalculator()\r\n      .getUTCSunrise(this.getAdjustedDate(), this.getGeoLocation(), zenith, true);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the sunrise in UTC time without correction for time zone offset from GMT and without using\r\n   * daylight savings time. Non-sunrise and sunset calculations such as dawn and dusk, depend on the amount of visible\r\n   * light, something that is not affected by elevation. This method returns UTC sunrise calculated at sea level. This\r\n   * forms the base for dawn calculations that are calculated as a dip below the horizon before sunrise.\r\n   *\r\n   * @param zenith\r\n   *            the degrees below the horizon. For time after sunrise use negative numbers.\r\n   * @return The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, {@link Double#NaN} will be returned. See detailed explanation on top of the page.\r\n   * @see AstronomicalCalendar#getUTCSunrise\r\n   * @see AstronomicalCalendar#getUTCSeaLevelSunset\r\n   */\r\n  public getUTCSeaLevelSunrise(zenith: number): number {\r\n    return this.getAstronomicalCalculator()\r\n      .getUTCSunrise(this.getAdjustedDate(), this.getGeoLocation(), zenith, false);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the sunset in UTC time without correction for time zone offset from GMT and without using\r\n   * daylight savings time.\r\n   *\r\n   * @param zenith\r\n   *            the degrees below the horizon. For time after sunset use negative numbers.\r\n   * @return The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, {@link Double#NaN} will be returned. See detailed explanation on top of the page.\r\n   * @see AstronomicalCalendar#getUTCSeaLevelSunset\r\n   */\r\n  public getUTCSunset(zenith: number): number {\r\n    return this.getAstronomicalCalculator()\r\n      .getUTCSunset(this.getAdjustedDate(), this.getGeoLocation(), zenith, true);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the sunset in UTC time without correction for elevation, time zone offset from GMT and\r\n   * without using daylight savings time. Non-sunrise and sunset calculations such as dawn and dusk, depend on the\r\n   * amount of visible light, something that is not affected by elevation. This method returns UTC sunset calculated\r\n   * at sea level. This forms the base for dusk calculations that are calculated as a dip below the horizon after\r\n   * sunset.\r\n   *\r\n   * @param zenith\r\n   *            the degrees below the horizon. For time before sunset use negative numbers.\r\n   * @return The time in the format: 18.75 for 18:45:00 UTC/GMT. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, {@link Double#NaN} will be returned. See detailed explanation on top of the page.\r\n   * @see AstronomicalCalendar#getUTCSunset\r\n   * @see AstronomicalCalendar#getUTCSeaLevelSunrise\r\n   */\r\n  public getUTCSeaLevelSunset(zenith: number): number {\r\n    return this.getAstronomicalCalculator()\r\n      .getUTCSunset(this.getAdjustedDate(), this.getGeoLocation(), zenith, false);\r\n  }\r\n\r\n  /**\r\n   * A method that returns an {@link AstronomicalCalculator#getElevationAdjustment(double) elevation adjusted}\r\n   * temporal (solar) hour. The day from {@link #getSunrise() sunrise} to {@link #getSunset() sunset} is split into 12\r\n   * equal parts with each one being a temporal hour.\r\n   *\r\n   * @see #getSunrise()\r\n   * @see #getSunset()\r\n   * @see #getTemporalHour(Date, Date)\r\n   *\r\n   * @return the <code>long</code> millisecond length of a temporal hour. If the calculation can't be computed,\r\n   *         {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the page.\r\n   *\r\n   * @see #getTemporalHour(Date, Date)\r\n   */\r\n\r\n  /*\r\n      public getTemporalHour(): number {\r\n          return this.getTemporalHour(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\r\n      }\r\n  */\r\n\r\n  /**\r\n   * A utility method that will allow the calculation of a temporal (solar) hour based on the sunrise and sunset\r\n   * passed as parameters to this method. An example of the use of this method would be the calculation of a\r\n   * non-elevation adjusted temporal hour by passing in {@link #getSeaLevelSunrise() sea level sunrise} and\r\n   * {@link #getSeaLevelSunset() sea level sunset} as parameters.\r\n   *\r\n   * @param startOfday\r\n   *            The start of the day.\r\n   * @param endOfDay\r\n   *            The end of the day.\r\n   *\r\n   * @return the <code>long</code> millisecond length of the temporal hour. If the calculation can't be computed a\r\n   *         {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the page.\r\n   *\r\n   * @see #getTemporalHour()\r\n   */\r\n  public getTemporalHour(startOfday: Temporal.ZonedDateTime | null = this.getSeaLevelSunrise(), endOfDay: Temporal.ZonedDateTime | null = this.getSeaLevelSunset()) {\r\n    if (startOfday === null || endOfDay === null) {\r\n      return;\r\n    }\r\n    const intValue = startOfday.until(endOfDay).total({ unit: 'nanoseconds' }) / 12;\r\n    return Temporal.Duration.from({ nanoseconds: Math.trunc(intValue) })\r\n  }\r\n\r\n    /**\r\n   * A method that returns \"solar\" midnight, or the time when the sun is at its <a\r\n   * href=\"https://en.wikipedia.org/wiki/Nadir\">nadir</a>.\r\n   * <b>Note:</b> this method is experimental and might be removed.\r\n   * \r\n   * @return the <code>Date</code> of Solar Midnight (chatzos layla). If the calculation can't be computed such as in\r\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n    public getSolarMidnight(): Temporal.ZonedDateTime | null {\r\n      const clonedCal = this.clone();\r\n      clonedCal.setDate(this.getDate().add({ days: 1 }));\r\n      return this.getSunTransit()!\r\n        .add({nanoseconds: Math.trunc(this.getSunTransit()?.until(clonedCal.getSunTransit()!).total({ unit: \"nanoseconds\" })! / 2)});\r\n    }\r\n\r\n  /**\r\n   * A method that returns sundial or solar noon. It occurs when the Sun is <a href\r\n   * =\"https://en.wikipedia.org/wiki/Transit_%28astronomy%29\">transiting</a> the <a\r\n   * href=\"https://en.wikipedia.org/wiki/Meridian_%28astronomy%29\">celestial meridian</a>. In this class it is\r\n   * calculated as halfway between the sunrise and sunset passed to this method. This time can be slightly off the\r\n   * real transit time due to changes in declination (the lengthening or shortening day).\r\n   *\r\n   * @param startOfDay\r\n   *            the start of day for calculating the sun's transit. This can be sea level sunrise, visual sunrise (or\r\n   *            any arbitrary start of day) passed to this method.\r\n   * @param endOfDay\r\n   *            the end of day for calculating the sun's transit. This can be sea level sunset, visual sunset (or any\r\n   *            arbitrary end of day) passed to this method.\r\n   *\r\n   * @return the <code>Date</code> representing Sun's transit. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, null will be returned. See detailed explanation on top of the page.\r\n   */\r\n  public getSunTransit(startOfDay?: Temporal.ZonedDateTime, endOfDay?: Temporal.ZonedDateTime): Temporal.ZonedDateTime | null {\r\n    if (startOfDay) {\r\n      if (!endOfDay)\r\n        throw new IllegalArgumentException('No argument for the end of day provided');\r\n\r\n      const temporalHour = this.getTemporalHour(startOfDay, endOfDay)!;\r\n      let offsetTime = startOfDay;\r\n      for (let index = 0; index < 6; index++) {\r\n        offsetTime = offsetTime.add(temporalHour);\r\n      }\r\n\r\n      return offsetTime;\r\n    }\r\n\r\n    const noon = this.getAstronomicalCalculator().getUTCNoon(this.getAdjustedDate(), this.getGeoLocation());\r\n    return this.getDateFromTime(noon, false); \r\n  }\r\n\r\n  /**\r\n   * A method that returns a <code>Date</code> from the time passed in as a parameter.\r\n   *\r\n   * @param time\r\n   *            The time to be set as the time for the <code>Date</code>. The time expected is in the format: 18.75\r\n   *            for 6:45:00 PM.\r\n   * @param isSunrise true if the time is sunrise, and false if it is sunset\r\n   * @return The Date.\r\n   */\r\n  protected getDateFromTime(time: number, isSunrise: boolean): Temporal.ZonedDateTime | null {\r\n    if (Number.isNaN(time)) {\r\n      return null;\r\n    }\r\n    let calculatedTime: number = time;\r\n\r\n    const adjustedDate: Temporal.PlainDate = this.getAdjustedDate();\r\n    let cal = adjustedDate.toZonedDateTime(\"UTC\");\r\n\r\n    const hours: number = Math.trunc(calculatedTime); // retain only the hours\r\n    calculatedTime -= hours;\r\n    const minutes: number = Math.trunc(calculatedTime *= 60); // retain only the minutes\r\n    calculatedTime -= minutes;\r\n    const seconds: number = Math.trunc(calculatedTime *= 60); // retain only the seconds\r\n    calculatedTime -= seconds; // remaining milliseconds\r\n    const milliseconds = Math.trunc(calculatedTime *= 1000)\r\n    calculatedTime -= milliseconds;\r\n    const microseconds = Math.trunc(calculatedTime *= 1000)\r\n    calculatedTime -= microseconds; // remaining nanoseconds\r\n\r\n\r\n    // Check if a date transition has occurred, or is about to occur - this indicates the date of the event is\r\n    // actually not the target date, but the day prior or after\r\n    const localTimeHours: number = Math.trunc(this.getGeoLocation().getLongitude() / 15);\r\n    if (isSunrise && localTimeHours + hours > 18) {\r\n      cal = cal.subtract({ days: 1 });\r\n    } else if (!isSunrise && localTimeHours + hours < 6) {\r\n      cal = cal.add({ days: 1 });\r\n    }\r\n\r\n    return cal.with({\r\n      hour: hours,\r\n      minute: minutes,\r\n      second: seconds,\r\n      millisecond: milliseconds,\r\n      microsecond: microseconds,\r\n      nanosecond: Math.trunc(calculatedTime * 1000)\r\n    }).withTimeZone(this.geoLocation.getTimeZone());\r\n  }\r\n\r\n  /**\r\n   * Returns the dip below the horizon before sunrise that matches the offset minutes on passed in as a parameter. For\r\n   * example passing in 72 minutes for a calendar set to the equinox in Jerusalem returns a value close to 16.1&deg;\r\n   * Please note that this method is very slow and inefficient and should NEVER be used in a loop. TODO: Improve\r\n   * efficiency.\r\n   *\r\n   * @param minutes\r\n   *            offset\r\n   * @return the degrees below the horizon before sunrise that match the offset in minutes passed it as a parameter.\r\n   * @see #getSunsetSolarDipFromOffset(double)\r\n   */\r\n  public getSunriseSolarDipFromOffset(minutes: number): number | null {\r\n    if (Number.isNaN(minutes)) return null;\r\n\r\n    let offsetByDegrees: Temporal.ZonedDateTime | null = this.getSeaLevelSunrise();\r\n    const offsetByTime: Temporal.ZonedDateTime | null = this.getSeaLevelSunrise()?.subtract({ minutes })!;\r\n\r\n    let degrees: Big = new Big(0);\r\n    const incrementor: Big = new Big('0.0001');\r\n\r\n    // If `minutes` is not `NaN` and `offsetByDegrees` is not null, `offsetByTime` should not be null\r\n    while (offsetByDegrees === null || ((minutes < 0 && offsetByDegrees < offsetByTime!)\r\n      || (minutes > 0 && offsetByDegrees > offsetByTime!))) {\r\n      if (minutes > 0) {\r\n        degrees = degrees.add(incrementor);\r\n      } else {\r\n        degrees = degrees.sub(incrementor);\r\n      }\r\n\r\n      offsetByDegrees = this.getSunriseOffsetByDegrees(AstronomicalCalendar.GEOMETRIC_ZENITH + degrees.toNumber());\r\n    }\r\n\r\n    return degrees.toNumber();\r\n  }\r\n\r\n  /**\r\n   * Returns the dip below the horizon after sunset that matches the offset minutes on passed in as a parameter. For\r\n   * example passing in 72 minutes for a calendar set to the equinox in Jerusalem returns a value close to 16.1&deg;\r\n   * Please note that this method is very slow and inefficient and should NEVER be used in a loop. TODO: Improve\r\n   * efficiency.\r\n   *\r\n   * @param minutes\r\n   *            offset\r\n   * @return the degrees below the horizon after sunset that match the offset in minutes passed it as a parameter.\r\n   * @see #getSunriseSolarDipFromOffset(double)\r\n   */\r\n  public getSunsetSolarDipFromOffset(minutes: number): number | null {\r\n    if (Number.isNaN(minutes)) return null;\r\n\r\n    let offsetByDegrees: Temporal.ZonedDateTime | null = this.getSeaLevelSunset();\r\n    const offsetByTime: Temporal.ZonedDateTime | null = this.getSeaLevelSunset()?.add({ minutes })!\r\n\r\n    let degrees: Big = new Big(0);\r\n    const incrementor: Big = new Big('0.001');\r\n\r\n    // If `minutes` is not `NaN` and `offsetByDegrees` is not null, `offsetByTime` should not be null\r\n    while (offsetByDegrees == null || ((minutes > 0 && offsetByDegrees < offsetByTime!)\r\n      || (minutes < 0 && offsetByDegrees > offsetByTime!))) {\r\n      if (minutes > 0) {\r\n        degrees = degrees.add(incrementor);\r\n      } else {\r\n        degrees = degrees.sub(incrementor);\r\n      }\r\n\r\n      offsetByDegrees = this.getSunsetOffsetByDegrees(AstronomicalCalendar.GEOMETRIC_ZENITH + degrees.toNumber());\r\n    }\r\n\r\n    return degrees.toNumber();\r\n  }\r\n\r\n  /**\r\n   * FIXME broken for czc.getRiseSetSolarDipFromOffset(-72, czc.getSunrise());\r\n   * and broken in other was as well\r\n   * @param minutes\r\n   * @param riseSet\r\n   * @return\r\n   */\r\n  /*\r\n    public getRiseSetSolarDipFromOffset(minutes: number, riseSet: DateTime): number {\r\n      let offsetByDegrees: DateTime | null = riseSet;\r\n      const offsetByTime: DateTime | null = AstronomicalCalendar.getTimeOffset(riseSet, minutes * AstronomicalCalendar.MINUTE_MILLIS);\r\n\r\n      let degrees: Big = new Big(0);\r\n      const incrementor: Big = new Big('0.001');\r\n\r\n      while (offsetByDegrees == null || ((minutes > 0 && offsetByDegrees < offsetByTime!)\r\n        || (minutes < 0 && offsetByDegrees > offsetByTime!))) {\r\n        if (minutes > 0) {\r\n          degrees = degrees.add(incrementor);\r\n        } else {\r\n          degrees = degrees.sub(incrementor);\r\n        }\r\n        offsetByDegrees = this.getSunsetOffsetByDegrees(AstronomicalCalendar.GEOMETRIC_ZENITH + degrees.toNumber());\r\n      }\r\n      return degrees.valueOf();\r\n    }\r\n  */\r\n\r\n  /**\r\n\t * A method that returns <a href=\"https://en.wikipedia.org/wiki/Local_mean_time\">local mean time (LMT)</a> time\r\n\t * converted to regular clock time for the number of hours (0.0 to 23.999...) passed to this method. This time is\r\n\t * adjusted from standard time to account for the local latitude. The 360&deg; of the globe divided by 24 calculates\r\n\t * to 15&deg; per hour with 4 minutes per degree, so at a longitude of 0 , 15, 30 etc... noon is at exactly 12:00pm.\r\n\t * Lakewood, N.J., with a longitude of -74.222, is 0.7906 away from the closest multiple of 15 at -75&deg;. This is\r\n\t * multiplied by 4 clock minutes (per degree) to yield 3 minutes and 7 seconds for a noon time of 11:56:53am. This\r\n\t * method is not tied to the theoretical 15&deg; time zones, but will adjust to the actual time zone and <a href=\r\n\t * \"https://en.wikipedia.org/wiki/Daylight_saving_time\">Daylight saving time</a> to return LMT.\r\n\t * \r\n\t * @param hours\r\n\t * \t\t\tthe hour (such as 12.0 for noon and 0.0 for midnight) to calculate as LMT. Valid values are in the range of\r\n\t * \t\t\t0.0 to 23.999.... An IllegalArgumentException will be thrown if the value does not fit in the expected range.\r\n\t * @return the Date representing the local mean time (LMT) for the number of hours passed in. In Lakewood, NJ, passing 12\r\n\t *         (noon) will return 11:56:50am.\r\n\t * @see GeoLocation#getLocalMeanTimeOffset()\r\n\t */\r\n\tpublic getLocalMeanTime(hours:number): Temporal.ZonedDateTime | null {\r\n\t\tif(hours < 0 || hours >= 24) {\r\n\t\t\tthrow new IllegalArgumentException(\"Hours must between 0 and 23.9999...\");\r\n\t\t}\r\n    \r\n    const geoLocation: GeoLocation = this.getGeoLocation();\r\n    const rawOffsetHours = TimeZone.getRawOffset(geoLocation.getTimeZone()) / AstronomicalCalendar.HOUR_MILLIS;\r\n    return this.getDateFromTime(hours - rawOffsetHours, true)?.subtract({ milliseconds: geoLocation.getLocalMeanTimeOffset() })!;\r\n\t}\r\n\r\n  /**\r\n   * Adjusts the <code>Calendar</code> to deal with edge cases where the location crosses the antimeridian.\r\n   *\r\n   * @see GeoLocation#getAntimeridianAdjustment()\r\n   * @return the adjusted Calendar\r\n   */\r\n  private getAdjustedDate(): Temporal.PlainDate {\r\n    const offset: -1 | 0 | 1 = this.getGeoLocation().getAntimeridianAdjustment();\r\n    if (offset === 0) return this.getDate();\r\n    return this.getDate().add({ days: offset });\r\n  }\r\n\r\n  /**\r\n   * @return an XML formatted representation of the class. It returns the default output of the\r\n   *         {@link ZmanimFormatter#toXML(AstronomicalCalendar) toXML} method.\r\n   * @see ZmanimFormatter#toXML(AstronomicalCalendar)\r\n   * @see java.lang.Object#toString()\r\n   * @deprecated (This depends on a circular dependency).\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public toString(): void {\r\n    throw new UnsupportedError('This method is unsupported, due to the fact that it depends on a circular dependency.');\r\n  }\r\n\r\n  /**\r\n   * @return a JSON formatted representation of the class. It returns the default output of the\r\n   *         {@link ZmanimFormatter#toJSON(AstronomicalCalendar) toJSON} method.\r\n   * @see ZmanimFormatter#toJSON(AstronomicalCalendar)\r\n   * @see java.lang.Object#toString()\r\n   * @deprecated  This depends on a circular dependency. Use <pre>ZmanimFormatter.toJSON(astronomicalCalendar)</pre> instead.\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public toJSON(): void {\r\n    throw new UnsupportedError('This method is unsupported, due to the fact that it depends on a circular dependency. '\r\n      + 'Use `ZmanimFormatter.toJSON(astronomicalCalendar)` instead.');\r\n  }\r\n\r\n  /**\r\n   * @see java.lang.Object#equals(Object)\r\n   */\r\n  public equals(object: object): boolean {\r\n    if (this === object) {\r\n      return true;\r\n    }\r\n    if (!(object instanceof AstronomicalCalendar)) {\r\n      return false;\r\n    }\r\n    const aCal: AstronomicalCalendar = object as AstronomicalCalendar;\r\n    return this.getDate().equals(aCal.getDate()) && this.getGeoLocation().equals(aCal.getGeoLocation())\r\n      && this.getAstronomicalCalculator() === aCal.getAstronomicalCalculator();\r\n  }\r\n\r\n  /**\r\n   * A method that returns the currently set {@link GeoLocation} which contains location information used for the\r\n   * astronomical calculations.\r\n   *\r\n   * @return Returns the geoLocation.\r\n   */\r\n  public getGeoLocation(): GeoLocation {\r\n    return this.geoLocation;\r\n  }\r\n\r\n  /**\r\n   * Sets the {@link GeoLocation} <code>Object</code> to be used for astronomical calculations.\r\n   *\r\n   * @param geoLocation\r\n   *            The geoLocation to set.\r\n   */\r\n  public setGeoLocation(geoLocation: GeoLocation): void {\r\n    this.geoLocation = geoLocation;\r\n  }\r\n\r\n  /**\r\n   * A method that returns the currently set AstronomicalCalculator.\r\n   *\r\n   * @return Returns the astronomicalCalculator.\r\n   * @see #setAstronomicalCalculator(AstronomicalCalculator)\r\n   */\r\n  public getAstronomicalCalculator(): AstronomicalCalculator {\r\n    return this.astronomicalCalculator;\r\n  }\r\n\r\n  /**\r\n   * A method to set the {@link AstronomicalCalculator} used for astronomical calculations. The Zmanim package ships\r\n   * with a number of different implementations of the <code>abstract</code> {@link AstronomicalCalculator} based on\r\n   * different algorithms, including the default {@link com.kosherjava.zmanim.util.NOAACalculator} based on <a href=\r\n\t * \"https://noaa.gov\">NOAA's</a> implementation of Jean Meeus's algorithms as well as {@link\r\n   * com.kosherjava.zmanim.util.SunTimesCalculator} based on the <a href = \"https://www.cnmoc.usff.navy.mil/usno/\">US\r\n   * Naval Observatory's</a> algorithm,. This allows easy runtime switching and comparison of different algorithms.\r\n   *\r\n   * @param astronomicalCalculator\r\n   *            The astronomicalCalculator to set.\r\n   */\r\n  public setAstronomicalCalculator(astronomicalCalculator: AstronomicalCalculator): void {\r\n    this.astronomicalCalculator = astronomicalCalculator;\r\n  }\r\n\r\n  /**\r\n   * returns the Calendar object encapsulated in this class.\r\n   *\r\n   * @return Returns the calendar.\r\n   */\r\n  public getDate(): Temporal.PlainDate {\r\n    return this.date;\r\n  }\r\n\r\n  /**\r\n   * @param calendar\r\n   *            The calendar to set.\r\n   */\r\n  public setDate(date: Temporal.PlainDate | Date | string | number): void {\r\n    if (date instanceof Temporal.PlainDate) {\r\n      this.date = date;\r\n    } else if (date instanceof Date) {\r\n      this.date = Temporal.Instant.fromEpochMilliseconds(date.valueOf()).toZonedDateTimeISO(this.geoLocation.getTimeZone()).toPlainDate();\r\n    } else if (typeof date === 'string') {\r\n      this.date = Temporal.PlainDate.from(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A method that creates a <a href=\"https://en.wikipedia.org/wiki/Object_copy#Deep_copy\">deep copy</a> of the object.\r\n   * <b>Note:</b> If the {@link java.util.TimeZone} in the cloned {@link GeoLocation} will\r\n   * be changed from the original, it is critical that\r\n   * {@link AstronomicalCalendar#getCalendar()}.\r\n   * {@link java.util.Calendar#setTimeZone(TimeZone) setTimeZone(TimeZone)} be called in order for the\r\n   * AstronomicalCalendar to output times in the expected offset after being cloned.\r\n   *\r\n   * @see java.lang.Object#clone()\r\n   * @since 1.1\r\n   */\r\n  public clone(): AstronomicalCalendar {\r\n    const clonedCalendar: AstronomicalCalendar = new AstronomicalCalendar(this.geoLocation);\r\n    clonedCalendar.setDate(this.date);\r\n    clonedCalendar.setAstronomicalCalculator(this.astronomicalCalculator);\r\n\r\n    return clonedCalendar;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public getClassName() {\r\n    return 'com.kosherjava.zmanim.AstronomicalCalendar';\r\n  }\r\n}\r\n","import { Temporal } from 'temporal-polyfill'\r\n\r\nimport { Calendar } from '../polyfills/Utils';\r\nimport { IllegalArgumentException } from '../polyfills/errors';\r\n\r\n/**\r\n * The JewishDate is the base calendar class, that supports maintenance of a {@link java.util.GregorianCalendar}\r\n * instance along with the corresponding Jewish date. This class can use the standard Java Date and Calendar\r\n * classes for setting and maintaining the dates, but it does not subclass these classes or use them internally\r\n * in any calculations. This class also does not have a concept of a time (which the Date class does). Please\r\n * note that the calendar does not currently support dates prior to 1/1/1 Gregorian. Also keep in mind that the\r\n * Gregorian calendar started on October 15, 1582, so any calculations prior to that are suspect (at least from\r\n * a Gregorian perspective). While 1/1/1 Gregorian and forward are technically supported, any calculations prior to <a\r\n * href=\"https://en.wikipedia.org/wiki/Hillel_II\">Hillel II's (Hakatan's</a>) calendar (4119 in the Jewish Calendar / 359\r\n * CE Julian as recorded by <a href=\"https://en.wikipedia.org/wiki/Hai_Gaon\">Rav Hai Gaon</a>) would be just an\r\n * approximation.\r\n *\r\n * This open source Java code was written by <a href=\"http://www.facebook.com/avromf\">Avrom Finkelstien</a> from his C++\r\n * code. It was refactored to fit the KosherJava Zmanim API with simplification of the code, enhancements and some bug\r\n * fixing.\r\n *\r\n * Some of Avrom's original C++ code was translated from <a href=\"https://web.archive.org/web/20120124134148/http://emr.cs.uiuc.edu/~reingold/calendar.C\">C/C++\r\n * code</a> in <a href=\"http://www.calendarists.com\">Calendrical Calculations</a> by Nachum Dershowitz and Edward M.\r\n * Reingold, Software-- Practice &amp; Experience, vol. 20, no. 9 (September, 1990), pp. 899- 928. Any method with the mark\r\n * \"ND+ER\" indicates that the method was taken from this source with minor modifications.\r\n *\r\n * If you are looking for a class that implements a Jewish calendar version of the Calendar class, one is available from\r\n * the <a href=\"http://site.icu-project.org/\" >ICU (International Components for Unicode)</a> project, formerly part of\r\n * IBM's DeveloperWorks.\r\n *\r\n * @see JewishCalendar\r\n * @see HebrewDateFormatter\r\n * @see java.util.Date\r\n * @see java.util.Calendar\r\n * @author &copy; Avrom Finkelstien 2002\r\n * @author &copy; Eliyahu Hershfeld 2011 - 2015\r\n */\r\nexport class JewishDate {\r\n  /**\r\n   * Value of the month field indicating Nissan, the first numeric month of the year in the Jewish calendar. With the\r\n   * year starting at {@link #TISHREI}, it would actually be the 7th (or 8th in a {@link #isJewishLeapYear() leap\r\n     * year}) month of the year.\r\n   */\r\n  public static readonly NISSAN: number = 1;\r\n\r\n  /**\r\n   * Value of the month field indicating Iyar, the second numeric month of the year in the Jewish calendar. With the\r\n   * year starting at {@link #TISHREI}, it would actually be the 8th (or 9th in a {@link #isJewishLeapYear() leap\r\n     * year}) month of the year.\r\n   */\r\n  public static readonly IYAR: number = 2;\r\n\r\n  /**\r\n   * Value of the month field indicating Sivan, the third numeric month of the year in the Jewish calendar. With the\r\n   * year starting at {@link #TISHREI}, it would actually be the 9th (or 10th in a {@link #isJewishLeapYear() leap\r\n     * year}) month of the year.\r\n   */\r\n  public static readonly SIVAN: number = 3;\r\n\r\n  /**\r\n   * Value of the month field indicating Tammuz, the fourth numeric month of the year in the Jewish calendar. With the\r\n   * year starting at {@link #TISHREI}, it would actually be the 10th (or 11th in a {@link #isJewishLeapYear() leap\r\n     * year}) month of the year.\r\n   */\r\n  public static readonly TAMMUZ: number = 4;\r\n\r\n  /**\r\n   * Value of the month field indicating Av, the fifth numeric month of the year in the Jewish calendar. With the year\r\n   * starting at {@link #TISHREI}, it would actually be the 11th (or 12th in a {@link #isJewishLeapYear() leap year})\r\n   * month of the year.\r\n   */\r\n  public static readonly AV: number = 5;\r\n\r\n  /**\r\n   * Value of the month field indicating Elul, the sixth numeric month of the year in the Jewish calendar. With the\r\n   * year starting at {@link #TISHREI}, it would actually be the 12th (or 13th in a {@link #isJewishLeapYear() leap\r\n     * year}) month of the year.\r\n   */\r\n  public static readonly ELUL: number = 6;\r\n\r\n  /**\r\n   * Value of the month field indicating Tishrei, the seventh numeric month of the year in the Jewish calendar. With\r\n   * the year starting at this month, it would actually be the 1st month of the year.\r\n   */\r\n  public static readonly TISHREI: number = 7;\r\n\r\n  /**\r\n   * Value of the month field indicating Cheshvan/marcheshvan, the eighth numeric month of the year in the Jewish\r\n   * calendar. With the year starting at {@link #TISHREI}, it would actually be the 2nd month of the year.\r\n   */\r\n  public static readonly CHESHVAN: number = 8;\r\n\r\n  /**\r\n   * Value of the month field indicating Kislev, the ninth numeric month of the year in the Jewish calendar. With the\r\n   * year starting at {@link #TISHREI}, it would actually be the 3rd month of the year.\r\n   */\r\n  public static readonly KISLEV: number = 9;\r\n\r\n  /**\r\n   * Value of the month field indicating Teves, the tenth numeric month of the year in the Jewish calendar. With the\r\n   * year starting at {@link #TISHREI}, it would actually be the 4th month of the year.\r\n   */\r\n  public static readonly TEVES: number = 10;\r\n\r\n  /**\r\n   * Value of the month field indicating Shevat, the eleventh numeric month of the year in the Jewish calendar. With\r\n   * the year starting at {@link #TISHREI}, it would actually be the 5th month of the year.\r\n   */\r\n  public static readonly SHEVAT: number = 11;\r\n\r\n  /**\r\n   * Value of the month field indicating Adar (or Adar I in a {@link #isJewishLeapYear() leap year}), the twelfth\r\n   * numeric month of the year in the Jewish calendar. With the year starting at {@link #TISHREI}, it would actually\r\n   * be the 6th month of the year.\r\n   */\r\n  public static readonly ADAR: number = 12;\r\n\r\n  /**\r\n   * Value of the month field indicating Adar II, the leap (intercalary or embolismic) thirteenth (Undecimber) numeric\r\n   * month of the year added in Jewish {@link #isJewishLeapYear() leap year}). The leap years are years 3, 6, 8, 11,\r\n   * 14, 17 and 19 of a 19 year cycle. With the year starting at {@link #TISHREI}, it would actually be the 7th month\r\n   * of the year.\r\n   */\r\n  public static readonly ADAR_II: number = 13;\r\n\r\n  /**\r\n   * the Jewish epoch using the RD (Rata Die/Fixed Date or Reingold Dershowitz) day used in Calendrical Calculations.\r\n   * Day 1 is January 1, 0001 Gregorian\r\n   */\r\n  private static readonly JEWISH_EPOCH: number = -1373429;\r\n\r\n  /** The number  of <em>chalakim</em> (18) in a minute. */\r\n  private static readonly CHALAKIM_PER_MINUTE: number = 18;\r\n\r\n  /** The number  of <em>chalakim</em> (1080) in an hour. */\r\n  private static readonly CHALAKIM_PER_HOUR: number = 1080;\r\n\r\n  /** The number of <em>chalakim</em> (25,920) in a 24 hour day. */\r\n  private static readonly CHALAKIM_PER_DAY: number = 25920; // 24 * 1080\r\n\r\n  /** The number  of <em>chalakim</em> in an average Jewish month. A month has 29 days, 12 hours and 793\r\n   * <em>chalakim</em> (44 minutes and 3.3 seconds) for a total of 765,433 <em>chalakim</em> */\r\n  private static readonly CHALAKIM_PER_MONTH: number = 765433; // (29 * 24 + 12) * 1080 + 793\r\n\r\n  /**\r\n   * Days from the beginning of Sunday till molad BaHaRaD. Calculated as 1 day, 5 hours and 204 chalakim = (24 + 5) *\r\n   * 1080 + 204 = 31524\r\n   */\r\n  private static readonly CHALAKIM_MOLAD_TOHU: number = 31524;\r\n\r\n  /**\r\n   * A short year where both {@link #CHESHVAN} and {@link #KISLEV} are 29 days.\r\n   *\r\n   * @see #getCheshvanKislevKviah()\r\n   * @see HebrewDateFormatter#getFormattedKviah(int)\r\n   */\r\n  public static readonly CHASERIM: number = 0;\r\n\r\n  /**\r\n   * An ordered year where {@link #CHESHVAN} is 29 days and {@link #KISLEV} is 30 days.\r\n   *\r\n   * @see #getCheshvanKislevKviah()\r\n   * @see HebrewDateFormatter#getFormattedKviah(int)\r\n   */\r\n  public static readonly KESIDRAN: number = 1;\r\n\r\n  /**\r\n   * A long year where both {@link #CHESHVAN} and {@link #KISLEV} are 30 days.\r\n   *\r\n   * @see #getCheshvanKislevKviah()\r\n   * @see HebrewDateFormatter#getFormattedKviah(int)\r\n   */\r\n  public static readonly SHELAIMIM: number = 2;\r\n\r\n  private date: Temporal.PlainDate;\r\n\r\n  /** the internal count of <em>molad</em> hours. */\r\n  private moladHours!: number;\r\n\r\n  /** the internal count of <em>molad</em> minutes. */\r\n  private moladMinutes!: number;\r\n\r\n  /** the internal count of <em>molad</em> <em>chalakim</em>. */\r\n  private moladChalakim!: number;\r\n\r\n  /**\r\n   * Returns the molad hours. Only a JewishDate object populated with {@link #getMolad()},\r\n   * {@link #setJewishDate(int, int, int, int, int, int)} or {@link #setMoladHours(int)} will have this field\r\n   * populated. A regular JewishDate object will have this field set to 0.\r\n   *\r\n   * @return the molad hours\r\n   * @see #setMoladHours(int)\r\n   * @see #getMolad()\r\n   * @see #setJewishDate(int, int, int, int, int, int)\r\n   */\r\n  public getMoladHours(): number {\r\n    return this.moladHours;\r\n  }\r\n\r\n  /**\r\n   * Sets the molad hours.\r\n   *\r\n   * @param moladHours\r\n   *            the molad hours to set\r\n   * @see #getMoladHours()\r\n   * @see #getMolad()\r\n   * @see #setJewishDate(int, int, int, int, int, int)\r\n   *\r\n   */\r\n  public setMoladHours(moladHours: number): void {\r\n    this.moladHours = moladHours;\r\n  }\r\n\r\n  /**\r\n   * Returns the molad minutes. Only an object populated with {@link #getMolad()},\r\n   * {@link #setJewishDate(int, int, int, int, int, int)} or or {@link #setMoladMinutes(int)} will have these fields\r\n   * populated. A regular JewishDate object will have this field set to 0.\r\n   *\r\n   * @return the molad minutes\r\n   * @see #setMoladMinutes(int)\r\n   * @see #getMolad()\r\n   * @see #setJewishDate(int, int, int, int, int, int)\r\n   */\r\n  public getMoladMinutes(): number {\r\n    return this.moladMinutes;\r\n  }\r\n\r\n  /**\r\n   * Sets the molad minutes. The expectation is that the traditional minute-less chalakim will be broken out to\r\n   * minutes and {@link #setMoladChalakim(int) chalakim/parts} , so 793 (TaShTZaG) parts would have the minutes set to\r\n   * 44 and chalakim to 1.\r\n   *\r\n   * @param moladMinutes\r\n   *            the molad minutes to set\r\n   * @see #getMoladMinutes()\r\n   * @see #setMoladChalakim(int)\r\n   * @see #getMolad()\r\n   * @see #setJewishDate(int, int, int, int, int, int)\r\n   *\r\n   */\r\n  public setMoladMinutes(moladMinutes: number): void {\r\n    this.moladMinutes = moladMinutes;\r\n  }\r\n\r\n  /**\r\n   * Sets the molad chalakim/parts. The expectation is that the traditional minute-less chalakim will be broken out to\r\n   * {@link #setMoladMinutes(int) minutes} and chalakim, so 793 (TaShTZaG) parts would have the minutes set to 44 and\r\n   * chalakim to 1.\r\n   *\r\n   * @param moladChalakim\r\n   *            the molad chalakim/parts to set\r\n   * @see #getMoladChalakim()\r\n   * @see #setMoladMinutes(int)\r\n   * @see #getMolad()\r\n   * @see #setJewishDate(int, int, int, int, int, int)\r\n   *\r\n   */\r\n  public setMoladChalakim(moladChalakim: number): void {\r\n    this.moladChalakim = moladChalakim;\r\n  }\r\n\r\n  /**\r\n   * Returns the molad chalakim/parts. Only an object populated with {@link #getMolad()},\r\n   * {@link #setJewishDate(int, int, int, int, int, int)} or or {@link #setMoladChalakim(int)} will have these fields\r\n   * populated. A regular JewishDate object will have this field set to 0.\r\n   *\r\n   * @return the molad chalakim/parts\r\n   * @see #setMoladChalakim(int)\r\n   * @see #getMolad()\r\n   * @see #setJewishDate(int, int, int, int, int, int)\r\n   */\r\n  public getMoladChalakim(): number {\r\n    return this.moladChalakim;\r\n  }\r\n\r\n  /**\r\n   * Returns the last day in a gregorian month\r\n   *\r\n   * @param month\r\n   *            the Gregorian month\r\n   * @return the last day of the Gregorian month\r\n   */\r\n  public getLastDayOfGregorianMonth(month: number): number {\r\n    return this.date.with({ month }).daysInMonth;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of days in a given month in a given month and year.\r\n   *\r\n   * @param month\r\n   *            the month. As with other cases in this class, this is 1-based, not zero-based.\r\n   * @param year\r\n   *            the year (only impacts February)\r\n   * @return the number of days in the month in the given year\r\n   */\r\n  private static getLastDayOfGregorianMonth(month: number, year: number): number {\r\n    switch (month) {\r\n      case 2:\r\n        if ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)) {\r\n          return 29;\r\n        }\r\n        return 28;\r\n      case 4:\r\n      case 6:\r\n      case 9:\r\n      case 11:\r\n        return 30;\r\n      default:\r\n        return 31;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Computes the Gregorian date from the absolute date. ND+ER\r\n   * @param absDate - the absolute date\r\n   */\r\n  private absDateToDate(absDate: number): void {\r\n    let year: number = Math.trunc(absDate / 366); // Search forward year by year from approximate year\r\n    while (absDate >= JewishDate.gregorianDateToAbsDate(year + 1, 1, 1)) {\r\n      year++;\r\n    }\r\n\r\n    let month: number = 1; // Search forward month by month from January\r\n    while (absDate > JewishDate.gregorianDateToAbsDate(year, month, JewishDate.getLastDayOfGregorianMonth(month, year))) {\r\n      month++;\r\n    }\r\n\r\n    const dayOfMonth: number = absDate - JewishDate.gregorianDateToAbsDate(year, month, 1) + 1;\r\n    this.setInternalGregorianDate(year, month, dayOfMonth);\r\n  }\r\n\r\n  /**\r\n   * Computes the absolute date from a Gregorian date. ND+ER\r\n   *\r\n   * @param year\r\n   *            the Gregorian year\r\n   * @param month\r\n   *            the Gregorian month. Unlike the Java Calendar where January has the value of 0,This expects a 1 for\r\n   *            January\r\n   * @param dayOfMonth\r\n   *            the day of the month (1st, 2nd, etc...)\r\n   * @return the absolute Gregorian day\r\n   */\r\n  private static gregorianDateToAbsDate(year: number, month: number, dayOfMonth: number): number {\r\n    let absDate: number = dayOfMonth;\r\n    for (let m: number = month - 1; m > 0; m--) {\r\n      absDate += JewishDate.getLastDayOfGregorianMonth(m, year); // days in prior months of the year\r\n    }\r\n    return (absDate // days this year\r\n      + 365 * (year - 1) // days in previous years ignoring leap days\r\n      + Math.trunc((year - 1) / 4) // Julian leap days before this year\r\n      - Math.trunc((year - 1) / 100) // minus prior century years\r\n      + Math.trunc((year - 1) / 400)); // plus prior years divisible by 400\r\n  }\r\n\r\n  /**\r\n   * Returns if the year is a Jewish leap year. Years 3, 6, 8, 11, 14, 17 and 19 in the 19 year cycle are leap years.\r\n   *\r\n   * @param year\r\n   *            the Jewish year.\r\n   * @return true if it is a leap year\r\n   * @see #isJewishLeapYear()\r\n   */\r\n  private static isJewishLeapYear(year: number): boolean {\r\n    return ((7 * year) + 1) % 19 < 7;\r\n  }\r\n\r\n  /**\r\n   * Returns if the year the calendar is set to is a Jewish leap year. Years 3, 6, 8, 11, 14, 17 and 19 in the 19 year\r\n   * cycle are leap years.\r\n   *\r\n   * @return true if it is a leap year\r\n   * @see #isJewishLeapYear(int)\r\n   */\r\n  public isJewishLeapYear(): boolean {\r\n    return JewishDate.isJewishLeapYear(this.getJewishYear());\r\n  }\r\n\r\n  /**\r\n   * Returns the last month of a given Jewish year. This will be 12 on a non {@link #isJewishLeapYear(int) leap year}\r\n   * or 13 on a leap year.\r\n   *\r\n   * @param year\r\n   *            the Jewish year.\r\n   * @return 12 on a non leap year or 13 on a leap year\r\n   * @see #isJewishLeapYear(int)\r\n   */\r\n  private static getLastMonthOfJewishYear(year: number): number {\r\n    return JewishDate.isJewishLeapYear(year) ? JewishDate.ADAR_II : JewishDate.ADAR;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of days elapsed from the Sunday prior to the start of the Jewish calendar to the mean\r\n   * conjunction of Tishri of the Jewish year.\r\n   *\r\n   * @param year\r\n   *            the Jewish year\r\n   * @return the number of days elapsed from prior to the molad Tohu BaHaRaD (Be = Monday, Ha= 5 hours and Rad =204\r\n   *         chalakim/parts) prior to the start of the Jewish calendar, to the mean conjunction of Tishri of the\r\n   *         Jewish year. BeHaRaD is 23:11:20 on Sunday night(5 hours 204/1080 chalakim after sunset on Sunday\r\n   *         evening).\r\n   */\r\n  public static getJewishCalendarElapsedDays(year: number): number {\r\n    const chalakimSince: number = JewishDate.getChalakimSinceMoladTohu(year, JewishDate.TISHREI);\r\n    const moladDay: number = Math.trunc(chalakimSince / JewishDate.CHALAKIM_PER_DAY);\r\n    const moladParts: number = Math.trunc(chalakimSince - moladDay * JewishDate.CHALAKIM_PER_DAY);\r\n    // delay Rosh Hashana for the 4 dechiyos\r\n    return JewishDate.addDechiyos(year, moladDay, moladParts);\r\n  }\r\n\r\n  // private static int getJewishCalendarElapsedDaysOLD(int year) {\r\n  // // Jewish lunar month = 29 days, 12 hours and 793 chalakim\r\n  // // Molad Tohu = BeHaRaD - Monday, 5 hours (11 PM) and 204 chalakim\r\n  // final int chalakimTashTZag = 793; // chalakim in a lunar month\r\n  // final int chalakimTohuRaD = 204; // chalakim from original molad Tohu BeHaRaD\r\n  // final int hoursTohuHa = 5; // hours from original molad Tohu BeHaRaD\r\n  // final int dayTohu = 1; // Monday (0 based)\r\n  //\r\n  // int monthsElapsed = (235 * ((year - 1) / 19)) // Months in complete 19 year lunar (Metonic) cycles so far\r\n  // + (12 * ((year - 1) % 19)) // Regular months in this cycle\r\n  // + ((7 * ((year - 1) % 19) + 1) / 19); // Leap months this cycle\r\n  // // start with Molad Tohu BeHaRaD\r\n  // // start with RaD of BeHaRaD and add TaShTzaG (793) chalakim plus elapsed chalakim\r\n  // int partsElapsed = chalakimTohuRaD + chalakimTashTZag * (monthsElapsed % 1080);\r\n  // // start with Ha hours of BeHaRaD, add 12 hour remainder of lunar month add hours elapsed\r\n  // int hoursElapsed = hoursTohuHa + 12 * monthsElapsed + 793 * (monthsElapsed / 1080) + partsElapsed / 1080;\r\n  // // start with Monday of BeHaRaD = 1 (0 based), add 29 days of the lunar months elapsed\r\n  // int conjunctionDay = dayTohu + 29 * monthsElapsed + hoursElapsed / 24;\r\n  // int conjunctionParts = 1080 * (hoursElapsed % 24) + partsElapsed % 1080;\r\n  // return addDechiyos(year, conjunctionDay, conjunctionParts);\r\n  // }\r\n\r\n  /**\r\n   * Adds the 4 dechiyos for molad Tishrei. These are:\r\n   * <ol>\r\n   * <li>Lo ADU Rosh - Rosh Hashana can't fall on a Sunday, Wednesday or Friday. If the molad fell on one of these\r\n   * days, Rosh Hashana is delayed to the following day.</li>\r\n   * <li>Molad Zaken - If the molad of Tishrei falls after 12 noon, Rosh Hashana is delayed to the following day. If\r\n   * the following day is ADU, it will be delayed an additional day.</li>\r\n   * <li>GaTRaD - If on a non leap year the molad of Tishrei falls on a Tuesday (Ga) on or after 9 hours (T) and 204\r\n   * chalakim (TRaD) it is delayed till Thursday (one day delay, plus one day for Lo ADU Rosh)</li>\r\n   * <li>BeTuTaKFoT - if the year following a leap year falls on a Monday (Be) on or after 15 hours (Tu) and 589\r\n   * chalakim (TaKFoT) it is delayed till Tuesday</li>\r\n   * </ol>\r\n   *\r\n   * @param year - the year\r\n   * @param moladDay - the molad day\r\n   * @param moladParts - the molad parts\r\n   * @return the number of elapsed days in the JewishCalendar adjusted for the 4 dechiyos.\r\n   */\r\n  private static addDechiyos(year: number, moladDay: number, moladParts: number): number {\r\n    let roshHashanaDay: number = moladDay; // if no dechiyos\r\n    // delay Rosh Hashana for the dechiyos of the Molad - new moon 1 - Molad Zaken, 2- GaTRaD 3- BeTuTaKFoT\r\n    if ((moladParts >= 19440) // Dechiya of Molad Zaken - molad is >= midday (18 hours * 1080 chalakim)\r\n      || (((moladDay % 7) === 2) // start Dechiya of GaTRaD - Ga = is a Tuesday\r\n        && (moladParts >= 9924) // TRaD = 9 hours, 204 parts or later (9 * 1080 + 204)\r\n        && !JewishDate.isJewishLeapYear(year)) // of a non-leap year - end Dechiya of GaTRaD\r\n      || (((moladDay % 7) === 1) // start Dechiya of BeTuTaKFoT - Be = is on a Monday\r\n        && (moladParts >= 16789) // TRaD = 15 hours, 589 parts or later (15 * 1080 + 589)\r\n        && (JewishDate.isJewishLeapYear(year - 1)))) { // in a year following a leap year - end Dechiya of BeTuTaKFoT\r\n      roshHashanaDay += 1; // Then postpone Rosh HaShanah one day\r\n    }\r\n    // start 4th Dechiya - Lo ADU Rosh - Rosh Hashana can't occur on A- sunday, D- Wednesday, U - Friday\r\n    if (((roshHashanaDay % 7) === 0) // If Rosh HaShanah would occur on Sunday,\r\n      || ((roshHashanaDay % 7) === 3) // or Wednesday,\r\n      || ((roshHashanaDay % 7) === 5)) { // or Friday - end 4th Dechiya - Lo ADU Rosh\r\n      roshHashanaDay++; // Then postpone it one (more) day\r\n    }\r\n    return roshHashanaDay;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of chalakim (parts - 1080 to the hour) from the original hypothetical Molad Tohu to the year\r\n   * and month passed in.\r\n   *\r\n   * @param year\r\n   *            the Jewish year\r\n   * @param month\r\n   *            the Jewish month the Jewish month, with the month numbers starting from Nisan. Use the JewishDate\r\n   *            constants such as {@link JewishDate#TISHREI}.\r\n   * @return the number of chalakim (parts - 1080 to the hour) from the original hypothetical Molad Tohu\r\n   */\r\n  private static getChalakimSinceMoladTohu(year: number, month: number): number {\r\n    // Jewish lunar month = 29 days, 12 hours and 793 chalakim\r\n    // chalakim since Molad Tohu BeHaRaD - 1 day, 5 hours and 204 chalakim\r\n    const monthOfYear: number = JewishDate.getJewishMonthOfYear(year, month);\r\n    const monthsElapsed: number = (235 * Math.trunc((year - 1) / 19)) // Months in complete 19 year lunar (Metonic) cycles so far\r\n      + (12 * ((year - 1) % 19)) // Regular months in this cycle\r\n      + Math.trunc((7 * ((year - 1) % 19) + 1) / 19) // Leap months this cycle\r\n      + (monthOfYear - 1); // add elapsed months till the start of the molad of the month\r\n    // return chalakim prior to BeHaRaD + number of chalakim since\r\n    return JewishDate.CHALAKIM_MOLAD_TOHU + (JewishDate.CHALAKIM_PER_MONTH * monthsElapsed);\r\n  }\r\n\r\n  /**\r\n   * Returns the number of chalakim (parts - 1080 to the hour) from the original hypothetical Molad Tohu to the Jewish\r\n   * year and month that this Object is set to.\r\n   *\r\n   * @return the number of chalakim (parts - 1080 to the hour) from the original hypothetical Molad Tohu\r\n   */\r\n  public getChalakimSinceMoladTohu(): number {\r\n    const hebrewCalendar = this.date.withCalendar(\"hebrew\")\r\n    return JewishDate.getChalakimSinceMoladTohu(hebrewCalendar.year, hebrewCalendar.month);\r\n  }\r\n\r\n  /**\r\n   * Converts the {@link JewishDate#NISSAN} based constants used by this class to numeric month starting from\r\n   * {@link JewishDate#TISHREI}. This is required for Molad claculations.\r\n   *\r\n   * @param year\r\n   *            The Jewish year\r\n   * @param month\r\n   *            The Jewish Month\r\n   * @return the Jewish month of the year starting with Tishrei\r\n   */\r\n  private static getJewishMonthOfYear(year: number, month: number): number {\r\n    const jDate = new JewishDate(year, month, 1)\r\n    return jDate.date.withCalendar(\"hebrew\").month;\r\n  }\r\n\r\n  /**\r\n   * Validates the components of a Jewish date for validity. It will throw an {@link IllegalArgumentException} if the\r\n   * Jewish date is earlier than 18 Teves, 3761 (1/1/1 Gregorian), a month < 1 or > 12 (or 13 on a\r\n   * {@link #isJewishLeapYear(int) leap year}), the day of month is < 1 or > 30, an hour < 0 or > 23, a minute < 0 >\r\n   * 59 or chalakim < 0 > 17. For larger a larger number of chalakim such as 793 (TaShTzaG) break the chalakim into\r\n   * minutes (18 chalakim per minutes, so it would be 44 minutes and 1 chelek in the case of 793/TaShTzaG).\r\n   *\r\n   * @param year\r\n   *            the Jewish year to validate. It will reject any year <= 3761 (lower than the year 1 Gregorian).\r\n   * @param month\r\n   *            the Jewish month to validate. It will reject a month < 1 or > 12 (or 13 on a leap year) .\r\n   * @param dayOfMonth\r\n   *            the day of the Jewish month to validate. It will reject any value < 1 or > 30 TODO: check calling\r\n   *            methods to see if there is any reason that the class can validate that 30 is invalid for some months.\r\n   * @param hours\r\n   *            the hours (for molad calculations). It will reject an hour < 0 or > 23\r\n   * @param minutes\r\n   *            the minutes (for molad calculations). It will reject a minute < 0 or > 59\r\n   * @param chalakim\r\n   *            the chalakim/parts (for molad calculations). It will reject a chalakim < 0 or > 17. For larger numbers\r\n   *            such as 793 (TaShTzaG) break the chalakim into minutes (18 chalakim per minutes, so it would be 44\r\n   *            minutes and 1 chelek in the case of 793/TaShTzaG)\r\n   *\r\n   * @throws IllegalArgumentException\r\n   *             if a A Jewish date earlier than 18 Teves, 3761 (1/1/1 Gregorian), a month < 1 or > 12 (or 13 on a\r\n   *             leap year), the day of month is < 1 or > 30, an hour < 0 or > 23, a minute < 0 > 59 or chalakim < 0 >\r\n   *             17. For larger a larger number of chalakim such as 793 (TaShTzaG) break the chalakim into minutes (18\r\n   *             chalakim per minutes, so it would be 44 minutes and 1 chelek in the case of 793 (TaShTzaG).\r\n   */\r\n  private static validateJewishDate(year: number, month: number, dayOfMonth: number, hours: number, minutes: number, chalakim: number): void {\r\n    if (month < JewishDate.NISSAN || month > JewishDate.getLastMonthOfJewishYear(year)) {\r\n      throw new IllegalArgumentException(`The Jewish month has to be between 1 and 12 (or 13 on a leap year). ${month} is invalid for the year ${year}.`);\r\n    }\r\n    if (dayOfMonth < 1 || dayOfMonth > 30) {\r\n      throw new IllegalArgumentException(`The Jewish day of month can't be < 1 or > 30. ${dayOfMonth} is invalid.`);\r\n    }\r\n    // reject dates prior to 18 Teves, 3761 (1/1/1 AD). This restriction can be relaxed if the date coding is\r\n    // changed/corrected\r\n    if ((year < 3761) || (year === 3761 && (month >= JewishDate.TISHREI && month < JewishDate.TEVES))\r\n      || (year === 3761 && month === JewishDate.TEVES && dayOfMonth < 18)) {\r\n      throw new IllegalArgumentException(`A Jewish date earlier than 18 Teves, 3761 (1/1/1 Gregorian) can't be set. ${year}, ${month}, ${dayOfMonth} is invalid.`);\r\n    }\r\n    if (hours < 0 || hours > 23) {\r\n      throw new IllegalArgumentException(`Hours < 0 or > 23 can't be set. ${hours} is invalid.`);\r\n    }\r\n\r\n    if (minutes < 0 || minutes > 59) {\r\n      throw new IllegalArgumentException(`Minutes < 0 or > 59 can't be set. ${minutes} is invalid.`);\r\n    }\r\n\r\n    if (chalakim < 0 || chalakim > 17) {\r\n      throw new IllegalArgumentException(`Chalakim/parts < 0 or > 17 can't be set. ${chalakim} is invalid. For larger numbers such as 793 (TaShTzaG) break the chalakim into minutes (18 chalakim per minutes, so it would be 44 minutes and 1 chelek in the case of 793 (TaShTzaG)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates the components of a Gregorian date for validity. It will throw an {@link IllegalArgumentException} if a\r\n   * year of < 1, a month < 0 or > 11 or a day of month < 1 is passed in.\r\n   *\r\n   * @param year\r\n   *            the Gregorian year to validate. It will reject any year < 1.\r\n   * @param month\r\n   *            the Gregorian month number to validate. It will enforce that the month is between 0 - 11 like a\r\n   *            {@link GregorianCalendar}, where {@link Calendar#JANUARY} has a value of 0.\r\n   * @param dayOfMonth\r\n   *            the day of the Gregorian month to validate. It will reject any value < 1, but will allow values > 31\r\n   *            since calling methods will simply set it to the maximum for that month. TODO: check calling methods to\r\n   *            see if there is any reason that the class needs days > the maximum.\r\n   * @throws IllegalArgumentException\r\n   *             if a year of < 1, a month < 0 or > 11 or a day of month < 1 is passed in\r\n   * @see #validateGregorianYear(int)\r\n   * @see #validateGregorianMonth(int)\r\n   * @see #validateGregorianDayOfMonth(int)\r\n   */\r\n  private static validateGregorianDate(year: number, month: number, dayOfMonth: number): void {\r\n    JewishDate.validateGregorianMonth(month);\r\n    JewishDate.validateGregorianDayOfMonth(dayOfMonth);\r\n    JewishDate.validateGregorianYear(year);\r\n  }\r\n\r\n  /**\r\n   * Validates a Gregorian month for validity.\r\n   *\r\n   * @param month\r\n   *            the Gregorian month number to validate. It will enforce that the month is between 0 - 11 like a\r\n   *            {@link GregorianCalendar}, where {@link Calendar#JANUARY} has a value of 0.\r\n   */\r\n  private static validateGregorianMonth(month: number): void {\r\n    if (month > 11 || month < 0) {\r\n      throw new IllegalArgumentException(`The Gregorian month has to be between 0 - 11. ${month} is invalid.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates a Gregorian day of month for validity.\r\n   *\r\n   * @param dayOfMonth\r\n   *            the day of the Gregorian month to validate. It will reject any value < 1, but will allow values > 31\r\n   *            since calling methods will simply set it to the maximum for that month. TODO: check calling methods to\r\n   *            see if there is any reason that the class needs days > the maximum.\r\n   */\r\n  private static validateGregorianDayOfMonth(dayOfMonth: number): void {\r\n    if (dayOfMonth <= 0) {\r\n      throw new IllegalArgumentException(`The day of month can't be less than 1. ${dayOfMonth} is invalid.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates a Gregorian year for validity.\r\n   *\r\n   * @param year\r\n   *            the Gregorian year to validate. It will reject any year < 1.\r\n   */\r\n  private static validateGregorianYear(year: number): void {\r\n    if (year < 1) {\r\n      throw new IllegalArgumentException(`Years < 1 can't be calculated. ${year} is invalid.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of days for a given Jewish year. ND+ER\r\n   *\r\n   * @param year\r\n   *            the Jewish year\r\n   * @return the number of days for a given Jewish year.\r\n   * @see #isCheshvanLong()\r\n   * @see #isKislevShort()\r\n   */\r\n  public static getDaysInJewishYear(year: number): number {\r\n    return Temporal.Now.plainDateISO().withCalendar(\"hebrew\").with({ year }).daysInYear;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of days for the current year that the calendar is set to.\r\n   *\r\n   * @return the number of days for the Object's current Jewish year.\r\n   * @see #isCheshvanLong()\r\n   * @see #isKislevShort()\r\n   * @see #isJewishLeapYear()\r\n   */\r\n  public getDaysInJewishYear(): number {\r\n    return JewishDate.getDaysInJewishYear(this.getJewishYear());\r\n  }\r\n\r\n  /**\r\n   * Returns if Cheshvan is long in a given Jewish year. The method name isLong is done since in a Kesidran (ordered)\r\n   * year Cheshvan is short. ND+ER\r\n   *\r\n   * @param year\r\n   *            the year\r\n   * @return true if Cheshvan is long in Jewish year.\r\n   * @see #isCheshvanLong()\r\n   * @see #getCheshvanKislevKviah()\r\n   */\r\n  private static isCheshvanLong(year: number): boolean {\r\n    return JewishDate.getDaysInJewishYear(year) % 10 === 5;\r\n  }\r\n\r\n  /**\r\n   * Returns if Cheshvan is long (30 days VS 29 days) for the current year that the calendar is set to. The method\r\n   * name isLong is done since in a Kesidran (ordered) year Cheshvan is short.\r\n   *\r\n   * @return true if Cheshvan is long for the current year that the calendar is set to\r\n   * @see #isCheshvanLong()\r\n   */\r\n  public isCheshvanLong(): boolean {\r\n    return JewishDate.isCheshvanLong(this.getJewishYear());\r\n  }\r\n\r\n  /**\r\n   * Returns if Kislev is short (29 days VS 30 days) in a given Jewish year. The method name isShort is done since in\r\n   * a Kesidran (ordered) year Kislev is long. ND+ER\r\n   *\r\n   * @param year\r\n   *            the Jewish year\r\n   * @return true if Kislev is short for the given Jewish year.\r\n   * @see #isKislevShort()\r\n   * @see #getCheshvanKislevKviah()\r\n   */\r\n  private static isKislevShort(year: number): boolean {\r\n    return JewishDate.getDaysInJewishYear(year) % 10 === 3;\r\n  }\r\n\r\n  /**\r\n   * Returns if the Kislev is short for the year that this class is set to. The method name isShort is done since in a\r\n   * Kesidran (ordered) year Kislev is long.\r\n   *\r\n   * @return true if Kislev is short for the year that this class is set to\r\n   */\r\n  public isKislevShort(): boolean {\r\n    return JewishDate.isKislevShort(this.getJewishYear());\r\n  }\r\n\r\n  /**\r\n   * Returns the Cheshvan and Kislev kviah (whether a Jewish year is short, regular or long). It will return\r\n   * {@link #SHELAIMIM} if both cheshvan and kislev are 30 days, {@link #KESIDRAN} if Cheshvan is 29 days and Kislev\r\n   * is 30 days and {@link #CHASERIM} if both are 29 days.\r\n   *\r\n   * @return {@link #SHELAIMIM} if both cheshvan and kislev are 30 days, {@link #KESIDRAN} if Cheshvan is 29 days and\r\n   *         Kislev is 30 days and {@link #CHASERIM} if both are 29 days.\r\n   * @see #isCheshvanLong()\r\n   * @see #isKislevShort()\r\n   */\r\n  public getCheshvanKislevKviah(): number {\r\n    if (this.isCheshvanLong() && !this.isKislevShort()) {\r\n      return JewishDate.SHELAIMIM;\r\n    } else if (!this.isCheshvanLong() && this.isKislevShort()) {\r\n      return JewishDate.CHASERIM;\r\n    }\r\n    return JewishDate.KESIDRAN;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of days of a Jewish month for a given month and year.\r\n   *\r\n   * @param month\r\n   *            the Jewish month\r\n   * @param year\r\n   *            the Jewish Year\r\n   * @return the number of days for a given Jewish month\r\n   */\r\n  private static getDaysInJewishMonth(month: number, year: number): number {\r\n    return Temporal.Now.plainDateISO().withCalendar(\"hebrew\").with({ month, year }).daysInMonth;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of days of the Jewish month that the calendar is currently set to.\r\n   *\r\n   * @return the number of days for the Jewish month that the calendar is currently set to.\r\n   */\r\n  public getDaysInJewishMonth(): number {\r\n    return JewishDate.getDaysInJewishMonth(this.getJewishMonth(), this.getJewishYear());\r\n  }\r\n\r\n  /**\r\n   * Returns the molad for a given year and month. Returns a JewishDate {@link Object} set to the date of the molad\r\n   * with the {@link #getMoladHours() hours}, {@link #getMoladMinutes() minutes} and {@link #getMoladChalakim()\r\n     * chalakim} set. In the current implementation, it sets the molad time based on a midnight date rollover. This\r\n   * means that Rosh Chodesh Adar II, 5771 with a molad of 7 chalakim past midnight on Shabbos 29 Adar I / March 5,\r\n   * 2011 12:00 AM and 7 chalakim, will have the following values: hours: 0, minutes: 0, Chalakim: 7.\r\n   *\r\n   * @return a JewishDate {@link Object} set to the date of the molad with the {@link #getMoladHours() hours},\r\n   *         {@link #getMoladMinutes() minutes} and {@link #getMoladChalakim() chalakim} set.\r\n   */\r\n  public getMolad(): JewishDate {\r\n    const moladDate: JewishDate = new JewishDate(this.getChalakimSinceMoladTohu());\r\n    if (moladDate.getMoladHours() >= 6) {\r\n      moladDate.forward(Calendar.DATE, 1);\r\n    }\r\n    moladDate.setMoladHours((moladDate.getMoladHours() + 18) % 24);\r\n    return moladDate;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of days from the Jewish epoch from the number of chalakim from the epoch passed in.\r\n   *\r\n   * @param chalakim\r\n   *            the number of chalakim since the beginning of Sunday prior to BaHaRaD\r\n   * @return the number of days from the Jewish epoch\r\n   */\r\n  private static moladToAbsDate(chalakim: number): number {\r\n    return Math.trunc(chalakim / JewishDate.CHALAKIM_PER_DAY) + JewishDate.JEWISH_EPOCH;\r\n  }\r\n\r\n  /**\r\n   * Constructor that creates a JewishDate based on a molad passed in. The molad would be the number of chalakim/parts\r\n   * starting at the beginning of Sunday prior to the molad Tohu BeHaRaD (Be = Monday, Ha= 5 hours and Rad =204\r\n   * chalakim/parts) - prior to the start of the Jewish calendar. BeHaRaD is 23:11:20 on Sunday night(5 hours 204/1080\r\n   * chalakim after sunset on Sunday evening).\r\n   *\r\n   * @param molad the number of chalakim since the beginning of Sunday prior to BaHaRaD\r\n   */\r\n\r\n  /*\r\n      public JewishDate(molad: number) {\r\n          this.absDateToDate(JewishDate.moladToAbsDate(molad));\r\n          // long chalakimSince = getChalakimSinceMoladTohu(year, JewishDate.TISHREI);// tishrei\r\n          const conjunctionDay: number = Math.trunc(molad / JewishDate.CHALAKIM_PER_DAY);\r\n          const conjunctionParts: number = Math.trunc(molad - conjunctionDay * JewishDate.CHALAKIM_PER_DAY);\r\n          this.setMoladTime(conjunctionParts);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Sets the molad time (hours minutes and chalakim) based on the number of chalakim since the start of the day.\r\n   *\r\n   * @param chalakim\r\n   *            the number of chalakim since the start of the day.\r\n   */\r\n  private setMoladTime(chalakim: number): void {\r\n    let adjustedChalakim: number = chalakim;\r\n    this.setMoladHours(Math.trunc(adjustedChalakim / JewishDate.CHALAKIM_PER_HOUR));\r\n    adjustedChalakim = adjustedChalakim - (this.getMoladHours() * JewishDate.CHALAKIM_PER_HOUR);\r\n    this.setMoladMinutes(Math.trunc(adjustedChalakim / JewishDate.CHALAKIM_PER_MINUTE));\r\n    this.setMoladChalakim(adjustedChalakim - this.moladMinutes * JewishDate.CHALAKIM_PER_MINUTE);\r\n  }\r\n\r\n  /**\r\n   * returns the number of days from Rosh Hashana of the date passed in, to the full date passed in.\r\n   *\r\n   * @return the number of days\r\n   */\r\n  public getDaysSinceStartOfJewishYear(): number {\r\n    const roshHashanah = this.date.withCalendar(\"hebrew\").with({ month: 1, day: 1 }).subtract({ days: 1 })\r\n    return roshHashanah.until(this.date.withCalendar(\"hebrew\")).total(\"days\")\r\n  }\r\n\r\n  constructor(jewishYear: number, jewishMonth: number, jewishDayOfMonth: number);\r\n  constructor(molad: number);\r\n  constructor(date: Date);\r\n  constructor(date: Temporal.PlainDate);\r\n  constructor();\r\n  constructor(jewishYearOrPlainDateOrDateOrMolad?: number | Date | Temporal.PlainDate, jewishMonth?: number, jewishDayOfMonth?: number) {\r\n    this.date = Temporal.Now.plainDateISO();\r\n    if (jewishMonth) {\r\n      this.setJewishDate(jewishYearOrPlainDateOrDateOrMolad as number, jewishMonth, jewishDayOfMonth!);\r\n    } else if (jewishYearOrPlainDateOrDateOrMolad instanceof Date) {\r\n      this.setDate(Temporal.Instant.fromEpochMilliseconds(jewishYearOrPlainDateOrDateOrMolad.valueOf()).toZonedDateTimeISO('UTC').toPlainDate());\r\n    } else if (jewishYearOrPlainDateOrDateOrMolad instanceof Temporal.PlainDate) {\r\n      this.setDate(jewishYearOrPlainDateOrDateOrMolad);\r\n    } else if (typeof jewishYearOrPlainDateOrDateOrMolad === 'number') {\r\n      const molad = jewishYearOrPlainDateOrDateOrMolad;\r\n      this.absDateToDate(JewishDate.moladToAbsDate(molad));\r\n      // long chalakimSince = getChalakimSinceMoladTohu(year, JewishDate.TISHREI);// tishrei\r\n      const conjunctionDay: number = Math.trunc(molad / JewishDate.CHALAKIM_PER_DAY);\r\n      const conjunctionParts: number = Math.trunc(molad - conjunctionDay * JewishDate.CHALAKIM_PER_DAY);\r\n      this.setMoladTime(conjunctionParts);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a Jewish date based on a Jewish year, month and day of month.\r\n   *\r\n   * @param jewishYear\r\n   *            the Jewish year\r\n   * @param jewishMonth\r\n   *            the Jewish month. The method expects a 1 for Nissan ... 12 for Adar and 13 for Adar II. Use the\r\n   *            constants {@link #NISSAN} ... {@link #ADAR} (or {@link #ADAR_II} for a leap year Adar II) to avoid any\r\n   *            confusion.\r\n   * @param jewishDayOfMonth\r\n   *            the Jewish day of month. If 30 is passed in for a month with only 29 days (for example {@link #IYAR},\r\n   *            or {@link #KISLEV} in a year that {@link #isKislevShort()}), the 29th (last valid date of the month)\r\n   *            will be set\r\n   * @throws IllegalArgumentException\r\n   *             if the day of month is &lt; 1 or &gt; 30, or a year of &lt; 0 is passed in.\r\n   */\r\n  /*\r\n      public JewishDate(jewishYear: number, jewishMonth: number, jewishDayOfMonth: number) {\r\n          this.setJewishDate(jewishYear, jewishMonth, jewishDayOfMonth);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Default constructor will set a default date to the current system date.\r\n   */\r\n  /*\r\n      public JewishDate() {\r\n          this.resetDate();\r\n      }\r\n  */\r\n\r\n  /**\r\n   * A constructor that initializes the date to the {@link java.util.Date Date} paremeter.\r\n   *\r\n   * @param date\r\n   *            the <code>Date</code> to set the calendar to\r\n   * @throws IllegalArgumentException\r\n   *             if the date would fall prior to the January 1, 1 AD\r\n   */\r\n  /*\r\n      public JewishDate(date: Date) {\r\n          this.setDate(date);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * A constructor that initializes the date to the {@link java.util.Calendar Calendar} paremeter.\r\n   *\r\n   * @param calendar\r\n   *            the <code>Calendar</code> to set the calendar to\r\n   * @throws IllegalArgumentException\r\n   *             if the {@link Calendar#ERA} is {@link GregorianCalendar#BC}\r\n   */\r\n\r\n  /*\r\n      public JewishDate(calendar: GregorianCalendar) {\r\n          this.setDate(calendar);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Sets the date based on a {@link java.util.Calendar Calendar} object. Modifies the Jewish date as well.\r\n   *\r\n   * @param date\r\n   *            the <code>Calendar</code> to set the calendar to\r\n   * @throws IllegalArgumentException\r\n   *             if the {@link Calendar#ERA} is {@link GregorianCalendar#BC}\r\n   */\r\n  public setDate(date: Temporal.PlainDate): void {\r\n    if (date.year < 1) {\r\n      throw new IllegalArgumentException(`Dates with a BC era are not supported. The year ${date.year} is invalid.`);\r\n    }\r\n\r\n    this.date = date;\r\n  }\r\n\r\n  /**\r\n   * Sets the date based on a {@link java.util.Date Date} object. Modifies the Jewish date as well.\r\n   *\r\n   * @param date\r\n   *            the <code>Date</code> to set the calendar to\r\n   * @throws IllegalArgumentException\r\n   *             if the date would fall prior to the year 1 AD\r\n   */\r\n\r\n  /*\r\n      public setDate(date: Date): void {\r\n          const cal: GregorianCalendar = new GregorianCalendar();\r\n          cal.setTime(date);\r\n          this.setDate(cal);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Sets the Gregorian Date, and updates the Jewish date accordingly. Like the Java Calendar A value of 0 is expected\r\n   * for January.\r\n   *\r\n   * @param year\r\n   *            the Gregorian year\r\n   * @param month\r\n   *            the Gregorian month. Like the Java Calendar, this class expects 0 for January\r\n   * @param dayOfMonth\r\n   *            the Gregorian day of month. If this is &gt; the number of days in the month/year, the last valid date of\r\n   *            the month will be set\r\n   * @throws IllegalArgumentException\r\n   *             if a year of &lt; 1, a month &lt; 0 or &gt; 11 or a day of month &lt; 1 is passed in\r\n   */\r\n  public setGregorianDate(year: number, month: number, dayOfMonth: number): void {\r\n    JewishDate.validateGregorianDate(year, month, dayOfMonth);\r\n    this.setInternalGregorianDate(year, month + 1, dayOfMonth);\r\n  }\r\n\r\n  /**\r\n   * Sets the hidden internal representation of the Gregorian date , and updates the Jewish date accordingly. While\r\n   * public getters and setters have 0 based months matching the Java Calendar classes, This class internally\r\n   * represents the Gregorian month starting at 1. When this is called it will not adjust the month to match the Java\r\n   * Calendar classes.\r\n   *\r\n   * @param year - the year\r\n   * @param month - the month\r\n   * @param dayOfMonth - the day of month\r\n   */\r\n  private setInternalGregorianDate(year: number, month: number, dayOfMonth: number): void {\r\n    // make sure date is a valid date for the given month, if not, set to last day of month\r\n    if (dayOfMonth > JewishDate.getLastDayOfGregorianMonth(month, year)) {\r\n      dayOfMonth = JewishDate.getLastDayOfGregorianMonth(month, year);\r\n    }\r\n\r\n    this.date = new Temporal.PlainDate(year, month, dayOfMonth);\r\n  }\r\n\r\n  /**\r\n   * Sets the Jewish Date and updates the Gregorian date accordingly.\r\n   *\r\n   * @param year\r\n   *            the Jewish year. The year can't be negative\r\n   * @param month\r\n   *            the Jewish month starting with Nisan. A value of 1 is expected for Nissan ... 12 for Adar and 13 for\r\n   *            Adar II. Use the constants {@link #NISSAN} ... {@link #ADAR} (or {@link #ADAR_II} for a leap year Adar\r\n   *            II) to avoid any confusion.\r\n   * @param dayOfMonth\r\n   *            the Jewish day of month. valid values are 1-30. If the day of month is set to 30 for a month that only\r\n   *            has 29 days, the day will be set as 29.\r\n   * @throws IllegalArgumentException\r\n   *             if a A Jewish date earlier than 18 Teves, 3761 (1/1/1 Gregorian), a month &lt; 1 or &gt; 12 (or 13 on a\r\n   *             leap year) or the day of month is &lt; 1 or &gt; 30 is passed in\r\n   */\r\n\r\n  /*\r\n      public setJewishDate(year: number, month: number, dayOfMonth: number): void {\r\n          this.setJewishDate(year, month, dayOfMonth, 0, 0, 0);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Sets the Jewish Date and updates the Gregorian date accordingly.\r\n   *\r\n   * @param year\r\n   *            the Jewish year. The year can't be negative\r\n   * @param month\r\n   *            the Jewish month starting with Nisan. A value of 1 is expected for Nissan ... 12 for Adar and 13 for\r\n   *            Adar II. Use the constants {@link #NISSAN} ... {@link #ADAR} (or {@link #ADAR_II} for a leap year Adar\r\n   *            II) to avoid any confusion.\r\n   * @param dayOfMonth\r\n   *            the Jewish day of month. valid values are 1-30. If the day of month is set to 30 for a month that only\r\n   *            has 29 days, the day will be set as 29.\r\n   *\r\n   * @param hours\r\n   *            the hour of the day. Used for Molad calculations\r\n   * @param minutes\r\n   *            the minutes. Used for Molad calculations\r\n   * @param chalakim\r\n   *            the chalakim/parts. Used for Molad calculations. The chalakim should not exceed 17. Minutes should be\r\n   *            used for larger numbers.\r\n   *\r\n   * @throws IllegalArgumentException\r\n   *             if a A Jewish date earlier than 18 Teves, 3761 (1/1/1 Gregorian), a month &lt; 1 or &gt; 12 (or 13 on a\r\n   *             leap year), the day of month is &lt; 1 or &gt; 30, an hour &lt; 0 or &gt; 23, a minute &lt; 0 &gt; 59 or chalakim &lt; 0 &gt;\r\n   *             17. For larger a larger number of chalakim such as 793 (TaShTzaG) break the chalakim into minutes (18\r\n   *             chalakim per minutes, so it would be 44 minutes and 1 chelek in the case of 793 (TaShTzaG).\r\n   */\r\n  public setJewishDate(year: number, month: number, dayOfMonth: number, hours: number, minutes: number, chalakim: number): void;\r\n  public setJewishDate(year: number, month: number, dayOfMonth: number): void;\r\n  public setJewishDate(year: number, month: number, dayOfMonth: number, hours: number = 0, minutes: number = 0, chalakim: number = 0): void {\r\n    JewishDate.validateJewishDate(year, month, dayOfMonth, hours, minutes, chalakim);\r\n\r\n    // if 30 is passed for a month that only has 29 days (for example by rolling the month from a month that had 30\r\n    // days to a month that only has 29) set the date to 29th\r\n    if (dayOfMonth > JewishDate.getDaysInJewishMonth(month, year)) {\r\n      dayOfMonth = JewishDate.getDaysInJewishMonth(month, year);\r\n    }\r\n\r\n    let fixedMonth = month - 6;\r\n    if (fixedMonth < 1) {\r\n      fixedMonth += Temporal.PlainDate.from({ year, month, day: dayOfMonth, calendar: \"hebrew\" }).monthsInYear;\r\n    }\r\n\r\n    this.date = Temporal.PlainDate.from({ year, month: fixedMonth, day: dayOfMonth, calendar: \"hebrew\" }).withCalendar(\"iso8601\")\r\n  }\r\n\r\n  /**\r\n   * Returns this object's date as a {@link java.util.Calendar} object.\r\n   *\r\n   * @return The {@link java.util.Calendar}\r\n   */\r\n  public getDate(): Temporal.PlainDate {\r\n    return this.date;\r\n  }\r\n\r\n  /**\r\n   * Resets this date to the current system date.\r\n   */\r\n  public resetDate(): void {\r\n    this.setDate(Temporal.Now.plainDateISO());\r\n  }\r\n\r\n  /**\r\n   * Returns a string containing the Jewish date in the form, \"day Month, year\" e.g. \"21 Shevat, 5729\". For more\r\n   * complex formatting, use the formatter classes.\r\n   *\r\n   * This functionality is duplicated from {@link HebrewDateFormatter} to avoid circular dependencies.\r\n   *\r\n   * @return the Jewish date in the form \"day Month, year\" e.g. \"21 Shevat, 5729\"\r\n   * @see HebrewDateFormatter#format(JewishDate)\r\n   */\r\n  public toString(): string {\r\n    const transliteratedMonths: string[] = ['Nissan', 'Iyar', 'Sivan', 'Tammuz', 'Av', 'Elul', 'Tishrei', 'Cheshvan',\r\n      'Kislev', 'Teves', 'Shevat', 'Adar', 'Adar II', 'Adar I'];\r\n\r\n    let formattedMonth: string;\r\n    if (this.isJewishLeapYear() && this.getJewishMonth() === JewishDate.ADAR) {\r\n      formattedMonth = transliteratedMonths[13]; // return Adar I, not Adar in a leap year\r\n    } else {\r\n      formattedMonth = transliteratedMonths[this.getJewishMonth() - 1];\r\n    }\r\n\r\n    return `${this.getJewishDayOfMonth()} ${formattedMonth}, ${this.getJewishYear()}`;\r\n  }\r\n\r\n  /**\r\n   * Rolls the date, month or year forward by the amount passed in. It modifies both the Gregorian and Jewish dates\r\n   * accordingly. If manipulation beyond the fields supported here is required, use the {@link Calendar} class\r\n   * {@link Calendar#add(int, int)} or {@link Calendar#roll(int, int)} methods in the following manner.\r\n   *\r\n   * <pre>\r\n   * <code>\r\n   *     Calendar cal = jewishDate.getTime(); // get a java.util.Calendar representation of the JewishDate\r\n   *     cal.add(Calendar.MONTH, 3); // add 3 Gregorian months\r\n   *     jewishDate.setDate(cal); // set the updated calendar back to this class\r\n   * </code>\r\n   * </pre>\r\n   *\r\n   * @param field the calendar field to be forwarded. The must be {@link Calendar#DATE}, {@link Calendar#MONTH} or {@link Calendar#YEAR}\r\n   * @param amount the positive amount to move forward\r\n   * @throws IllegalArgumentException if the field is anything besides {@link Calendar#DATE}, {@link Calendar#MONTH}\r\n   * or {@link Calendar#YEAR} or if the amount is less than 1\r\n   *\r\n   * @see #back()\r\n   * @see Calendar#add(int, int)\r\n   * @see Calendar#roll(int, int)\r\n   */\r\n  public forward(field: number, amount: number): void {\r\n    if (![Calendar.DATE, Calendar.MONTH, Calendar.YEAR].includes(field)) {\r\n      throw new IllegalArgumentException('Unsupported field was passed to Forward. Only Calendar.DATE, Calendar.MONTH or Calendar.YEAR are supported.');\r\n    }\r\n    if (amount < 1) {\r\n      throw new IllegalArgumentException('JewishDate.forward() does not support amounts less than 1. See JewishDate.back()');\r\n    }\r\n    if (field === Calendar.DATE) {\r\n      this.date = this.date.add({ days: amount })\r\n    } else if (field === Calendar.MONTH) {\r\n      this.date = this.date.add({ months: amount })\r\n    } else if (field === Calendar.YEAR) {\r\n      this.date = this.date.add({ years: amount })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rolls the date back by 1 day. It modifies both the Gregorian and Jewish dates accordingly. The API does not\r\n   * currently offer the ability to forward more than one day t a time, or to forward by month or year. If such\r\n   * manipulation is required use the {@link Calendar} class {@link Calendar#add(int, int)} or\r\n   * {@link Calendar#roll(int, int)} methods in the following manner.\r\n   *\r\n   * <pre>\r\n   * <code>\r\n   *     Calendar cal = jewishDate.getTime(); // get a java.util.Calendar representation of the JewishDate\r\n   *     cal.add(Calendar.MONTH, -3); // subtract 3 Gregorian months\r\n   *     jewishDate.setDate(cal); // set the updated calendar back to this class\r\n   * </code>\r\n   * </pre>\r\n   *\r\n   * @see #back()\r\n   * @see Calendar#add(int, int)\r\n   * @see Calendar#roll(int, int)\r\n   */\r\n  public back(): void {\r\n    this.date = this.date.subtract({ days: 1 })\r\n  }\r\n\r\n  /**\r\n   * Indicates whether some other object is \"equal to\" this one.\r\n   * @see Object#equals(Object)\r\n   */\r\n  public equals(object: JewishDate): boolean {\r\n    return (object instanceof JewishDate && Temporal.PlainDate.compare(this.date, object.getDate()) == 0);\r\n  }\r\n\r\n  /**\r\n   * Compares two dates as per the compareTo() method in the Comparable interface. Returns a value less than 0 if this\r\n   * date is \"less than\" (before) the date, greater than 0 if this date is \"greater than\" (after) the date, or 0 if\r\n   * they are equal.\r\n   */\r\n  public compareTo(jewishDate: JewishDate): number {\r\n    return Temporal.PlainDate.compare(this.date, jewishDate.getDate());\r\n  }\r\n\r\n  /**\r\n   * Returns the Gregorian month (between 0-11).\r\n   *\r\n   * @return the Gregorian month (between 0-11). Like the java.util.Calendar, months are 0 based.\r\n   */\r\n  public getGregorianMonth(): number {\r\n    return this.date.withCalendar(\"iso8601\").month - 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the Gregorian day of the month.\r\n   *\r\n   * @return the Gregorian day of the mont\r\n   */\r\n  public getGregorianDayOfMonth(): number {\r\n    return this.date.withCalendar(\"iso8601\").day;\r\n  }\r\n\r\n  /**\r\n   * Returns the Gregotian year.\r\n   *\r\n   * @return the Gregorian year\r\n   */\r\n  public getGregorianYear(): number {\r\n    return this.date.withCalendar(\"iso8601\").year;\r\n  }\r\n\r\n  /**\r\n   * Returns the Jewish month 1-12 (or 13 years in a leap year). The month count starts with 1 for Nisan and goes to\r\n   * 13 for Adar II\r\n   *\r\n   * @return the Jewish month from 1 to 12 (or 13 years in a leap year). The month count starts with 1 for Nisan and\r\n   *         goes to 13 for Adar II\r\n   */\r\n  public getJewishMonth(): number {\r\n    let hebCal = this.date.withCalendar(\"hebrew\");\r\n\r\n    let cutOffNum = 6;\r\n    if (hebCal.monthsInYear == 13)\r\n      ++cutOffNum;\r\n\r\n    if (hebCal.month <= cutOffNum)\r\n      return hebCal.month + 6;\r\n    else\r\n      return hebCal.month - cutOffNum;\r\n  }\r\n\r\n  /**\r\n   * Returns the Jewish day of month.\r\n   *\r\n   * @return the Jewish day of the month\r\n   */\r\n  public getJewishDayOfMonth(): number {\r\n    return this.date.withCalendar(\"hebrew\").day;\r\n  }\r\n\r\n  /**\r\n   * Returns the Jewish year.\r\n   *\r\n   * @return the Jewish year\r\n   */\r\n  public getJewishYear(): number {\r\n    return this.date.withCalendar(\"hebrew\").year;\r\n  }\r\n\r\n  /**\r\n   * Returns the day of the week as a number between 1-7.\r\n   *\r\n   * @return the day of the week as a number between 1-7.\r\n   */\r\n  public getDayOfWeek(): number {\r\n    let dayOfWeek = this.date.dayOfWeek + 1;\r\n    if (dayOfWeek == 8)\r\n      dayOfWeek = 1\r\n    return dayOfWeek;\r\n  }\r\n\r\n  /**\r\n   * Sets the Gregorian month.\r\n   *\r\n   * @param month\r\n   *            the Gregorian month\r\n   *\r\n   * @throws IllegalArgumentException\r\n   *             if a month &lt; 0 or &gt; 11 is passed in\r\n   */\r\n  public setGregorianMonth(month: number): void {\r\n    JewishDate.validateGregorianMonth(month);\r\n    this.date = this.date.withCalendar(\"iso8601\").with({ month: month + 1 })\r\n  }\r\n\r\n  /**\r\n   * sets the Gregorian year.\r\n   *\r\n   * @param year\r\n   *            the Gregorian year.\r\n   * @throws IllegalArgumentException\r\n   *             if a year of &lt; 1 is passed in\r\n   */\r\n  public setGregorianYear(year: number): void {\r\n    JewishDate.validateGregorianYear(year);\r\n    this.date = this.date.withCalendar(\"iso8601\").with({ year })\r\n  }\r\n\r\n  /**\r\n   * sets the Gregorian Day of month.\r\n   *\r\n   * @param dayOfMonth\r\n   *            the Gregorian Day of month.\r\n   * @throws IllegalArgumentException\r\n   *             if the day of month of &lt; 1 is passed in\r\n   */\r\n  public setGregorianDayOfMonth(dayOfMonth: number): void {\r\n    JewishDate.validateGregorianDayOfMonth(dayOfMonth);\r\n    this.date = this.date.withCalendar(\"iso8601\").with({ day: dayOfMonth })\r\n  }\r\n\r\n  /**\r\n   * sets the Jewish month.\r\n   *\r\n   * @param month\r\n   *            the Jewish month from 1 to 12 (or 13 years in a leap year). The month count starts with 1 for Nisan\r\n   *            and goes to 13 for Adar II\r\n   * @throws IllegalArgumentException\r\n   *             if a month &lt; 1 or &gt; 12 (or 13 on a leap year) is passed in\r\n   */\r\n  public setJewishMonth(month: number): void {\r\n    const hebrewCalendar = this.date.withCalendar(\"hebrew\")\r\n    this.setJewishDate(hebrewCalendar.year, month, hebrewCalendar.day);\r\n  }\r\n\r\n  /**\r\n   * sets the Jewish year.\r\n   *\r\n   * @param year\r\n   *            the Jewish year\r\n   * @throws IllegalArgumentException\r\n   *             if a year of &lt; 3761 is passed in. The same will happen if the year is 3761 and the month and day\r\n   *             previously set are &lt; 18 Teves (preior to Jan 1, 1 AD)\r\n   */\r\n  public setJewishYear(year: number): void {\r\n    const hebrewCalendar = this.date.withCalendar(\"hebrew\")\r\n    this.setJewishDate(year, this.getJewishMonth(), hebrewCalendar.day);\r\n\r\n    this.date = this.date.withCalendar(\"hebrew\").with({ year }).withCalendar(\"iso8601\");\r\n  }\r\n\r\n  /**\r\n   * sets the Jewish day of month.\r\n   *\r\n   * @param dayOfMonth\r\n   *            the Jewish day of month\r\n   * @throws IllegalArgumentException\r\n   *             if the day of month is &lt; 1 or &gt; 30 is passed in\r\n   */\r\n  public setJewishDayOfMonth(dayOfMonth: number): void {\r\n    this.date = this.date.withCalendar(\"hebrew\").with({ day: dayOfMonth }).withCalendar(\"iso8601\");\r\n  }\r\n\r\n  /**\r\n   * A method that creates a <a href=\"https://en.wikipedia.org/wiki/Object_copy#Deep_copy\">deep copy</a> of the object.\r\n   *\r\n   * @see Object#clone()\r\n   */\r\n  public clone(): JewishDate {\r\n    const clone: JewishDate = new JewishDate(this.date);\r\n    clone.setMoladHours(this.moladHours);\r\n    clone.setMoladMinutes(this.moladMinutes);\r\n    clone.setMoladChalakim(this.moladChalakim);\r\n\r\n    return clone;\r\n  }\r\n}\r\n","/**\r\n * An Object representing a <em>daf</em> (page) in the <a href=\"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a> cycle.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\r\n */\r\nexport class Daf {\r\n  /**\r\n   * {@link #getMasechtaNumber()} and {@link #setMasechtaNumber(int)}.\r\n   */\r\n  private masechtaNumber: number;\r\n\r\n  /**\r\n   * See {@link #getDaf()} and {@link #setDaf(int)}.\r\n   */\r\n  private daf: number;\r\n\r\n  /**\r\n   * See {@link #getMasechtaTransliterated()} and {@link #setMasechtaTransliterated(String[])}.\r\n   */\r\n  private static masechtosBavliTransliterated: string[] = ['Berachos', 'Shabbos', 'Eruvin', 'Pesachim', 'Shekalim',\r\n    'Yoma', 'Sukkah', 'Beitzah', 'Rosh Hashana', 'Taanis', 'Megillah', 'Moed Katan', 'Chagigah', 'Yevamos',\r\n    'Kesubos', 'Nedarim', 'Nazir', 'Sotah', 'Gitin', 'Kiddushin', 'Bava Kamma', 'Bava Metzia', 'Bava Basra',\r\n    'Sanhedrin', 'Makkos', 'Shevuos', 'Avodah Zarah', 'Horiyos', 'Zevachim', 'Menachos', 'Chullin', 'Bechoros',\r\n    'Arachin', 'Temurah', 'Kerisos', 'Meilah', 'Kinnim', 'Tamid', 'Midos', 'Niddah'];\r\n\r\n  /**\r\n   * See {@link #getMasechta()}.\r\n   */\r\n  private static readonly masechtosBavli: string[] = ['\\u05D1\\u05E8\\u05DB\\u05D5\\u05EA', '\\u05E9\\u05D1\\u05EA',\r\n    '\\u05E2\\u05D9\\u05E8\\u05D5\\u05D1\\u05D9\\u05DF', '\\u05E4\\u05E1\\u05D7\\u05D9\\u05DD',\r\n    '\\u05E9\\u05E7\\u05DC\\u05D9\\u05DD', '\\u05D9\\u05D5\\u05DE\\u05D0', '\\u05E1\\u05D5\\u05DB\\u05D4',\r\n    '\\u05D1\\u05D9\\u05E6\\u05D4', '\\u05E8\\u05D0\\u05E9 \\u05D4\\u05E9\\u05E0\\u05D4',\r\n    '\\u05EA\\u05E2\\u05E0\\u05D9\\u05EA', '\\u05DE\\u05D2\\u05D9\\u05DC\\u05D4',\r\n    '\\u05DE\\u05D5\\u05E2\\u05D3 \\u05E7\\u05D8\\u05DF', '\\u05D7\\u05D2\\u05D9\\u05D2\\u05D4',\r\n    '\\u05D9\\u05D1\\u05DE\\u05D5\\u05EA', '\\u05DB\\u05EA\\u05D5\\u05D1\\u05D5\\u05EA', '\\u05E0\\u05D3\\u05E8\\u05D9\\u05DD',\r\n    '\\u05E0\\u05D6\\u05D9\\u05E8', '\\u05E1\\u05D5\\u05D8\\u05D4', '\\u05D2\\u05D9\\u05D8\\u05D9\\u05DF',\r\n    '\\u05E7\\u05D9\\u05D3\\u05D5\\u05E9\\u05D9\\u05DF', '\\u05D1\\u05D1\\u05D0 \\u05E7\\u05DE\\u05D0',\r\n    '\\u05D1\\u05D1\\u05D0 \\u05DE\\u05E6\\u05D9\\u05E2\\u05D0', '\\u05D1\\u05D1\\u05D0 \\u05D1\\u05EA\\u05E8\\u05D0',\r\n    '\\u05E1\\u05E0\\u05D4\\u05D3\\u05E8\\u05D9\\u05DF', '\\u05DE\\u05DB\\u05D5\\u05EA',\r\n    '\\u05E9\\u05D1\\u05D5\\u05E2\\u05D5\\u05EA', '\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4 \\u05D6\\u05E8\\u05D4',\r\n    '\\u05D4\\u05D5\\u05E8\\u05D9\\u05D5\\u05EA', '\\u05D6\\u05D1\\u05D7\\u05D9\\u05DD', '\\u05DE\\u05E0\\u05D7\\u05D5\\u05EA',\r\n    '\\u05D7\\u05D5\\u05DC\\u05D9\\u05DF', '\\u05D1\\u05DB\\u05D5\\u05E8\\u05D5\\u05EA', '\\u05E2\\u05E8\\u05DB\\u05D9\\u05DF',\r\n    '\\u05EA\\u05DE\\u05D5\\u05E8\\u05D4', '\\u05DB\\u05E8\\u05D9\\u05EA\\u05D5\\u05EA', '\\u05DE\\u05E2\\u05D9\\u05DC\\u05D4',\r\n    '\\u05E7\\u05D9\\u05E0\\u05D9\\u05DD', '\\u05EA\\u05DE\\u05D9\\u05D3', '\\u05DE\\u05D9\\u05D3\\u05D5\\u05EA',\r\n    '\\u05E0\\u05D3\\u05D4'];\r\n\r\n  /**\r\n   * See {@link #getYerushalmiMasechtaTransliterated()}.\r\n   */\r\n  private static masechtosYerushalmiTransliterated: string[] = ['Berachos', \"Pe'ah\", 'Demai', 'Kilayim', \"Shevi'is\",\r\n    'Terumos', \"Ma'asros\", \"Ma'aser Sheni\", 'Chalah', 'Orlah', 'Bikurim', 'Shabbos', 'Eruvin', 'Pesachim',\r\n    'Beitzah', 'Rosh Hashanah', 'Yoma', 'Sukah', \"Ta'anis\", 'Shekalim', 'Megilah', 'Chagigah', 'Moed Katan',\r\n    'Yevamos', 'Kesuvos', 'Sotah', 'Nedarim', 'Nazir', 'Gitin', 'Kidushin', 'Bava Kama', 'Bava Metzia',\r\n    'Bava Basra', 'Sanhedrin', 'Makos', 'Shevuos', 'Avodah Zarah', 'Horayos', 'Nidah', 'No Daf Today' ];\r\n\r\n  /**\r\n   * See {@link #getYerushalmiMasechta()}.\r\n   */\r\n  private static readonly masechtosYerushalmi: string[] = ['\\u05d1\\u05e8\\u05db\\u05d5\\u05ea', '\\u05e4\\u05d9\\u05d0\\u05d4',\r\n    '\\u05d3\\u05de\\u05d0\\u05d9', '\\u05db\\u05dc\\u05d0\\u05d9\\u05d9\\u05dd', '\\u05e9\\u05d1\\u05d9\\u05e2\\u05d9\\u05ea',\r\n    '\\u05ea\\u05e8\\u05d5\\u05de\\u05d5\\u05ea', '\\u05de\\u05e2\\u05e9\\u05e8\\u05d5\\u05ea', '\\u05de\\u05e2\\u05e9\\u05e8 \\u05e9\\u05e0\\u05d9',\r\n    '\\u05d7\\u05dc\\u05d4', '\\u05e2\\u05d5\\u05e8\\u05dc\\u05d4', '\\u05d1\\u05d9\\u05db\\u05d5\\u05e8\\u05d9\\u05dd',\r\n    '\\u05e9\\u05d1\\u05ea', '\\u05e2\\u05d9\\u05e8\\u05d5\\u05d1\\u05d9\\u05df', '\\u05e4\\u05e1\\u05d7\\u05d9\\u05dd',\r\n    '\\u05d1\\u05d9\\u05e6\\u05d4', '\\u05e8\\u05d0\\u05e9 \\u05d4\\u05e9\\u05e0\\u05d4', '\\u05d9\\u05d5\\u05de\\u05d0',\r\n    '\\u05e1\\u05d5\\u05db\\u05d4', '\\u05ea\\u05e2\\u05e0\\u05d9\\u05ea', '\\u05e9\\u05e7\\u05dc\\u05d9\\u05dd', '\\u05de\\u05d2\\u05d9\\u05dc\\u05d4',\r\n    '\\u05d7\\u05d2\\u05d9\\u05d2\\u05d4', '\\u05de\\u05d5\\u05e2\\u05d3 \\u05e7\\u05d8\\u05df', '\\u05d9\\u05d1\\u05de\\u05d5\\u05ea',\r\n    '\\u05db\\u05ea\\u05d5\\u05d1\\u05d5\\u05ea', '\\u05e1\\u05d5\\u05d8\\u05d4', '\\u05e0\\u05d3\\u05e8\\u05d9\\u05dd', '\\u05e0\\u05d6\\u05d9\\u05e8',\r\n    '\\u05d2\\u05d9\\u05d8\\u05d9\\u05df', '\\u05e7\\u05d9\\u05d3\\u05d5\\u05e9\\u05d9\\u05df', '\\u05d1\\u05d1\\u05d0 \\u05e7\\u05de\\u05d0',\r\n    '\\u05d1\\u05d1\\u05d0 \\u05de\\u05e6\\u05d9\\u05e2\\u05d0', '\\u05d1\\u05d1\\u05d0 \\u05d1\\u05ea\\u05e8\\u05d0',\r\n    '\\u05e9\\u05d1\\u05d5\\u05e2\\u05d5\\u05ea', '\\u05de\\u05db\\u05d5\\u05ea', '\\u05e1\\u05e0\\u05d4\\u05d3\\u05e8\\u05d9\\u05df',\r\n    '\\u05e2\\u05d1\\u05d5\\u05d3\\u05d4 \\u05d6\\u05e8\\u05d4', '\\u05d4\\u05d5\\u05e8\\u05d9\\u05d5\\u05ea', '\\u05e0\\u05d9\\u05d3\\u05d4',\r\n    '\\u05d0\\u05d9\\u05df \\u05d3\\u05e3 \\u05d4\\u05d9\\u05d5\\u05dd'];\r\n\r\n  /**\r\n   * Gets the <em>masechta</em> number of the currently set <em>Daf</em>. The sequence is: Berachos, Shabbos, Eruvin,\r\n\t * Pesachim, Shekalim, Yoma, Sukkah, Beitzah, Rosh Hashana, Taanis, Megillah, Moed Katan, Chagigah, Yevamos, Kesubos,\r\n\t * Nedarim, Nazir, Sotah, Gitin, Kiddushin, Bava Kamma, Bava Metzia, Bava Basra, Sanhedrin, Makkos, Shevuos, Avodah\r\n\t * Zarah, Horiyos, Zevachim, Menachos, Chullin, Bechoros, Arachin, Temurah, Kerisos, Meilah, Kinnim, Tamid, Midos and\r\n\t * Niddah.\r\n   * @return the masechtaNumber\r\n   * @see #setMasechtaNumber(int)\r\n   */\r\n  public getMasechtaNumber(): number {\r\n    return this.masechtaNumber;\r\n  }\r\n\r\n  /**\r\n   * Set the <em>masechta</em> number in the order of the Daf Yomi. The sequence is: Berachos, Shabbos, Eruvin, Pesachim,\r\n   * Shekalim, Yoma, Sukkah, Beitzah, Rosh Hashana, Taanis, Megillah, Moed Katan, Chagigah, Yevamos, Kesubos, Nedarim,\r\n   * Nazir, Sotah, Gitin, Kiddushin, Bava Kamma, Bava Metzia, Bava Basra, Sanhedrin, Makkos, Shevuos, Avodah Zarah,\r\n   * Horiyos, Zevachim, Menachos, Chullin, Bechoros, Arachin, Temurah, Kerisos, Meilah, Kinnim, Tamid, Midos and\r\n   * Niddah.\r\n   *\r\n   * @param masechtaNumber\r\n   *            the <em>masechta</em> number in the order of the Daf Yomi to set.\r\n   */\r\n  public setMasechtaNumber(masechtaNumber: number): void {\r\n    this.masechtaNumber = masechtaNumber;\r\n  }\r\n\r\n  /**\r\n   * Constructor that creates a Daf setting the {@link #setMasechtaNumber(int) <em>masechta</em> number} and\r\n\t * {@link #setDaf(int) <em>daf</em> number}.\r\n\t * \r\n\t * @param masechtaNumber the <em>masechta</em> number in the order of the Daf Yomi to set as the current <em>masechta</em>.\r\n\t * @param daf the <em>daf</em> (page) number to set.\r\n   */\r\n  constructor(masechtaNumber: number, daf: number) {\r\n    this.masechtaNumber = masechtaNumber;\r\n    this.daf = daf;\r\n  }\r\n\r\n  /**\r\n   * Returns the <em>daf</em> (page) number of the Daf Yomi.\r\n\t * @return the <em>daf</em> (page) number of the Daf Yomi.\r\n   */\r\n  public getDaf(): number {\r\n    return this.daf;\r\n  }\r\n\r\n  /**\r\n   * Sets the <em>daf</em> (page) number of the Daf Yomi.\r\n\t * @param daf the <em>daf</em> (page) number.\r\n   */\r\n  public setDaf(daf: number): void {\r\n    this.daf = daf;\r\n  }\r\n\r\n  /**\r\n   * Returns the transliterated name of the <em>masechta</em> (tractate) of the Daf Yomi. The list of <em>mashechtos</em>\r\n\t * is: Berachos, Shabbos, Eruvin, Pesachim, Shekalim, Yoma, Sukkah, Beitzah, Rosh Hashana, Taanis, Megillah, Moed Katan,\r\n\t * Chagigah, Yevamos, Kesubos, Nedarim, Nazir, Sotah, Gitin, Kiddushin, Bava Kamma, Bava Metzia, Bava Basra, Sanhedrin,\r\n\t * Makkos, Shevuos, Avodah Zarah, Horiyos, Zevachim, Menachos, Chullin, Bechoros, Arachin, Temurah, Kerisos, Meilah,\r\n\t * Kinnim, Tamid, Midos and Niddah.\r\n\t * \r\n\t * @return the transliterated name of the <em>masechta</em> (tractate) of the Daf Yomi such as Berachos.\r\n   * @see #setMasechtaTransliterated(String[])\r\n   */\r\n  public getMasechtaTransliterated(): string {\r\n    return Daf.masechtosBavliTransliterated[this.masechtaNumber];\r\n  }\r\n\r\n  /**\r\n   * Setter method to allow overriding of the default list of <em>masechtos</em> transliterated into into Latin chars.\r\n\t * The default values use Ashkenazi American English transliteration.\r\n\t * \r\n\t * @param masechtosBavliTransliterated the list of transliterated Bavli <em>masechtos</em> to set.\r\n   * @see #getMasechtaTransliterated()\r\n   */\r\n  public static setMasechtaTransliterated(masechtosBavliTransliterated: string[]): void {\r\n    Daf.masechtosBavliTransliterated = masechtosBavliTransliterated;\r\n  }\r\n\r\n  /**\r\n   * Returns the <em>masechta</em> (tractate) of the Daf Yomi in Hebrew. The list is in the following format<br>\r\n   * <code>[\"&#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA;\",\r\n   * \"&#x05E9;&#x05D1;&#x05EA;\", \"&#x05E2;&#x05D9;&#x05E8;&#x05D5;&#x05D1;&#x05D9;&#x05DF;\",\r\n   * \"&#x05E4;&#x05E1;&#x05D7;&#x05D9;&#x05DD;\", \"&#x05E9;&#x05E7;&#x05DC;&#x05D9;&#x05DD;\", \"&#x05D9;&#x05D5;&#x05DE;&#x05D0;\",\r\n   * \"&#x05E1;&#x05D5;&#x05DB;&#x05D4;\", \"&#x05D1;&#x05D9;&#x05E6;&#x05D4;\", \"&#x05E8;&#x05D0;&#x05E9; &#x05D4;&#x05E9;&#x05E0;&#x05D4;\",\r\n   * \"&#x05EA;&#x05E2;&#x05E0;&#x05D9;&#x05EA;\", \"&#x05DE;&#x05D2;&#x05D9;&#x05DC;&#x05D4;\", \"&#x05DE;&#x05D5;&#x05E2;&#x05D3;\r\n   * &#x05E7;&#x05D8;&#x05DF;\", \"&#x05D7;&#x05D2;&#x05D9;&#x05D2;&#x05D4;\", \"&#x05D9;&#x05D1;&#x05DE;&#x05D5;&#x05EA;\",\r\n   * \"&#x05DB;&#x05EA;&#x05D5;&#x05D1;&#x05D5;&#x05EA;\", \"&#x05E0;&#x05D3;&#x05E8;&#x05D9;&#x05DD;\",\"&#x05E0;&#x05D6;&#x05D9;&#x05E8;\",\r\n   * \"&#x05E1;&#x05D5;&#x05D8;&#x05D4;\", \"&#x05D2;&#x05D9;&#x05D8;&#x05D9;&#x05DF;\", \"&#x05E7;&#x05D9;&#x05D3;&#x05D5;&#x05E9;&#x05D9;&#x05DF;\",\r\n   * \"&#x05D1;&#x05D1;&#x05D0; &#x05E7;&#x05DE;&#x05D0;\", \"&#x05D1;&#x05D1;&#x05D0; &#x05DE;&#x05E6;&#x05D9;&#x05E2;&#x05D0;\",\r\n   * \"&#x05D1;&#x05D1;&#x05D0; &#x05D1;&#x05EA;&#x05E8;&#x05D0;\", \"&#x05E1;&#x05E0;&#x05D4;&#x05D3;&#x05E8;&#x05D9;&#x05DF;\",\r\n   * \"&#x05DE;&#x05DB;&#x05D5;&#x05EA;\", \"&#x05E9;&#x05D1;&#x05D5;&#x05E2;&#x05D5;&#x05EA;\", \"&#x05E2;&#x05D1;&#x05D5;&#x05D3;&#x05D4;\r\n   * &#x05D6;&#x05E8;&#x05D4;\", \"&#x05D4;&#x05D5;&#x05E8;&#x05D9;&#x05D5;&#x05EA;\", \"&#x05D6;&#x05D1;&#x05D7;&#x05D9;&#x05DD;\",\r\n   * \"&#x05DE;&#x05E0;&#x05D7;&#x05D5;&#x05EA;\", \"&#x05D7;&#x05D5;&#x05DC;&#x05D9;&#x05DF;\", \"&#x05D1;&#x05DB;&#x05D5;&#x05E8;&#x05D5;&#x05EA;\",\r\n   * \"&#x05E2;&#x05E8;&#x05DB;&#x05D9;&#x05DF;\", \"&#x05EA;&#x05DE;&#x05D5;&#x05E8;&#x05D4;\", \"&#x05DB;&#x05E8;&#x05D9;&#x05EA;&#x05D5;&#x05EA;\",\r\n   * \"&#x05DE;&#x05E2;&#x05D9;&#x05DC;&#x05D4;\", \"&#x05E7;&#x05D9;&#x05E0;&#x05D9;&#x05DD;\", \"&#x05EA;&#x05DE;&#x05D9;&#x05D3;\",\r\n   * \"&#x05DE;&#x05D9;&#x05D3;&#x05D5;&#x05EA;\", \"&#x05E0;&#x05D3;&#x05D4;\"]</code>.\r\n   *\r\n   * @return the <em>masechta</em> (tractate) of the Daf Yomi in Hebrew. As an example, it will return\r\n\t *         &#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA; for Berachos.\r\n   */\r\n  public getMasechta(): string {\r\n    return Daf.masechtosBavli[this.masechtaNumber];\r\n  }\r\n\r\n  /**\r\n   * Returns the transliterated name of the <em>masechta</em> (tractate) of the Daf Yomi in Yerushalmi. The list of\r\n\t * <em>mashechtos</em> is:\r\n\t * Berachos, Pe'ah, Demai, Kilayim, Shevi'is, Terumos, Ma'asros, Ma'aser Sheni, Chalah, Orlah, Bikurim, \r\n\t * Shabbos, Eruvin, Pesachim, Beitzah, Rosh Hashanah, Yoma, Sukah, Ta'anis, Shekalim, Megilah, Chagigah, \r\n\t * Moed Katan, Yevamos, Kesuvos, Sotah, Nedarim, Nazir, Gitin, Kidushin, Bava Kama, Bava Metzia,\r\n\t * Bava Basra, Shevuos, Makos, Sanhedrin, Avodah Zarah, Horayos, Nidah and No Daf Today.\r\n\t * \r\n\t * @return the transliterated name of the <em>masechta</em> (tractate) of the Daf Yomi such as Berachos.\r\n   */\r\n  public getYerushalmiMasechtaTransliterated(): string {\r\n    return Daf.masechtosYerushalmiTransliterated[this.masechtaNumber];\r\n  }\r\n\r\n  /**\r\n   * Setter method to allow overriding of the default list of Yerushalmi <em>masechtos</em> transliterated into into Latin chars.\r\n\t * The default uses Ashkenazi American English transliteration.\r\n\t * \r\n\t * @param masechtosYerushalmiTransliterated the list of transliterated Yerushalmi <em>masechtos</em> to set.\r\n   */\r\n  public static setYerushalmiMasechtaTransliterated(masechtosYerushalmiTransliterated: string[]): void {\r\n    Daf.masechtosYerushalmiTransliterated = masechtosYerushalmiTransliterated;\r\n  }\r\n\r\n  /**\r\n\t * Getter method to allow retrieving the list of Yerushalmi <em>masechtos</em> transliterated into into Latin chars.\r\n\t * The default uses Ashkenazi American English transliteration.\r\n\t * \r\n\t * @return the array of transliterated <em>masechta</em> (tractate) names of the Daf Yomi Yerushalmi.\r\n\t */\r\n  public static getYerushalmiMasechtosTransliterated(): string[] {\r\n    return this.masechtosYerushalmiTransliterated;\r\n  }\r\n\r\n  /**\r\n\t * Getter method to allow retrieving the list of Yerushalmi <em>masechtos</em>.\r\n\t * \r\n\t * @return the array of Hebrew <em>masechta</em> (tractate) names of the Daf Yomi Yerushalmi.\r\n\t */\r\n  public static getYerushalmiMasechtos():string[] {\r\n    return this.masechtosYerushalmi;\r\n  }\r\n\r\n  /**\r\n   * Returns the Yerushalmi <em>masechta</em> (tractate) of the Daf Yomi in Hebrew. As an example, it will return\r\n\t * &#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA; for Berachos.\r\n\t * \r\n\t * @return the Yerushalmi <em>masechta</em> (tractate) of the Daf Yomi in Hebrew. As an example, it will return\r\n\t *         &#x05D1;&#x05E8;&#x05DB;&#x05D5;&#x05EA; for Berachos.\r\n   */\r\n  public getYerushalmiMasechta(): string {\r\n    return Daf.masechtosYerushalmi[this.masechtaNumber];\r\n  }\r\n}\r\n","import { Temporal } from 'temporal-polyfill'\r\n\r\nimport { Calendar } from '../../polyfills/Utils';\r\nimport { Daf } from '../Daf';\r\nimport { JewishCalendar } from '../JewishCalendar';\r\nimport { IllegalArgumentException } from '../../polyfills/errors';\r\nimport { JewishDate } from '../JewishDate';\r\n\r\n/**\r\n * This class calculates the Daf Yomi Bavli page (daf) for a given date. To calculate Daf Yomi Yerushalmi\r\n * use the {@link YerushalmiYomiCalculator}. The library may cover Mishna Yomi etc. at some point in the future.\r\n *\r\n * @author &copy; Bob Newell (original C code)\r\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\r\n * @version 0.0.1\r\n */\r\nexport class YomiCalculator {\r\n  /**\r\n   * The start date of the first Daf Yomi Bavli cycle of September 11, 1923 / Rosh Hashana 5684.\r\n   */\r\n  private static readonly dafYomiStartDate: Temporal.PlainDate = Temporal.PlainDate.from({\r\n    year: 1923,\r\n    month: Calendar.SEPTEMBER + 1,\r\n    day: 11,\r\n  });\r\n\r\n  /** The start date of the first Daf Yomi Bavli cycle in the Julian calendar. Used internally for claculations. */\r\n  private static readonly dafYomiJulianStartDay: number = YomiCalculator.getJulianDay(YomiCalculator.dafYomiStartDate);\r\n\r\n  /**\r\n   * The date that the pagination for the Daf Yomi <em>Maseches Shekalim</em> changed to use the commonly used Vilna\r\n   * Shas pagination from the no longer commonly available Zhitomir / Slavuta Shas used by Rabbi Meir Shapiro.\r\n   */\r\n  private static readonly shekalimChangeDate: Temporal.PlainDate = Temporal.PlainDate.from({ year: 1975, month: Calendar.JUNE + 1, day: 24 });\r\n\r\n  /** The Julian date that the cycle for Shekalim changed.\r\n   * @see #getDafYomiBavli(JewishCalendar) for details.\r\n   */\r\n  private static readonly shekalimJulianChangeDay: number = YomiCalculator.getJulianDay(YomiCalculator.shekalimChangeDate);\r\n\r\n  /**\r\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Daf_yomi\">Daf Yomi</a> <a\r\n   * href=\"https://en.wikipedia.org/wiki/Talmud\">Bavli</a> {@link Daf} for a given date. The first Daf Yomi cycle\r\n   * started on Rosh Hashana 5684 (September 11, 1923) and calculations prior to this date will result in an\r\n   * IllegalArgumentException thrown. For historical calculations (supported by this method), it is important to note\r\n   * that a change in length of the cycle was instituted starting in the eighth Daf Yomi cycle beginning on June 24,\r\n   * 1975. The Daf Yomi Bavli cycle has a single masechta of the Talmud Yerushalmi - Shekalim as part of the cycle.\r\n   * Unlike the Bavli where the number of daf per masechta was standardized since the original <a\r\n   * href=\"https://en.wikipedia.org/wiki/Daniel_Bomberg\">Bomberg Edition</a> published from 1520 - 1523, there is no\r\n   * uniform page length in the Yerushalmi. The early cycles had the Yerushalmi Shekalim length of 13 days following the\r\n   * <a href=\r\n   * \"https://he.wikipedia.org/wiki/%D7%93%D7%A4%D7%95%D7%A1_%D7%A1%D7%9C%D7%90%D7%95%D7%95%D7%99%D7%98%D7%90\">Slavuta/Zhytomyr</a>\r\n   * Shas used by <a href=\"https://en.wikipedia.org/wiki/Meir_Shapiro\">Rabbi Meir Shapiro</a>. With the start of the eighth Daf Yomi\r\n   * cycle beginning on June 24, 1975 the length of the Yerushalmi Shekalim was changed from 13 to 22 daf to follow\r\n   * the <a href=\"https://en.wikipedia.org/wiki/Vilna_Edition_Shas\">Vilna Shas</a> that is in common use today.\r\n   *\r\n   * @param calendar\r\n   *            the calendar date for calculation\r\n   * @return the {@link Daf}.\r\n   *\r\n   * @throws IllegalArgumentException\r\n   *             if the date is prior to the September 11, 1923 start date of the first Daf Yomi cycle\r\n   */\r\n  public static getDafYomiBavli(calendar: JewishDate): Daf {\r\n    /*\r\n     * The number of daf per masechta. Since the number of blatt in Shekalim changed on the 8th Daf Yomi cycle\r\n     * beginning on June 24, 1975 from 13 to 22, the actual calculation for blattPerMasechta[4] will later be\r\n     * adjusted based on the cycle.\r\n     */\r\n    const blattPerMasechta: number[] = [64, 157, 105, 121, 22, 88, 56, 40, 35, 31, 32, 29, 27, 122, 112, 91, 66, 49, 90, 82,\r\n      119, 119, 176, 113, 24, 49, 76, 14, 120, 110, 142, 61, 34, 34, 28, 22, 4, 9, 5, 73];\r\n\r\n    const date: Temporal.PlainDate = calendar.getDate();\r\n\r\n    let dafYomi: Daf;\r\n    const julianDay: number = this.getJulianDay(date);\r\n    let cycleNo: number = 0;\r\n    let dafNo: number = 0;\r\n    if (Temporal.PlainDate.compare(date,YomiCalculator.dafYomiStartDate) == -1) {\r\n      // TODO: should we return a null or throw an IllegalArgumentException?\r\n      throw new IllegalArgumentException(`${calendar} is prior to organized Daf Yomi Bavli cycles that started on ${YomiCalculator.dafYomiStartDate}`);\r\n    }\r\n    if (Temporal.PlainDate.compare(date, YomiCalculator.shekalimChangeDate) == 1) {\r\n      cycleNo = 8 + ((julianDay - YomiCalculator.shekalimJulianChangeDay) / 2711);\r\n      dafNo = ((julianDay - YomiCalculator.shekalimJulianChangeDay) % 2711);\r\n    } else {\r\n      cycleNo = 1 + ((julianDay - YomiCalculator.dafYomiJulianStartDay) / 2702);\r\n      dafNo = ((julianDay - YomiCalculator.dafYomiJulianStartDay) % 2702);\r\n    }\r\n\r\n    let total: number = 0;\r\n    let masechta: number = -1;\r\n    let blatt: number = 0;\r\n\r\n    /* Fix Shekalim for old cycles. */\r\n    if (cycleNo <= 7) {\r\n      blattPerMasechta[4] = 13;\r\n    } else {\r\n      blattPerMasechta[4] = 22; // correct any change that may have been changed from a prior calculation\r\n    }\r\n    /* Finally find the daf. */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const blattInMasechta of blattPerMasechta) {\r\n      masechta++;\r\n      total = total + blattInMasechta - 1;\r\n      if (dafNo < total) {\r\n        blatt = 1 + blattInMasechta - (total - dafNo);\r\n        /* Fiddle with the weird ones near the end. */\r\n        if (masechta === 36) {\r\n          blatt += 21;\r\n        } else if (masechta === 37) {\r\n          blatt += 24;\r\n        } else if (masechta === 38) {\r\n          blatt += 32;\r\n        }\r\n        dafYomi = new Daf(masechta, blatt);\r\n        break;\r\n      }\r\n    }\r\n\r\n    return dafYomi!;\r\n  }\r\n\r\n  /**\r\n   * Return the <a href=\"https://en.wikipedia.org/wiki/Julian_day\">Julian day</a> from a Java Date.\r\n   *\r\n   * @param date\r\n   *            The Java Date\r\n   * @return the Julian day number corresponding to the date\r\n   */\r\n  private static getJulianDay(date: Temporal.PlainDate): number {\r\n    let { year, month } = date;\r\n    const { day } = date;\r\n\r\n    if (month <= 2) {\r\n      year -= 1;\r\n      month += 12;\r\n    }\r\n\r\n    const a: number = Math.trunc(year / 100);\r\n    const b: number = 2 - a + Math.trunc(a / 4);\r\n    return Math.trunc(Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 * (month + 1)) + day + b - 1524.5);\r\n  }\r\n}\r\n","import { Temporal } from 'temporal-polyfill'\r\n\r\nimport { Calendar } from '../../polyfills/Utils';\r\nimport { Daf } from '../Daf';\r\nimport { IllegalArgumentException } from '../../polyfills/errors';\r\nimport { JewishDate } from '../JewishDate';\r\n\r\n/**\r\n * This class calculates the <a href=\"https://en.wikipedia.org/wiki/Jerusalem_Talmud\">Talmud Yerusalmi</a> <a href=\r\n * \"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a> page ({@link Daf}) for the a given date.\r\n *\r\n * @author &copy; elihaidv\r\n * @author &copy; Eliyahu Hershfeld 2017 - 2019\r\n */\r\nexport class YerushalmiYomiCalculator {\r\n  /**\r\n   * The start date of the first Daf Yomi Yerushalmi cycle of February 2, 1980 / 15 Shevat, 5740.\r\n   */\r\n  private static readonly DAF_YOMI_START_DAY: Temporal.PlainDate = Temporal.PlainDate.from({\r\n    year: 1980,\r\n    month: Calendar.FEBRUARY + 1,\r\n    day: 2,\r\n  });\r\n\r\n  /** The number of pages in the Talmud Yerushalmi. */\r\n  private static readonly WHOLE_SHAS_DAFS: number = 1554;\r\n\r\n  /** The number of pages per <em>masechta</em> (tractate). */\r\n  private static readonly BLATT_PER_MASECHTA: number[] = [68, 37, 34, 44, 31, 59, 26, 33, 28, 20, 13, 92, 65, 71, 22,\r\n    22, 42, 26, 26, 33, 34, 22, 19, 85, 72, 47, 40, 47, 54, 48, 44, 37, 34, 44, 9, 57, 37, 19, 13];\r\n\r\n  /**\r\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a>\r\n   * <a href=\"https://en.wikipedia.org/wiki/Jerusalem_Talmud\">Yerusalmi</a> page ({@link Daf}) for a given date.\r\n   * The first Daf Yomi cycle started on 15 Shevat (Tu Bishvat) 5740 (February, 2, 1980) and calculations\r\n   * prior to this date will result in an IllegalArgumentException thrown. A null will be returned on Tisha B'Av or\r\n   * Yom Kippur.\r\n   *\r\n   * @param jewishCalendar\r\n   *            the calendar date for calculation\r\n   * @return the {@link Daf} or null if the date is on Tisha B'Av or Yom Kippur.\r\n   *\r\n   * @throws IllegalArgumentException\r\n   *             if the date is prior to the February 2, 1980, the start date of the first Daf Yomi Yerushalmi cycle\r\n   */\r\n  public static getDafYomiYerushalmi(jewishCalendar: JewishDate) {\r\n    let nextCycle: Temporal.PlainDate = YerushalmiYomiCalculator.DAF_YOMI_START_DAY;\r\n    let prevCycle: Temporal.PlainDate = YerushalmiYomiCalculator.DAF_YOMI_START_DAY;\r\n    const requested: Temporal.PlainDate = jewishCalendar.getDate();\r\n    let masechta: number = 0;\r\n    let dafYomi: Daf;\r\n\r\n    const hebrewDate = jewishCalendar.getDate().withCalendar(\"hebrew\");\r\n    if (hebrewDate.month == 1 && hebrewDate.day == 10) {\r\n      return null;\r\n    }\r\n\r\n    if (jewishCalendar.getJewishMonth() == JewishDate.AV) {\r\n      if ((hebrewDate.day == 9 && hebrewDate.dayOfWeek !== 6) || (hebrewDate.day == 10 && hebrewDate.dayOfWeek == 7))\r\n        return null;\r\n    }\r\n\r\n    if (Temporal.PlainDate.compare(requested, YerushalmiYomiCalculator.DAF_YOMI_START_DAY) == -1) {\r\n      throw new IllegalArgumentException(`${requested} is prior to organized Daf Yomi Yerushalmi cycles that started on ${YerushalmiYomiCalculator.DAF_YOMI_START_DAY}`);\r\n    }\r\n\r\n    // Start to calculate current cycle. Initialize the start day\r\n    // nextCycle = YerushalmiYomiCalculator.DAF_YOMI_START_DAY;\r\n\r\n    // Go cycle by cycle, until we get the next cycle\r\n    while (Temporal.PlainDate.compare(nextCycle, requested) == -1) {\r\n      prevCycle = nextCycle;\r\n\r\n      // Adds the number of whole shas dafs, and then the number of days that not have daf.\r\n      nextCycle = nextCycle.add({ days: YerushalmiYomiCalculator.WHOLE_SHAS_DAFS });\r\n      // This needs to be a separate step\r\n      nextCycle = nextCycle.add({ days: YerushalmiYomiCalculator.getNumOfSpecialDays(prevCycle, nextCycle) });\r\n    }\r\n\r\n    // Get the number of days from cycle start until request.\r\n    const dafNo: number = requested.since(prevCycle).total({ unit: 'days' });\r\n\r\n    // Get the number of special days to subtract\r\n    const specialDays: number = YerushalmiYomiCalculator.getNumOfSpecialDays(prevCycle, requested);\r\n    let total: number = dafNo - specialDays;\r\n\r\n    // Finally find the daf.\r\n    for (let i: number = 0; i < YerushalmiYomiCalculator.BLATT_PER_MASECHTA.length; i++) {\r\n      if (total <= YerushalmiYomiCalculator.BLATT_PER_MASECHTA[i]) {\r\n        dafYomi = new Daf(masechta, total + 1);\r\n        break;\r\n      }\r\n      total -= YerushalmiYomiCalculator.BLATT_PER_MASECHTA[i];\r\n      masechta++;\r\n    }\r\n\r\n    return dafYomi!;\r\n  }\r\n\r\n  /**\r\n   * Return the number of special days (Yom Kippur and Tisha B'Av) on which there is no daf, between the two given dates\r\n   *\r\n   * @param start - start date to calculate\r\n   * @param end - end date to calculate\r\n   * @return the number of special days\r\n   */\r\n  private static getNumOfSpecialDays(start: Temporal.PlainDate, end: Temporal.PlainDate): number {\r\n    // Find the start and end Jewish years\r\n    const jewishStartYear: number = new JewishDate(start).getJewishYear();\r\n    const jewishEndYear: number = new JewishDate(end).getJewishYear();\r\n\r\n    // Value to return\r\n    let specialDays: number = 0;\r\n\r\n    // Instant of special dates\r\n    const yomKippur: JewishDate = new JewishDate(jewishStartYear, 7, 10);\r\n    const tishaBeav: JewishDate = new JewishDate(jewishStartYear, 5, 9);\r\n\r\n    // Go over the years and find special dates\r\n    for (let i: number = jewishStartYear; i <= jewishEndYear; i++) {\r\n      yomKippur.setJewishYear(i);\r\n      tishaBeav.setJewishYear(i);\r\n\r\n      if (rangeDates(start, yomKippur.getDate(), end)) specialDays++;\r\n      if (rangeDates(start, tishaBeav.getDate(), end)) specialDays++;\r\n    }\r\n\r\n    return specialDays;\r\n  }\r\n}\r\n\r\nfunction rangeDates(start: Temporal.PlainDate, middle:Temporal.PlainDate, end: Temporal.PlainDate, inclusive=true) {\r\n  const acceptedValues = [1];\r\n  if (inclusive)\r\n    acceptedValues.push(0);\r\n\r\n  return acceptedValues.includes(Temporal.PlainDate.compare(middle, start)) && acceptedValues.includes(Temporal.PlainDate.compare(end, middle))\r\n};","import { JewishDate } from \"../JewishDate\";\r\nimport ccyNl from \"./dataSets/ccy-nonleap.json\" \r\nimport ccyL from \"./dataSets/ccy-leap.json\"\r\nimport { Temporal } from \"temporal-polyfill\";\r\n\r\nexport class ChafetzChayimYomiCalculator {\r\n    public static getChafetzChayimYomi(jewishCalendar: JewishDate) {\r\n        const hebrewDateToday = jewishCalendar.getDate().withCalendar(\"hebrew\")\r\n\r\n        const ccCal = (jewishCalendar.isJewishLeapYear() ? ccyL : ccyNl);\r\n        const limudToday = ccCal\r\n            .find(limud => limud.days\r\n                .find(dateObj => hebrewDateToday.equals(Temporal.Now.plainDateISO().withCalendar(\"hebrew\").with(dateObj)))\r\n            )\r\n\r\n        return limudToday;\r\n    }\r\n}","import { Temporal } from 'temporal-polyfill'\r\n\r\nimport { GeoLocation } from '../util/GeoLocation';\r\nimport { Daf } from './Daf';\r\nimport { JewishDate } from './JewishDate';\r\nimport { Calendar } from '../polyfills/Utils';\r\nimport { YomiCalculator } from './limud/YomiCalculator';\r\nimport { YerushalmiYomiCalculator } from './limud/YerushalmiYomiCalculator';\r\nimport { ChafetzChayimYomiCalculator } from './limud/ChafetzChayimYomiCalculator';\r\n\r\nconst { FRIDAY, SATURDAY } = Calendar;\r\n\r\n/**\r\n * List of <em>parshiyos</em> or special <em>Shabasos</em>. {@link #NONE} indicates a week without a <em>parsha</em>, while the enum for\r\n * the <em>parsha</em> of {@link #VZOS_HABERACHA} exists for consistency, but is not currently used. The special <em>Shabasos</em> of\r\n * Shekalim, Zachor, Para, Hachodesh, as well as Shabbos Shuva, Shira, Hagadol, Chazon and Nachamu are also represented in this collection\r\n * of <em>parshiyos</em>.\r\n * @see #getSpecialShabbos()\r\n * @see #getParshah()\r\n */\r\nexport enum Parsha {\r\n  /** NONE - A week without any <em>parsha</em> such as <em>Shabbos Chol Hamoed</em> */\r\n  NONE,\r\n  BERESHIS, NOACH, LECH_LECHA, VAYERA, CHAYEI_SARA, TOLDOS, VAYETZEI,\r\n  VAYISHLACH, VAYESHEV, MIKETZ, VAYIGASH, VAYECHI, SHEMOS, VAERA, BO,\r\n  BESHALACH, YISRO, MISHPATIM, TERUMAH, TETZAVEH, KI_SISA, VAYAKHEL,\r\n  PEKUDEI, VAYIKRA, TZAV, SHMINI, TAZRIA, METZORA, ACHREI_MOS, KEDOSHIM,\r\n  EMOR, BEHAR, BECHUKOSAI, BAMIDBAR, NASSO, BEHAALOSCHA, SHLACH, KORACH,\r\n  CHUKAS, BALAK, PINCHAS, MATOS, MASEI, DEVARIM, VAESCHANAN, EIKEV,\r\n  REEH, SHOFTIM, KI_SEITZEI, KI_SAVO, NITZAVIM, VAYEILECH, HAAZINU,\r\n  VZOS_HABERACHA,\r\n  /** The double parsha of Vayakhel &amp; Peudei */\r\n  VAYAKHEL_PEKUDEI,\r\n  /** The double <em>parsha</em> of Tazria &amp; Metzora */\r\n  TAZRIA_METZORA,\r\n  /** The double <em>parsha</em> of Achrei Mos &amp; Kedoshim */\r\n  ACHREI_MOS_KEDOSHIM,\r\n  /** The double <em>parsha</em> of Behar &amp; Bechukosai */\r\n  BEHAR_BECHUKOSAI,\r\n  /** The double <em>parsha</em> of Chukas &amp; Balak */\r\n  CHUKAS_BALAK,\r\n  /** The double <em>parsha</em> of Matos &amp; Masei */\r\n  MATOS_MASEI,\r\n  /** The double <em>parsha</em> of Nitzavim &amp; Vayelech */\r\n  NITZAVIM_VAYEILECH,\r\n  /** The special <em>parsha</em> of Shekalim */\r\n  SHKALIM,\r\n  /** The special <em>parsha</em> of Zachor */\r\n  ZACHOR,\r\n  /** The special <em>parsha</em> of Para */\r\n  PARA,\r\n  /** The special <em>parsha</em> of Hachodesh */\r\n  HACHODESH,\r\n  SHUVA,\r\n  SHIRA,\r\n  HAGADOL,\r\n  CHAZON,\r\n  NACHAMU,\r\n}\r\n\r\n/**\r\n * The JewishCalendar extends the JewishDate class and adds calendar methods.\r\n *\r\n * This open source Java code was originally ported by <a href=\"http://www.facebook.com/avromf\">Avrom Finkelstien</a>\r\n * from his C++ code. It was refactored to fit the KosherJava Zmanim API with simplification of the code, enhancements\r\n * and some bug fixing. The class allows setting whether the holiday and parsha scheme follows the Israel scheme or outside Israel\r\n * scheme. The default is the outside Israel scheme.\r\n * The parsha code was ported by Y. Paritcher from his <a href=\"https://github.com/yparitcher/libzmanim\">libzmanim</a> code.\r\n *\r\n * TODO: Some do not belong in this class, but here is a partial list of what should still be implemented in some form:\r\n * <ol>\r\n * <li>Add Isru Chag</li>\r\n * <li>Mishna yomis etc</li>\r\n * </ol>\r\n *\r\n * @see java.util.Date\r\n * @see java.util.Calendar\r\n * @author &copy; Y. Paritcher 2019\r\n * @author &copy; Avrom Finkelstien 2002\r\n * @author &copy; Eliyahu Hershfeld 2011 - 2019\r\n */\r\nexport class JewishCalendar extends JewishDate {\r\n  /** The 14th day of Nisan, the day before of Pesach (Passover). */\r\n  public static readonly EREV_PESACH: number = 0;\r\n\r\n  /** The holiday of Pesach (Passover) on the 15th (and 16th out of Israel) day of Nisan. */\r\n  public static readonly PESACH: number = 1;\r\n\r\n  /** Chol Hamoed (interim days) of Pesach (Passover) */\r\n  public static readonly CHOL_HAMOED_PESACH: number = 2;\r\n\r\n  /** Pesach Sheni, the 14th day of Iyar, a minor holiday. */\r\n  public static readonly PESACH_SHENI: number = 3;\r\n\r\n  /** Erev Shavuos (the day before Shavuos), the 5th of Sivan */\r\n  public static readonly EREV_SHAVUOS: number = 4;\r\n\r\n  /** Shavuos (Pentecost), the 6th of Sivan */\r\n  public static readonly SHAVUOS: number = 5;\r\n\r\n  /** The fast of the 17th day of Tamuz */\r\n  public static readonly SEVENTEEN_OF_TAMMUZ: number = 6;\r\n\r\n  /** The fast of the 9th of Av */\r\n  public static readonly TISHA_BEAV: number = 7;\r\n\r\n  /** The 15th day of Av, a minor holiday */\r\n  public static readonly TU_BEAV: number = 8;\r\n\r\n  /** Erev Rosh Hashana (the day before Rosh Hashana), the 29th of Elul */\r\n  public static readonly EREV_ROSH_HASHANA: number = 9;\r\n\r\n  /** Rosh Hashana, the first of Tishrei. */\r\n  public static readonly ROSH_HASHANA: number = 10;\r\n\r\n  /** The fast of Gedalyah, the 3rd of Tishrei. */\r\n  public static readonly FAST_OF_GEDALYAH: number = 11;\r\n\r\n  /** The 9th day of Tishrei, the day before of Yom Kippur. */\r\n  public static readonly EREV_YOM_KIPPUR: number = 12;\r\n\r\n  /** The holiday of Yom Kippur, the 10th day of Tishrei */\r\n  public static readonly YOM_KIPPUR: number = 13;\r\n\r\n  /** The 14th day of Tishrei, the day before of Succos/Sukkos (Tabernacles). */\r\n  public static readonly EREV_SUCCOS: number = 14;\r\n\r\n  /** The holiday of Succos/Sukkos (Tabernacles), the 15th (and 16th out of Israel) day of Tishrei */\r\n  public static readonly SUCCOS: number = 15;\r\n\r\n  /** Chol Hamoed (interim days) of Succos/Sukkos (Tabernacles) */\r\n  public static readonly CHOL_HAMOED_SUCCOS: number = 16;\r\n\r\n  /** Hoshana Rabba, the 7th day of Succos/Sukkos that occurs on the 21st of Tishrei. */\r\n  public static readonly HOSHANA_RABBA: number = 17;\r\n\r\n  /** Shmini Atzeres, the 8th day of Succos/Sukkos is an independent holiday that occurs on the 22nd of Tishrei. */\r\n  public static readonly SHEMINI_ATZERES: number = 18;\r\n\r\n  /** Simchas Torah, the 9th day of Succos/Sukkos, or the second day of Shmini Atzeres that is celebrated\r\n   * {@link #getInIsrael() out of Israel} on the 23rd of Tishrei.\r\n   */\r\n  public static readonly SIMCHAS_TORAH: number = 19;\r\n\r\n  // public static final int EREV_CHANUKAH = 20;// probably remove this\r\n\r\n  /** The holiday of Chanukah. 8 days starting on the 25th day Kislev. */\r\n  public static readonly CHANUKAH: number = 21;\r\n\r\n  /** The fast of the 10th day of Teves. */\r\n  public static readonly TENTH_OF_TEVES: number = 22;\r\n\r\n  /** Tu Bishvat on the 15th day of Shevat, a minor holiday. */\r\n  public static readonly TU_BESHVAT: number = 23;\r\n\r\n  /** The fast of Esther, usually on the 13th day of Adar (or Adar II on leap years). It is earlier on some years. */\r\n  public static readonly FAST_OF_ESTHER: number = 24;\r\n\r\n  /** The holiday of Purim on the 14th day of Adar (or Adar II on leap years). */\r\n  public static readonly PURIM: number = 25;\r\n\r\n  /** The holiday of Shushan Purim on the 15th day of Adar (or Adar II on leap years). */\r\n  public static readonly SHUSHAN_PURIM: number = 26;\r\n\r\n  /** The holiday of Purim Katan on the 14th day of Adar I on a leap year when Purim is on Adar II, a minor holiday. */\r\n  public static readonly PURIM_KATAN: number = 27;\r\n\r\n  /**\r\n   * Rosh Chodesh, the new moon on the first day of the Jewish month, and the 30th day of the previous month in the\r\n   * case of a month with 30 days.\r\n   */\r\n  public static readonly ROSH_CHODESH: number = 28;\r\n\r\n  /** Yom HaShoah, Holocaust Remembrance Day, usually held on the 27th of Nisan. If it falls on a Friday, it is moved\r\n   * to the 26th, and if it falls on a Sunday it is moved to the 28th. A {@link #isUseModernHolidays() modern holiday}.\r\n   */\r\n  public static readonly YOM_HASHOAH: number = 29;\r\n\r\n  /**\r\n   * Yom HaZikaron, Israeli Memorial Day, held a day before Yom Ha'atzmaut.  A {@link #isUseModernHolidays() modern holiday}.\r\n   */\r\n  public static readonly YOM_HAZIKARON: number = 30;\r\n\r\n  /** Yom Ha'atzmaut, Israel Independence Day, the 5th of Iyar, but if it occurs on a Friday or Saturday, the holiday is\r\n   * moved back to Thursday, the 3rd of 4th of Iyar, and if it falls on a Monday, it is moved forward to Tuesday the\r\n   * 6th of Iyar.  A {@link #isUseModernHolidays() modern holiday}. */\r\n  public static readonly YOM_HAATZMAUT: number = 31;\r\n\r\n  /**\r\n   * Yom Yerushalayim or Jerusalem Day, on 28 Iyar. A {@link #isUseModernHolidays() modern holiday}.\r\n   */\r\n  public static readonly YOM_YERUSHALAYIM: number = 32;\r\n\r\n  /** The 33rd day of the Omer, the 18th of Iyar, a minor holiday. */\r\n  public static readonly LAG_BAOMER: number = 33;\r\n\r\n  /** The holiday of Purim Katan on the 15th day of Adar I on a leap year when Purim is on Adar II, a minor holiday. */\r\n  public static readonly SHUSHAN_PURIM_KATAN: number = 34;\r\n\r\n  /** The day following the last day of Pesach, Shavuos and Sukkos.*/\r\n  public static readonly ISRU_CHAG = 35;\r\n\r\n  /**\r\n\t * The day before <em>Rosh Chodesh</em> (moved to Thursday if <em>Rosh Chodesh</em> is on a Friday or <em>Shabbos</em>) in most months.\r\n\t * This constant is not actively in use.\r\n\t * @see #isYomKippurKatan()\r\n\t */\r\n  public static readonly YOM_KIPPUR_KATAN = 36;\r\n\r\n  /**\r\n\t * The Monday, Thursday and Monday after the first <em>Shabbos</em> after <em>Rosh Chodesh Cheshvan</em> and <em>Iyar</em>) are BeHab\r\n\t * days. This constant is not actively in use.\r\n\t * @see #isBeHaB()\r\n\t */\r\n  public static readonly BEHAB = 37;\r\n\r\n  /**\r\n   * Is the calendar set to Israel, where some holidays have different rules.\r\n   * @see #getInIsrael()\r\n   * @see #setInIsrael(boolean)\r\n   */\r\n  private inIsrael: boolean = false;\r\n\r\n  /**\r\n\t * Is the calendar set to have Purim <em>demukafim</em>, where Purim is celebrated on Shushan Purim.\r\n\t * @see #getIsMukafChoma()\r\n\t * @see #setIsMukafChoma(boolean)\r\n\t */\r\n  private isMukafChoma: boolean = false;\r\n\r\n  /**\r\n   * Is the calendar set to use modern Israeli holidays such as Yom Haatzmaut.\r\n   * @see #isUseModernHolidays()\r\n   * @see #setUseModernHolidays(boolean)\r\n   */\r\n  private useModernHolidays: boolean = false;\r\n\r\n  /**\r\n   * An array of <em>parshiyos</em> in the 17 possible combinations.\r\n   */\r\n  public static readonly parshalist: Parsha[][] = [\r\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\r\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NONE, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS_BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\r\n    [Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\r\n    [Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\r\n    [Parsha.NONE, Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\r\n    [Parsha.NONE, Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\r\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NONE, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS_BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\r\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\r\n    [Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.ACHREI_MOS, Parsha.NONE, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS, Parsha.MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\r\n    [Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.ACHREI_MOS, Parsha.NONE, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS, Parsha.MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\r\n    [Parsha.NONE, Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\r\n    [Parsha.NONE, Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NONE, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS_BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\r\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR_BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\r\n    [Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL_PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.NONE, Parsha.SHMINI, Parsha.TAZRIA_METZORA, Parsha.ACHREI_MOS_KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\r\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\r\n    [Parsha.NONE, Parsha.VAYEILECH, Parsha.HAAZINU, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS, Parsha.MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM],\r\n    [Parsha.NONE, Parsha.NONE, Parsha.HAAZINU, Parsha.NONE, Parsha.NONE, Parsha.BERESHIS, Parsha.NOACH, Parsha.LECH_LECHA, Parsha.VAYERA, Parsha.CHAYEI_SARA, Parsha.TOLDOS, Parsha.VAYETZEI, Parsha.VAYISHLACH, Parsha.VAYESHEV, Parsha.MIKETZ, Parsha.VAYIGASH, Parsha.VAYECHI, Parsha.SHEMOS, Parsha.VAERA, Parsha.BO, Parsha.BESHALACH, Parsha.YISRO, Parsha.MISHPATIM, Parsha.TERUMAH, Parsha.TETZAVEH, Parsha.KI_SISA, Parsha.VAYAKHEL, Parsha.PEKUDEI, Parsha.VAYIKRA, Parsha.TZAV, Parsha.SHMINI, Parsha.TAZRIA, Parsha.METZORA, Parsha.NONE, Parsha.ACHREI_MOS, Parsha.KEDOSHIM, Parsha.EMOR, Parsha.BEHAR, Parsha.BECHUKOSAI, Parsha.BAMIDBAR, Parsha.NASSO, Parsha.BEHAALOSCHA, Parsha.SHLACH, Parsha.KORACH, Parsha.CHUKAS, Parsha.BALAK, Parsha.PINCHAS, Parsha.MATOS_MASEI, Parsha.DEVARIM, Parsha.VAESCHANAN, Parsha.EIKEV, Parsha.REEH, Parsha.SHOFTIM, Parsha.KI_SEITZEI, Parsha.KI_SAVO, Parsha.NITZAVIM_VAYEILECH],\r\n  ];\r\n\r\n  /**\r\n   * Is this calendar set to return modern Israeli national holidays. By default this value is false. The holidays\r\n\t * are {@link #YOM_HASHOAH <em>Yom HaShoah</em>}, {@link #YOM_HAZIKARON <em>Yom Hazikaron</em>}, {@link\r\n   * #YOM_HAATZMAUT <em>Yom Ha'atzmaut</em>} and {@link #YOM_YERUSHALAYIM <em>Yom Yerushalayim</em>}.\r\n   * \r\n   * @return the useModernHolidays true if set to return modern Israeli national holidays\r\n   * \r\n   * @see #setUseModernHolidays(boolean)\r\n   */\r\n  public isUseModernHolidays(): boolean {\r\n    return this.useModernHolidays;\r\n  }\r\n\r\n  /**\r\n   * Sets the calendar to return modern Israeli national holidays. By default this value is false. The holidays are:\r\n\t * {@link #YOM_HASHOAH <em>Yom HaShoah</em>}, {@link #YOM_HAZIKARON <em>Yom Hazikaron</em>}, {@link\r\n   * #YOM_HAATZMAUT <em>Yom Ha'atzmaut</em>} and {@link #YOM_YERUSHALAYIM <em>Yom Yerushalayim</em>}.\r\n   * \r\n   * @param useModernHolidays\r\n   *            the useModernHolidays to set\r\n   * \r\n   * @see #isUseModernHolidays()\r\n   */\r\n  public setUseModernHolidays(useModernHolidays: boolean): void {\r\n    this.useModernHolidays = useModernHolidays;\r\n  }\r\n\r\n  /**\r\n   * Default constructor will set a default date to the current system date.\r\n   */\r\n  /*\r\n      public JewishCalendar() {\r\n          super();\r\n      }\r\n  */\r\n\r\n  /**\r\n   * A constructor that initializes the date to the {@link java.util.Date Date} parameter.\r\n   *\r\n   * @param date\r\n   *            the <code>Date</code> to set the calendar to\r\n   */\r\n  /*\r\n      public JewishCalendar(date: Date) {\r\n          super(date);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * A constructor that initializes the date to the {@link java.util.Calendar Calendar} parameter.\r\n   *\r\n   * @param calendar\r\n   *            the <code>Calendar</code> to set the calendar to\r\n   */\r\n  /*\r\n      public JewishCalendar(calendar: GregorianCalendar) {\r\n          super(calendar);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Creates a Jewish date based on a Jewish year, month and day of month.\r\n   *\r\n   * @param jewishYear\r\n   *            the Jewish year\r\n   * @param jewishMonth\r\n   *            the Jewish month. The method expects a 1 for Nissan ... 12 for Adar and 13 for Adar II. Use the\r\n   *            constants {@link #NISSAN} ... {@link #ADAR} (or {@link #ADAR_II} for a leap year Adar II) to avoid any\r\n   *            confusion.\r\n   * @param jewishDayOfMonth\r\n   *            the Jewish day of month. If 30 is passed in for a month with only 29 days (for example {@link #IYAR},\r\n   *            or {@link #KISLEV} in a year that {@link #isKislevShort()}), the 29th (last valid date of the month)\r\n   *            will be set\r\n   * @throws IllegalArgumentException\r\n   *             if the day of month is &lt; 1 or &gt; 30, or a year of &lt; 0 is passed in.\r\n   */\r\n\r\n  /*\r\n      public JewishCalendar(jewishYear: number, jewishMonth: number, jewishDayOfMonth: number) {\r\n          super(jewishYear, jewishMonth, jewishDayOfMonth);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Creates a Jewish date based on a Jewish date and whether in Israel\r\n   *\r\n   * @param jewishYear\r\n   *            the Jewish year\r\n   * @param jewishMonth\r\n   *            the Jewish month. The method expects a 1 for Nissan ... 12 for Adar and 13 for Adar II. Use the\r\n   *            constants {@link #NISSAN} ... {@link #ADAR} (or {@link #ADAR_II} for a leap year Adar II) to avoid any\r\n   *            confusion.\r\n   * @param jewishDayOfMonth\r\n   *            the Jewish day of month. If 30 is passed in for a month with only 29 days (for example {@link #IYAR},\r\n   *            or {@link #KISLEV} in a year that {@link #isKislevShort()}), the 29th (last valid date of the month)\r\n   *            will be set\r\n   * @param inIsrael\r\n   *            whether in Israel. This affects Yom Tov calculations\r\n   */\r\n  constructor(jewishYear: number, jewishMonth: number, jewishDayOfMonth: number, inIsrael?: boolean);\r\n  constructor(date: Date);\r\n  constructor(date: Temporal.PlainDate);\r\n  constructor();\r\n  constructor(jewishYearOrDateTimeOrDate?: number | Date | Temporal.PlainDate, jewishMonth?: number, jewishDayOfMonth?: number, inIsrael?: boolean) {\r\n    // @ts-ignore\r\n    super(jewishYearOrDateTimeOrDate, jewishMonth, jewishDayOfMonth);\r\n    if (inIsrael) this.setInIsrael(inIsrael);\r\n  }\r\n\r\n  /**\r\n   * Sets whether to use Israel holiday scheme or not. Default is false.\r\n   *\r\n   * @param inIsrael\r\n   *            set to true for calculations for Israel\r\n   * \r\n\t * @see #getInIsrael()\r\n   */\r\n  public setInIsrael(inIsrael: boolean): void {\r\n    this.inIsrael = inIsrael;\r\n  }\r\n\r\n  /**\r\n   * Gets whether Israel holiday scheme is used or not. The default (if not set) is false.\r\n   *\r\n   * @return if the calendar is set to Israel\r\n\t * \r\n\t * @see #setInIsrael(boolean)\r\n   */\r\n  public getInIsrael(): boolean {\r\n    return this.inIsrael;\r\n  }\r\n\r\n  /**\r\n\t * Returns if the city is set as a city surrounded by a wall from the time of Yehoshua, and Shushan Purim\r\n\t * should be celebrated as opposed to regular Purim.\r\n\t * @return if the city is set as a city surrounded by a wall from the time of Yehoshua, and Shushan Purim\r\n\t *         should be celebrated as opposed to regular Purim.\r\n\t * @see #setIsMukafChoma(boolean)\r\n\t */\r\n  public getIsMukafChoma():boolean {\r\n    return this.isMukafChoma;\r\n  }\r\n\r\n  /**\r\n\t * Sets if the location is surrounded by a wall from the time of Yehoshua, and Shushan Purim should be\r\n\t * celebrated as opposed to regular Purim. This should be set for Yerushalayim, Shushan and other cities.\r\n\t * @param isMukafChoma is the city surrounded by a wall from the time of Yehoshua.\r\n\t * \r\n\t * @see #getIsMukafChoma()\r\n\t */\r\n  public setIsMukafChoma(isMukafChoma:boolean):void {\r\n    this.isMukafChoma = isMukafChoma;\r\n  }\r\n\r\n  /**\r\n   * <a href=\"https://en.wikipedia.org/wiki/Birkat_Hachama\">Birkas Hachamah</a> is recited every 28 years based on\r\n   * <em>Tekufas Shmuel</em> (Julian years) that a year is 365.25 days. The <a href=\"https://en.wikipedia.org/wiki/Maimonides\"\r\n\t * >Rambam</a> in <a href=\"http://hebrewbooks.org/pdfpager.aspx?req=14278&amp;st=&amp;pgnum=323\">Hilchos Kiddush Hachodesh 9:3</a>\r\n\t * states that <em>tekufas Nissan</em> of year 1 was 7 days + 9 hours before <em>molad Nissan</em>. This is calculated as every\r\n\t * 10,227 days (28 * 365.25).  \r\n\t * @return true for a day that <em>Birkas Hachamah</em> is recited.\r\n   */\r\n  public isBirkasHachamah(): boolean {\r\n    // elapsed days since molad ToHu\r\n    let elapsedDays: number = JewishCalendar.getJewishCalendarElapsedDays(this.getJewishYear());\r\n    // elapsed days to the current calendar date\r\n    elapsedDays += Math.trunc(this.getDaysSinceStartOfJewishYear());\r\n\r\n    /* Molad Nissan year 1 was 177 days after molad tohu of Tishrei. We multiply 29.5 days * 6 months from Tishrei\r\n\t\t * to Nissan = 177. Subtract 7 days since tekufas Nissan was 7 days and 9 hours before the molad as stated in the Rambam\r\n\t\t * and we are now at 170 days. Because getJewishCalendarElapsedDays and getDaysSinceStartOfJewishYear use the value for\r\n\t\t * Rosh Hashana as 1, we have to add 1 day for a total of 171. To this add a day since the tekufah is on a Tuesday\r\n\t\t * night and we push off the bracha to Wednesday AM resulting in the 172 used in the calculation.\r\n\t\t */\r\n    // 28 years of 365.25 days + the offset from molad tohu mentioned above\r\n    return elapsedDays % (28 * 365.25) === 172;\r\n  }\r\n\r\n  /**\r\n   * Return the type of year for <em>parsha</em> calculations. The algorithm follows the\r\n\t * <a href=\"http://hebrewbooks.org/pdfpager.aspx?req=14268&amp;st=&amp;pgnum=222\">Luach Arba'ah Shearim</a> in the Tur Ohr Hachaim.\r\n\t * @return the type of year for <em>parsha</em> calculations.\r\n   * @todo Use constants in this class.\r\n   */\r\n  private getParshaYearType(): number {\r\n    const roshHashanah = this.getDate().withCalendar(\"hebrew\").with({ day: 1, month: 1 });\r\n    if (roshHashanah.monthsInYear == 13) {\r\n      switch (roshHashanah.dayOfWeek) {\r\n        case 1: // MONDAY\r\n          // BaCh\r\n          if (this.isKislevShort()) {\r\n            if (this.getInIsrael()) {\r\n              return 14;\r\n            }\r\n            return 6;\r\n          }\r\n\r\n          // BaSh\r\n          if (this.isCheshvanLong()) {\r\n            if (this.getInIsrael()) {\r\n              return 15;\r\n            }\r\n            return 7;\r\n          }\r\n          break;\r\n        // GaK\r\n        case 2: // Tuesday\r\n          if (this.getInIsrael()) {\r\n            return 15;\r\n          }\r\n          return 7;\r\n        case 4: // Thursday\r\n          // HaCh\r\n          if (this.isKislevShort()) {\r\n            return 8;\r\n          }\r\n\r\n          // HaSh\r\n          if (this.isCheshvanLong()) {\r\n            return 9;\r\n          }\r\n\r\n          break;\r\n        case 6: // Saturday\r\n          // ZaCh\r\n          if (this.isKislevShort()) {\r\n            return 10;\r\n          }\r\n\r\n          // ZaSh\r\n          if (this.isCheshvanLong()) {\r\n            if (this.getInIsrael()) {\r\n              return 16;\r\n            }\r\n            return 11;\r\n          }\r\n\r\n          break;\r\n      }\r\n    } else {\r\n      // not a leap year\r\n      switch (roshHashanah.dayOfWeek) {\r\n        case 1: // MONDAY\r\n          // BaCh\r\n          if (this.isKislevShort()) {\r\n            return 0;\r\n          }\r\n\r\n          // BaSh\r\n          if (this.isCheshvanLong()) {\r\n            if (this.getInIsrael()) {\r\n              return 12;\r\n            }\r\n            return 1;\r\n          }\r\n\r\n          break;\r\n        case 2: // TUESDAY\r\n          // GaK\r\n          if (this.getInIsrael()) {\r\n            return 12;\r\n          }\r\n          return 1;\r\n        case 4: // THURSDAY\r\n          // HaSh\r\n          if (this.isCheshvanLong()) {\r\n            return 3;\r\n          }\r\n\r\n          // HaK\r\n          if (!this.isKislevShort()) {\r\n            if (this.getInIsrael()) {\r\n              return 13;\r\n            }\r\n            return 2;\r\n          }\r\n\r\n          break;\r\n        case 6: // SATURDAY\r\n          // ZaCh\r\n          if (this.isKislevShort()) {\r\n            return 4;\r\n          }\r\n\r\n          // ZaSh\r\n          if (this.isCheshvanLong()) {\r\n            return 5;\r\n          }\r\n\r\n          break;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Returns this week's {@link Parsha} if it is Shabbos.\r\n   * returns Parsha.NONE if a weekday or if there is no parsha that week (for example Yomtov is on Shabbos)\r\n   * @return the current parsha\r\n   */\r\n  public getParshah(): Parsha {\r\n    if (this.getDayOfWeek() !== SATURDAY) {\r\n      return Parsha.NONE;\r\n    }\r\n\r\n    const yearType: number = this.getParshaYearType();\r\n    const roshHashanaDayOfWeek: number = JewishCalendar.getJewishCalendarElapsedDays(this.getJewishYear()) % 7;\r\n    const day: number = roshHashanaDayOfWeek + Math.trunc(this.getDaysSinceStartOfJewishYear());\r\n\r\n    // negative year should be impossible, but lets cover all bases\r\n    if (yearType >= 0) {\r\n      return JewishCalendar.parshalist[yearType][day / 7];\r\n    }\r\n\r\n    // keep the compiler happy\r\n    return Parsha.NONE;\r\n  }\r\n\r\n  /**\r\n   * Returns a parsha enum if the Shabbos is one of the four parshiyos of Parsha.SHKALIM, Parsha.ZACHOR, Parsha.PARA,\r\n   * Parsha.HACHODESH or Parsha.NONE for a regular Shabbos (or any weekday).\r\n   * @return one of the four parshiyos of Parsha.SHKALIM, Parsha.ZACHOR, Parsha.PARA, Parsha.HACHODESH or Parsha.NONE.\r\n   */\r\n  public getSpecialShabbos(): Parsha {\r\n    if (this.getDayOfWeek() !== SATURDAY)\r\n      return Parsha.NONE;\r\n\r\n    if (((this.getJewishMonth() === JewishCalendar.SHEVAT && !this.isJewishLeapYear())\r\n      || (this.getJewishMonth() === JewishCalendar.ADAR && this.isJewishLeapYear()))\r\n      && [25, 27, 29].includes(this.getJewishDayOfMonth())) {\r\n      return Parsha.SHKALIM;\r\n    }\r\n\r\n    if ((this.getJewishMonth() === JewishCalendar.ADAR && !this.isJewishLeapYear())\r\n      || this.getJewishMonth() === JewishCalendar.ADAR_II) {\r\n      if (this.getJewishDayOfMonth() === 1) {\r\n        return Parsha.SHKALIM;\r\n      }\r\n\r\n      if ([8, 9, 11, 13].includes(this.getJewishDayOfMonth())) {\r\n        return Parsha.ZACHOR;\r\n      }\r\n\r\n      if ([18, 20, 22, 23].includes(this.getJewishDayOfMonth())) {\r\n        return Parsha.PARA;\r\n      }\r\n\r\n      if ([25, 27, 29].includes(this.getJewishDayOfMonth())) {\r\n        return Parsha.HACHODESH;\r\n      }\r\n    }\r\n\r\n    if (this.getJewishMonth() === JewishCalendar.NISSAN) {\r\n      if (this.getJewishDayOfMonth() == 1)\r\n        return Parsha.HACHODESH;\r\n\r\n      if (this.getJewishDayOfMonth() >= 8 && this.getJewishDayOfMonth() <= 14)\r\n        return Parsha.HAGADOL;\r\n    }\r\n\r\n    if (this.getJewishMonth() == JewishCalendar.AV) {\r\n      if (this.getJewishDayOfMonth() >= 4 && this.getJewishDayOfMonth() <= 9) {\r\n        return Parsha.CHAZON;\r\n      }\r\n      if (this.getJewishDayOfMonth() >= 10 && this.getJewishDayOfMonth() <= 16) {\r\n        return Parsha.NACHAMU;\r\n      }\r\n    }\r\n\r\n    if (this.getJewishMonth() == JewishCalendar.TISHREI && this.getJewishDayOfMonth() >= 3 && this.getJewishDayOfMonth() <= 8)\r\n      return Parsha.SHUVA;\r\n\r\n    if (this.getParshah() == Parsha.BESHALACH)\r\n      return Parsha.SHIRA;\r\n\r\n    return Parsha.NONE;\r\n  }\r\n\r\n  /**\r\n   * Returns an index of the Jewish holiday or fast day for the current day, or a -1 if there is no holiday for this\r\n   * day. There are constants in this class representing each Yom Tov. Formatting of the Yomim tovim is done in the\r\n   * ZmanimFormatter#\r\n   *\r\n   * @todo consider using enums instead of the constant ints.\r\n   *\r\n   * @return the index of the holiday such as the constant {@link #LAG_BAOMER} or {@link #YOM_KIPPUR} or a -1 if it is not a holiday.\r\n   * @see HebrewDateFormatter\r\n   */\r\n  public getYomTovIndex(): number {\r\n    const day: number = this.getJewishDayOfMonth();\r\n    const dayOfWeek: number = this.getDayOfWeek();\r\n\r\n    // check by month (starting from Nissan)\r\n    switch (this.getJewishMonth()) {\r\n      case JewishCalendar.NISSAN:\r\n        if (day === 14) {\r\n          return JewishCalendar.EREV_PESACH;\r\n        } else if (day === 15 || day === 21 || (!this.inIsrael && (day === 16 || day === 22))) {\r\n          return JewishCalendar.PESACH;\r\n        } else if ((day >= 17 && day <= 20) || (day === 16 && this.inIsrael)) {\r\n          return JewishCalendar.CHOL_HAMOED_PESACH;\r\n        }\r\n\r\n        if (this.isUseModernHolidays()\r\n          && ((day === 26 && dayOfWeek === 5) || (day === 28 && dayOfWeek === 2)\r\n            || (day === 27 && dayOfWeek !== 1 && dayOfWeek !== 6))) {\r\n          return JewishCalendar.YOM_HASHOAH;\r\n        }\r\n        break;\r\n      case JewishCalendar.IYAR:\r\n        if (this.isUseModernHolidays()\r\n          && ((day === 4 && dayOfWeek === 3) || ((day === 3 || day === 2) && dayOfWeek === 4)\r\n            || (day === 5 && dayOfWeek === 2))) {\r\n          return JewishCalendar.YOM_HAZIKARON;\r\n        }\r\n\r\n        // if 5 Iyar falls on Wed Yom Haatzmaut is that day. If it fal1s on Friday or Shabbos it is moved back to\r\n        // Thursday. If it falls on Monday it is moved to Tuesday\r\n        if (this.isUseModernHolidays() && ((day === 5 && dayOfWeek === 4)\r\n          || ((day === 4 || day === 3) && dayOfWeek === 5) || (day === 6 && dayOfWeek === 3))) {\r\n          return JewishCalendar.YOM_HAATZMAUT;\r\n        }\r\n\r\n        if (day === 14) {\r\n          return JewishCalendar.PESACH_SHENI;\r\n        }\r\n\r\n        if (day === 18) {\r\n          return JewishCalendar.LAG_BAOMER;\r\n        }\r\n\r\n        if (this.isUseModernHolidays() && day === 28) {\r\n          return JewishCalendar.YOM_YERUSHALAYIM;\r\n        }\r\n        break;\r\n      case JewishCalendar.SIVAN:\r\n        if (day === 5) {\r\n          return JewishCalendar.EREV_SHAVUOS;\r\n        } else if (day === 6 || (day === 7 && !this.inIsrael)) {\r\n          return JewishCalendar.SHAVUOS;\r\n        }\r\n        break;\r\n      case JewishCalendar.TAMMUZ:\r\n        // push off the fast day if it falls on Shabbos\r\n        if ((day === 17 && dayOfWeek !== 7) || (day === 18 && dayOfWeek === 1)) {\r\n          return JewishCalendar.SEVENTEEN_OF_TAMMUZ;\r\n        }\r\n        break;\r\n      case JewishCalendar.AV:\r\n        // if Tisha B'av falls on Shabbos, push off until Sunday\r\n        if ((dayOfWeek === 1 && day === 10) || (dayOfWeek !== 7 && day === 9)) {\r\n          return JewishCalendar.TISHA_BEAV;\r\n        } else if (day === 15) {\r\n          return JewishCalendar.TU_BEAV;\r\n        }\r\n        break;\r\n      case JewishCalendar.ELUL:\r\n        if (day === 29) {\r\n          return JewishCalendar.EREV_ROSH_HASHANA;\r\n        }\r\n        break;\r\n      case JewishCalendar.TISHREI:\r\n        if (day === 1 || day === 2) {\r\n          return JewishCalendar.ROSH_HASHANA;\r\n        } else if ((day === 3 && dayOfWeek !== 7) || (day === 4 && dayOfWeek === 1)) {\r\n          // push off Tzom Gedalia if it falls on Shabbos\r\n          return JewishCalendar.FAST_OF_GEDALYAH;\r\n        } else if (day === 9) {\r\n          return JewishCalendar.EREV_YOM_KIPPUR;\r\n        } else if (day === 10) {\r\n          return JewishCalendar.YOM_KIPPUR;\r\n        } else if (day === 14) {\r\n          return JewishCalendar.EREV_SUCCOS;\r\n        }\r\n\r\n        if (day === 15 || (day === 16 && !this.inIsrael)) {\r\n          return JewishCalendar.SUCCOS;\r\n        }\r\n\r\n        if ((day >= 17 && day <= 20) || (day === 16 && this.inIsrael)) {\r\n          return JewishCalendar.CHOL_HAMOED_SUCCOS;\r\n        }\r\n\r\n        if (day === 21) {\r\n          return JewishCalendar.HOSHANA_RABBA;\r\n        }\r\n\r\n        if (day === 22) {\r\n          return JewishCalendar.SHEMINI_ATZERES;\r\n        }\r\n\r\n        if (day === 23 && !this.inIsrael) {\r\n          return JewishCalendar.SIMCHAS_TORAH;\r\n        }\r\n        break;\r\n      case JewishCalendar.KISLEV: // no yomtov in CHESHVAN\r\n        // if (day == 24) {\r\n        // return EREV_CHANUKAH;\r\n        // } else\r\n        if (day >= 25) {\r\n          return JewishCalendar.CHANUKAH;\r\n        }\r\n        break;\r\n      case JewishCalendar.TEVES:\r\n        if (day === 1 || day === 2 || (day === 3 && this.isKislevShort())) {\r\n          return JewishCalendar.CHANUKAH;\r\n        } else if (day === 10) {\r\n          return JewishCalendar.TENTH_OF_TEVES;\r\n        }\r\n        break;\r\n      case JewishCalendar.SHEVAT:\r\n        if (day === 15) {\r\n          return JewishCalendar.TU_BESHVAT;\r\n        }\r\n        break;\r\n      case JewishCalendar.ADAR:\r\n        if (!this.isJewishLeapYear()) {\r\n          // if 13th Adar falls on Friday or Shabbos, push back to Thursday\r\n          if (((day === 11 || day === 12) && dayOfWeek === 5) || (day === 13 && !(dayOfWeek === 6 || dayOfWeek === 7))) {\r\n            return JewishCalendar.FAST_OF_ESTHER;\r\n          }\r\n\r\n          if (day === 14) {\r\n            return JewishCalendar.PURIM;\r\n          } else if (day === 15) {\r\n            return JewishCalendar.SHUSHAN_PURIM;\r\n          }\r\n        } else {\r\n          // else if a leap year\r\n          if (day === 14) {\r\n            return JewishCalendar.PURIM_KATAN;\r\n          }\r\n\r\n          if (day === 15) {\r\n            return JewishCalendar.SHUSHAN_PURIM_KATAN;\r\n          }\r\n        }\r\n        break;\r\n      case JewishCalendar.ADAR_II:\r\n        // if 13th Adar falls on Friday or Shabbos, push back to Thursday\r\n        if (((day === 11 || day === 12) && dayOfWeek === 5) || (day === 13 && !(dayOfWeek === 6 || dayOfWeek === 7))) {\r\n          return JewishCalendar.FAST_OF_ESTHER;\r\n        }\r\n\r\n        if (day === 14) {\r\n          return JewishCalendar.PURIM;\r\n        } else if (day === 15) {\r\n          return JewishCalendar.SHUSHAN_PURIM;\r\n        }\r\n        break;\r\n    }\r\n    // if we get to this stage, then there are no holidays for the given date return -1\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current day is Yom Tov. The method returns true even for holidays such as {@link #CHANUKAH} and minor\r\n   * ones such as {@link #TU_BEAV} and {@link #PESACH_SHENI}. Erev Yom Tov (with the exception of {@link #HOSHANA_RABBA},\r\n   * Erev the second days of Pesach) returns false, as do {@link #isTaanis() fast days} besides {@link #YOM_KIPPUR}. Use\r\n   * {@link #isAssurBemelacha()} to find the days that have a prohibition of work.\r\n   *\r\n   * @return true if the current day is a Yom Tov\r\n   *\r\n   * @see #getYomTovIndex()\r\n   * @see #isErevYomTov()\r\n   * @see #isErevYomTovSheni()\r\n   * @see #isTaanis()\r\n   * @see #isAssurBemelacha()\r\n   * @see #isCholHamoed()\r\n   */\r\n  public isYomTov(): boolean {\r\n    const holidayIndex: number = this.getYomTovIndex();\r\n\r\n    if ((this.isErevYomTov() && (holidayIndex !== JewishCalendar.HOSHANA_RABBA\r\n      && (holidayIndex === JewishCalendar.CHOL_HAMOED_PESACH && this.getJewishDayOfMonth() !== 20)))\r\n      || (this.isTaanis() && holidayIndex !== JewishCalendar.YOM_KIPPUR)) {\r\n      return false;\r\n    }\r\n\r\n    return this.getYomTovIndex() !== -1;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the <em>Yom Tov</em> day has a <em>melacha</em> (work) prohibition. This method will return false for a\r\n   * non-<em>Yom Tov</em> day, even if it is <em>Shabbos</em>.\r\n   *\r\n   * @return if the <em>Yom Tov</em> day has a <em>melacha</em> (work) prohibition.\r\n   */\r\n  public isYomTovAssurBemelacha(): boolean {\r\n    const yamimTovimAssurBemelacha = [\r\n      JewishCalendar.PESACH,\r\n      JewishCalendar.SHAVUOS,\r\n      JewishCalendar.SUCCOS,\r\n      JewishCalendar.SHEMINI_ATZERES,\r\n      JewishCalendar.SIMCHAS_TORAH,\r\n      JewishCalendar.ROSH_HASHANA,\r\n      JewishCalendar.YOM_KIPPUR,\r\n    ];\r\n    const holidayIndex: number = this.getYomTovIndex();\r\n    return yamimTovimAssurBemelacha.includes(holidayIndex);\r\n  }\r\n\r\n  /**\r\n   * Returns true if it is <em>Shabbos</em> or if it is a <em>Yom Tov</em> day that has a <em>melacha</em> (work)  prohibition.\r\n   * This method will return false for a.\r\n   * @return if the day is a <em>Yom Tov</em> that is <em>assur bemlacha</em> or <em>Shabbos</em>\r\n   */\r\n  public isAssurBemelacha(): boolean {\r\n    return this.getDayOfWeek() === SATURDAY || this.isYomTovAssurBemelacha();\r\n  }\r\n\r\n  /**\r\n   * Returns true if the day has candle lighting. This will return true on erev <em>Shabbos</em>, erev <em>Yom Tov</em>, the\r\n   * first day of <em>Rosh Hashana</em> and the first days of <em>Yom Tov</em> out of Israel. It is identical\r\n   * to calling {@link #isTomorrowShabbosOrYomTov()}.\r\n   *\r\n   * @return if the day has candle lighting\r\n   */\r\n  public hasCandleLighting(): boolean {\r\n    return this.isTomorrowShabbosOrYomTov();\r\n  }\r\n\r\n  /**\r\n   * Returns true if tomorrow is <em>Shabbos</em> or <em>Yom Tov</em>. This will return true on erev <em>Shabbos</em>, erev\r\n   * <em>Yom Tov</em>, the first day of <em>Rosh Hashana</em> and <em>erev</em> the first days of <em>Yom Tov</em> out of\r\n   * Israel. It is identical to calling {@link #hasCandleLighting()}.\r\n   * @return will return if the next day is <em>Shabbos</em> or <em>Yom Tov</em>\r\n   */\r\n  public isTomorrowShabbosOrYomTov(): boolean {\r\n    return this.getDayOfWeek() === FRIDAY || this.isErevYomTov() || this.isErevYomTovSheni();\r\n  }\r\n\r\n  /**\r\n   * Returns true if the day is the second day of <em>Yom Tov</em>. This impacts the second day of <em>Rosh Hashana</em>\r\n   * everywhere, and the second days of Yom Tov in <em>chutz laaretz</em> (out of Israel).\r\n   *\r\n   * @return  if the day is the second day of <em>Yom Tov</em>.\r\n   */\r\n  public isErevYomTovSheni(): boolean {\r\n    return (this.getJewishMonth() === JewishCalendar.TISHREI && (this.getJewishDayOfMonth() === 1))\r\n      || (!this.getInIsrael()\r\n        && ((this.getJewishMonth() === JewishCalendar.NISSAN && [15, 21].includes(this.getJewishDayOfMonth()))\r\n          || (this.getJewishMonth() === JewishCalendar.TISHREI && [15, 22].includes(this.getJewishDayOfMonth()))\r\n          || (this.getJewishMonth() === JewishCalendar.SIVAN && this.getJewishDayOfMonth() === 6)));\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current day is <em>Aseret Yemei Teshuva</em>.\r\n   *\r\n   * @return if the current day is <em>Aseret Yemei Teshuvah</em>\r\n   */\r\n  public isAseresYemeiTeshuva(): boolean {\r\n    return this.getJewishMonth() === JewishCalendar.TISHREI && this.getJewishDayOfMonth() <= 10;\r\n  }\r\n\r\n  /**\r\n\t * Returns true if the current day is <em>Pesach</em> (either  the <em>Yom Tov</em> of <em>Pesach</em> or<em>Chol Hamoed Pesach</em>).\r\n\t * \r\n\t * @return true if the current day is <em>Pesach</em> (either  the <em>Yom Tov</em> of <em>Pesach</em> or<em>Chol Hamoed Pesach</em>).\r\n\t * @see #isYomTov()\r\n\t * @see #isCholHamoedPesach()\r\n\t * @see #PESACH\r\n\t * @see #CHOL_HAMOED_PESACH\r\n\t */\r\n  public isPesach():boolean {\r\n    const holidayIndex:number = this.getYomTovIndex();\r\n    return holidayIndex == JewishCalendar.PESACH || holidayIndex == JewishCalendar.CHOL_HAMOED_PESACH;\r\n  }\r\n\t\r\n  /**\r\n   * Returns true if the current day is <em>Chol Hamoed</em> of <em>Pesach</em>.\r\n   *\r\n   * @return true if the current day is <em>Chol Hamoed</em> of <em>Pesach</em>\r\n   * @see #isYomTov()\r\n   * @see #isPessach()\r\n   * @see #CHOL_HAMOED_PESACH\r\n   */\r\n  public isCholHamoedPesach(): boolean {\r\n    const holidayIndex: number = this.getYomTovIndex();\r\n    return holidayIndex === JewishCalendar.CHOL_HAMOED_PESACH;\r\n  }\r\n\t\r\n  /**\r\n\t * Returns true if the current day is <em>Shavuos</em>.\r\n\t *\r\n\t * @return true if the current day is <em>Shavuos</em>.\r\n\t * @see #isYomTov()\r\n\t * @see #SHAVUOS\r\n\t */\r\n  public isShavuos():boolean {\r\n    const holidayIndex:number = this.getYomTovIndex();\r\n    return holidayIndex == JewishCalendar.SHAVUOS;\r\n  }\r\n\t\r\n  /**\r\n\t * Returns true if the current day is <em>Rosh Hashana</em>.\r\n\t *\r\n\t * @return true if the current day is <em>Rosh Hashana</em>.\r\n\t * @see #isYomTov()\r\n\t * @see #ROSH_HASHANA\r\n\t */\r\n  public isRoshHashana():boolean {\r\n    const holidayIndex:number = this.getYomTovIndex();\r\n    return holidayIndex == JewishCalendar.ROSH_HASHANA;\r\n  }\r\n\t\r\n  /**\r\n\t * Returns true if the current day is <em>Yom Kippur</em>.\r\n\t *\r\n\t * @return true if the current day is <em>Yom Kippur</em>.\r\n\t * @see #isYomTov()\r\n\t * @see #YOM_KIPPUR\r\n\t */\r\n  public isYomKippur():boolean {\r\n    const holidayIndex:number = this.getYomTovIndex();\r\n    return holidayIndex == JewishCalendar.YOM_KIPPUR;\r\n  }\r\n\t\r\n  /**\r\n\t * Returns true if the current day is <em>Succos</em> (either  the <em>Yom Tov</em> of <em>Succos</em> or<em>Chol Hamoed Succos</em>).\r\n\t * It will return false for {@link #isShminiAtzeres() Shmini Atzeres} and {@link #isSimchasTorah() Simchas Torah}.\r\n\t * \r\n\t * @return true if the current day is <em>Succos</em> (either  the <em>Yom Tov</em> of <em>Succos</em> or<em>Chol Hamoed Succos</em>.\r\n\t * @see #isYomTov()\r\n\t * @see #isCholHamoedSuccos()\r\n\t * @see #isHoshanaRabba()\r\n\t * @see #SUCCOS\r\n\t * @see #CHOL_HAMOED_SUCCOS\r\n\t * @see #HOSHANA_RABBA\r\n\t */\r\n  public isSuccos():boolean {\r\n    const holidayIndex:number = this.getYomTovIndex();\r\n    return holidayIndex == JewishCalendar.SUCCOS || holidayIndex == JewishCalendar.CHOL_HAMOED_SUCCOS || holidayIndex == JewishCalendar.HOSHANA_RABBA;\r\n  }\r\n\t\r\n  /**\r\n\t * Returns true if the current day is <em>Hoshana Rabba</em>.\r\n\t *\r\n\t * @return true true if the current day is <em>Hoshana Rabba</em>.\r\n\t * @see #isYomTov()\r\n\t * @see #HOSHANA_RABBA\r\n\t */\r\n  public isHoshanaRabba():boolean {\r\n    const holidayIndex: number = this.getYomTovIndex();\r\n    return holidayIndex == JewishCalendar.HOSHANA_RABBA;\r\n  }\r\n\t\r\n  /**\r\n\t * Returns true if the current day is <em>Shmini Atzeres</em>.\r\n\t *\r\n\t * @return true if the current day is <em>Shmini Atzeres</em>.\r\n\t * @see #isYomTov()\r\n\t * @see #SHEMINI_ATZERES\r\n\t */\r\n  public isShminiAtzeres():boolean {\r\n    const holidayIndex:number = this.getYomTovIndex();\r\n    return holidayIndex == JewishCalendar.SHEMINI_ATZERES;\r\n  }\r\n\t\r\n  /**\r\n\t * Returns true if the current day is <em>Simchas Torah</em>. This will always return false if {@link #getInIsrael() in Israel}\r\n\t *\r\n\t * @return true if the current day is <em>Shmini Atzeres</em>.\r\n\t * @see #isYomTov()\r\n\t * @see #SIMCHAS_TORAH\r\n\t */\r\n  public isSimchasTorah():boolean {\r\n    const holidayIndex:number = this.getYomTovIndex();\r\n    //if in Israel, Holiday index of SIMCHAS_TORAH will not be returned by getYomTovIndex()\r\n    return holidayIndex == JewishCalendar.SIMCHAS_TORAH;\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns true if the current day is <em>Chol Hamoed</em> of <em>Succos</em>.\r\n   *\r\n   * @return true if the current day is <em>Chol Hamoed</em> of <em>Succos</em>\r\n   * @see #isYomTov()\r\n   * @see #CHOL_HAMOED_SUCCOS\r\n   */\r\n  public isCholHamoedSuccos(): boolean {\r\n    const holidayIndex: number = this.getYomTovIndex();\r\n    return holidayIndex === JewishCalendar.CHOL_HAMOED_SUCCOS;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current day is <em>Chol Hamoed</em> of <em>Pesach</em> or <em>Succos</em>.\r\n   *\r\n   * @return true if the current day is <em>Chol Hamoed</em> of <em>Pesach</em> or <em>Succos</em>\r\n   * @see #isYomTov()\r\n   * @see #CHOL_HAMOED_PESACH\r\n   * @see #CHOL_HAMOED_SUCCOS\r\n   */\r\n  public isCholHamoed(): boolean {\r\n    return this.isCholHamoedPesach() || this.isCholHamoedSuccos();\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current day is erev Yom Tov. The method returns true for Erev - Pesach (first and last days),\r\n   * Shavuos, Rosh Hashana, Yom Kippur and Succos and Hoshana Rabba.\r\n   *\r\n   * @return true if the current day is Erev - Pesach, Shavuos, Rosh Hashana, Yom Kippur and Succos\r\n   * @see #isYomTov()\r\n   * @see #isErevYomTovSheni()\r\n   */\r\n  public isErevYomTov(): boolean {\r\n    const erevYomTov = [\r\n      JewishCalendar.EREV_PESACH,\r\n      JewishCalendar.EREV_SHAVUOS,\r\n      JewishCalendar.EREV_ROSH_HASHANA,\r\n      JewishCalendar.EREV_YOM_KIPPUR,\r\n      JewishCalendar.EREV_SUCCOS,\r\n      JewishCalendar.HOSHANA_RABBA,\r\n    ];\r\n    const holidayIndex: number = this.getYomTovIndex();\r\n    return erevYomTov.includes(holidayIndex)\r\n      || (holidayIndex === JewishCalendar.CHOL_HAMOED_PESACH && this.getJewishDayOfMonth() === 20);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current day is Erev Rosh Chodesh. Returns false for Erev Rosh Hashana\r\n   *\r\n   * @return true if the current day is Erev Rosh Chodesh. Returns false for Erev Rosh Hashana\r\n   * @see #isRoshChodesh()\r\n   */\r\n  public isErevRoshChodesh(): boolean {\r\n    // Erev Rosh Hashana is not Erev Rosh Chodesh.\r\n    return (this.getJewishDayOfMonth() === 29 && this.getJewishMonth() !== JewishCalendar.ELUL);\r\n  }\r\n\r\n  /**\r\n   * Return true if the day is a Taanis (fast day). Return true for 17 of Tammuz, Tisha B'Av, Yom Kippur, Fast of\r\n   * Gedalyah, 10 of Teves and the Fast of Esther\r\n   *\r\n   * @return true if today is a fast day\r\n   */\r\n  public isTaanis(): boolean {\r\n    const taaniyos = [\r\n      JewishCalendar.SEVENTEEN_OF_TAMMUZ,\r\n      JewishCalendar.TISHA_BEAV,\r\n      JewishCalendar.YOM_KIPPUR,\r\n      JewishCalendar.FAST_OF_GEDALYAH,\r\n      JewishCalendar.TENTH_OF_TEVES,\r\n      JewishCalendar.FAST_OF_ESTHER,\r\n    ];\r\n    const holidayIndex: number = this.getYomTovIndex();\r\n    return taaniyos.includes(holidayIndex);\r\n  }\r\n\r\n  /**\r\n   * Return true if the day is Taanis Bechoros (on erev Pesach). It will return true for the 14th of Nissan if it is not\r\n   * on Shabbos, or if the 12th of Nissan occurs on a Thursday\r\n   *\r\n   * @return true if today is the fast of Bechoros\r\n   */\r\n  public isTaanisBechoros(): boolean {\r\n    const day: number = this.getJewishDayOfMonth();\r\n    const dayOfWeek: number = this.getDayOfWeek();\r\n    // on 14 Nisan unless that is Shabbos where the fast is moved back to Thursday\r\n    return this.getJewishMonth() === JewishCalendar.NISSAN && ((day === 14 && dayOfWeek !== Calendar.SATURDAY)\r\n        || (day === 12 && dayOfWeek === Calendar.THURSDAY));\r\n  }\r\n\r\n  /**\r\n   * Returns the day of <em>Chanukah</em> or -1 if it is not <em>Chanukah</em>.\r\n   *\r\n   * @return the day of <em>Chanukah</em> or -1 if it is not <em>Chanukah</em>.\r\n   * @see #isChanukah()\r\n   */\r\n  public getDayOfChanukah(): number {\r\n    const day: number = this.getJewishDayOfMonth();\r\n\r\n    if (this.isChanukah()) {\r\n      if (this.getJewishMonth() === JewishCalendar.KISLEV) {\r\n        return day - 24;\r\n      }\r\n      // teves\r\n      return this.isKislevShort() ? day + 5 : day + 6;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current day is one of the 8 days of <em>Chanukah</em>.\r\n   * @return if the current day is one of the 8 days of <em>Chanukah</em>.\r\n   * @see #getDayOfChanukah()\r\n   */\r\n  public isChanukah(): boolean {\r\n    return this.getYomTovIndex() === JewishCalendar.CHANUKAH;\r\n  }\r\n\r\n  \t/**\r\n\t * Returns if the day is Purim (<a href=\"https://en.wikipedia.org/wiki/Purim#Shushan_Purim\">Shushan Purim</a>\r\n\t * in a mukaf choma and regular Purim in a non-mukaf choma). \r\n\t * @return if the day is Purim (Shushan Purim in a mukaf choma and regular Purin in a non-mukaf choma)\r\n\t * \r\n\t * @see #getIsMukafChoma()\r\n\t * @see #setIsMukafChoma(boolean)\r\n\t */\r\n  public isPurim():boolean {\r\n    if (this.isMukafChoma) {\r\n      return this.getYomTovIndex() == JewishCalendar.SHUSHAN_PURIM;\r\n    }\r\n\r\n    return this.getYomTovIndex() == JewishCalendar.PURIM;\r\n  }\r\n\r\n  /**\r\n   * Returns if the day is Rosh Chodesh. Rosh Hashana will return false\r\n   *\r\n   * @return true if it is Rosh Chodesh. Rosh Hashana will return false\r\n   */\r\n  public isRoshChodesh(): boolean {\r\n    // Rosh Hashana is not rosh chodesh. Elul never has 30 days\r\n    return (this.getJewishDayOfMonth() === 1 && this.getJewishMonth() !== JewishCalendar.TISHREI) || this.getJewishDayOfMonth() === 30;\r\n  }\r\n\r\n  /**\r\n   * Returns if the day is Shabbos and sunday is Rosh Chodesh.\r\n   *\r\n   * @return true if it is Shabbos and sunday is Rosh Chodesh.\r\n   */\r\n  public isMacharChodesh(): boolean {\r\n    return (this.getDayOfWeek() === SATURDAY && (this.getJewishDayOfMonth() === 30 || this.getJewishDayOfMonth() === 29));\r\n  }\r\n\r\n  /**\r\n   * Returns if the day is Shabbos Mevorchim.\r\n   *\r\n   * @return true if it is Shabbos Mevorchim.\r\n   */\r\n  public isShabbosMevorchim(): boolean {\r\n    return this.getDayOfWeek() === SATURDAY\r\n      && this.getJewishDayOfMonth() >= 23\r\n      && this.getJewishDayOfMonth() <= 29\r\n      && this.getJewishMonth() !== JewishCalendar.ELUL;\r\n  }\r\n\r\n  /**\r\n   * Returns the int value of the Omer day or -1 if the day is not in the omer\r\n   *\r\n   * @return The Omer count as an int or -1 if it is not a day of the Omer.\r\n   */\r\n  public getDayOfOmer(): number {\r\n    let omer: number = -1; // not a day of the Omer\r\n    const month: number = this.getJewishMonth();\r\n    const day: number = this.getJewishDayOfMonth();\r\n\r\n    // if Nissan and second day of Pesach and on\r\n    if (month === JewishCalendar.NISSAN && day >= 16) {\r\n      omer = day - 15;\r\n      // if Iyar\r\n    } else if (month === JewishCalendar.IYAR) {\r\n      omer = day + 15;\r\n      // if Sivan and before Shavuos\r\n    } else if (month === JewishCalendar.SIVAN && day < 6) {\r\n      omer = day + 44;\r\n    }\r\n    return omer;\r\n  }\r\n\r\n  /**\r\n   * Returns the molad in Standard Time in Yerushalayim as a Date. The traditional calculation uses local time. This\r\n   * method subtracts 20.94 minutes (20 minutes and 56.496 seconds) from the local time (Har Habayis with a longitude\r\n   * of 35.2354&deg; is 5.2354&deg; away from the %15 timezone longitude) to get to standard time. This method\r\n   * intentionally uses standard time and not dailight savings time. Java will implicitly format the time to the\r\n   * default (or set) Timezone.\r\n   *\r\n   * @return the Date representing the moment of the molad in Yerushalayim standard time (GMT + 2)\r\n   */\r\n  public getMoladAsDate(): Temporal.ZonedDateTime {\r\n    const molad: JewishDate = this.getMolad();\r\n    const locationName: string = 'Jerusalem, Israel';\r\n\r\n    const latitude: number = 31.778; // Har Habayis latitude\r\n    const longitude: number = 35.2354; // Har Habayis longitude\r\n\r\n    // The raw molad Date (point in time) must be generated using standard time. Using \"Asia/Jerusalem\" timezone will result in the time\r\n    // being incorrectly off by an hour in the summer due to DST. Proper adjustment for the actual time in DST will be done by the date\r\n    // formatter class used to display the Date.\r\n    const yerushalayimStandardTZ: string = 'Etc/GMT+2';\r\n    const geo: GeoLocation = new GeoLocation(locationName, latitude, longitude, yerushalayimStandardTZ);\r\n\r\n    const moladSeconds: number = (molad.getMoladChalakim() * 10) / 3;\r\n    // subtract local time difference of 20.94 minutes (20 minutes and 56.496 seconds) to get to Standard time\r\n    const milliseconds: number = Math.trunc(1000 * (moladSeconds - Math.trunc(moladSeconds)));\r\n\r\n    return Temporal.ZonedDateTime.from({\r\n      timeZone: geo.getTimeZone(),\r\n      year: molad.getGregorianYear(),\r\n      month: molad.getGregorianMonth() + 1,\r\n      day: molad.getGregorianDayOfMonth(),\r\n      hour: molad.getMoladHours(),\r\n      minute: molad.getMoladMinutes(),\r\n      second: Math.trunc(moladSeconds),\r\n      millisecond: milliseconds,\r\n    })\r\n      .subtract({ milliseconds: Math.trunc(geo.getLocalMeanTimeOffset()) });\r\n  }\r\n\r\n  /**\r\n   * Returns the earliest time of <em>Kiddush Levana</em> calculated as 3 days after the molad. This method returns the time\r\n   * even if it is during the day when <em>Kiddush Levana</em> can't be said. Callers of this method should consider\r\n   * displaying the next <em>tzais</em> if the zman is between <em>alos</em> and <em>tzais</em>.\r\n   *\r\n   * @return the Date representing the moment 3 days after the molad.\r\n   *\r\n   * @see ComplexZmanimCalendar#getTchilasZmanKidushLevana3Days()\r\n   * @see ComplexZmanimCalendar#getTchilasZmanKidushLevana3Days(Date, Date)\r\n   */\r\n  public getTchilasZmanKidushLevana3Days(): Temporal.ZonedDateTime {\r\n    const molad: Temporal.ZonedDateTime = this.getMoladAsDate();\r\n\r\n    return molad.add({ hours: 72 });\r\n  }\r\n\r\n  /**\r\n   * Returns the earliest time of Kiddush Levana calculated as 7 days after the molad as mentioned by the <a\r\n   * href=\"https://en.wikipedia.org/wiki/Yosef_Karo\">Mechaber</a>. See the <a\r\n   * href=\"https://en.wikipedia.org/wiki/Yoel_Sirkis\">Bach's</a> opinion on this time. This method returns the time\r\n   * even if it is during the day when <em>Kiddush Levana</em> can't be said. Callers of this method should consider\r\n   * displaying the next <em>tzais</em> if the zman is between <em>alos</em> and <em>tzais</em>.\r\n   *\r\n   * @return the Date representing the moment 7 days after the molad.\r\n   *\r\n   * @see ComplexZmanimCalendar#getTchilasZmanKidushLevana7Days()\r\n   * @see ComplexZmanimCalendar#getTchilasZmanKidushLevana7Days(Date, Date)\r\n   */\r\n  public getTchilasZmanKidushLevana7Days(): Temporal.ZonedDateTime {\r\n    const molad: Temporal.ZonedDateTime = this.getMoladAsDate();\r\n\r\n    return molad.add({ hours: 168 });\r\n  }\r\n\r\n  /**\r\n   * Returns the latest time of Kiddush Levana according to the <a\r\n   * href=\"https://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> opinion that it is calculated as\r\n   * halfway between molad and molad. This adds half the 29 days, 12 hours and 793 chalakim time between molad and\r\n   * molad (14 days, 18 hours, 22 minutes and 666 milliseconds) to the month's molad. This method returns the time\r\n   * even if it is during the day when <em>Kiddush Levana</em> can't be said. Callers of this method should consider\r\n   * displaying <em>alos</em> before this time if the zman is between <em>alos</em> and <em>tzais</em>.\r\n   *\r\n   * @return the Date representing the moment halfway between molad and molad.\r\n   * @see #getSofZmanKidushLevana15Days()\r\n   * @see ComplexZmanimCalendar#getSofZmanKidushLevanaBetweenMoldos()\r\n   * @see ComplexZmanimCalendar#getSofZmanKidushLevanaBetweenMoldos(Date, Date)\r\n   */\r\n  public getSofZmanKidushLevanaBetweenMoldos(): Temporal.ZonedDateTime {\r\n    const molad: Temporal.ZonedDateTime = this.getMoladAsDate();\r\n\r\n    return molad.add({\r\n      days: 14,\r\n      hours: 18,\r\n      minutes: 22,\r\n      seconds: 1,\r\n      milliseconds: 666,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the latest time of Kiddush Levana calculated as 15 days after the molad. This is the opinion brought down\r\n   * in the Shulchan Aruch (Orach Chaim 426). It should be noted that some opinions hold that the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Moses_Isserles\">Rema</a> who brings down the opinion of the <a\r\n   * href=\"https://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> of calculating\r\n   * {@link #getSofZmanKidushLevanaBetweenMoldos() half way between molad and mold} is of the opinion that Mechaber\r\n   * agrees to his opinion. Also see the Aruch Hashulchan. For additional details on the subject, See Rabbi Dovid\r\n   * Heber's very detailed writeup in Siman Daled (chapter 4) of <a\r\n   * href=\"http://www.worldcat.org/oclc/461326125\">Shaarei Zmanim</a>. This method returns the time even if it is during\r\n   * the day when <em>Kiddush Levana</em> can't be said. Callers of this method should consider displaying <em>alos</em>\r\n   * before this time if the zman is between <em>alos</em> and <em>tzais</em>.\r\n   *\r\n   * @return the Date representing the moment 15 days after the molad.\r\n   * @see #getSofZmanKidushLevanaBetweenMoldos()\r\n   * @see ComplexZmanimCalendar#getSofZmanKidushLevana15Days()\r\n   * @see ComplexZmanimCalendar#getSofZmanKidushLevana15Days(Date, Date)\r\n   */\r\n  public getSofZmanKidushLevana15Days(): Temporal.ZonedDateTime {\r\n    const molad: Temporal.ZonedDateTime = this.getMoladAsDate();\r\n\r\n    return molad.add({ days: 15 });\r\n  }\r\n\r\n  /**\r\n   * Returns the Daf Yomi (Bavli) for the date that the calendar is set to. See the\r\n   * {@link HebrewDateFormatter#formatDafYomiBavli(Daf)} for the ability to format the daf in Hebrew or transliterated\r\n   * masechta names.\r\n   *\r\n   * @return the daf as a {@link Daf}\r\n   */\r\n  public getDafYomiBavli(): Daf {\r\n    return YomiCalculator.getDafYomiBavli(this);\r\n  }\r\n\r\n  /**\r\n   * Returns the Daf Yomi (Yerushalmi) for the date that the calendar is set to. See the\r\n   * {@link HebrewDateFormatter#formatDafYomiYerushalmi(Daf)} for the ability to format the daf in Hebrew or transliterated\r\n   * masechta names.\r\n   *\r\n   * @return the daf as a {@link Daf}\r\n   */\r\n  public getDafYomiYerushalmi() {\r\n    return YerushalmiYomiCalculator.getDafYomiYerushalmi(this);\r\n  }\r\n\r\n  /**\r\n   * Returns the equivalent Chafetz Chayim Yomi page for the date that this is set to\r\n   */\r\n  public getChafetzChayimYomi() {\r\n    return ChafetzChayimYomiCalculator.getChafetzChayimYomi(this);\r\n  }\r\n\r\n  /**\r\n\t * Returns the elapsed days since <em>Tekufas Tishrei</em>. This uses <em>Tekufas Shmuel</em> (identical to the <a href=\r\n\t * \"https://en.wikipedia.org/wiki/Julian_year_(astronomy)\">Julian Year</a> with a solar year length of 365.25 days).\r\n\t * The notation used below is D = days, H = hours and C = chalakim. <em><a href=\"https://en.wikipedia.org/wiki/Molad\"\r\n\t * >Molad</a> BaHaRad</em> was 2D,5H,204C or 5H,204C from the start of <em>Rosh Hashana</em> year 1. For <em>molad\r\n\t * Nissan</em> add 177D, 4H and 438C (6 * 29D, 12H and 793C), or 177D,9H,642C after <em>Rosh Hashana</em> year 1.\r\n\t * <em>Tekufas Nissan</em> was 7D, 9H and 642C before <em>molad Nissan</em> according to the Rambam, or 170D, 0H and\r\n\t * 0C after <em>Rosh Hashana</em> year 1. <em>Tekufas Tishrei</em> was 182D and 3H (365.25 / 2) before <em>tekufas\r\n\t * Nissan</em>, or 12D and 15H before <em>Rosh Hashana</em> of year 1. Outside of Israel we start reciting <em>Tal\r\n\t * Umatar</em> in <em>Birkas Hashanim</em> from 60 days after <em>tekufas Tishrei</em>. The 60 days include the day of\r\n\t * the <em>tekufah</em> and the day we start reciting <em>Tal Umatar</em>. 60 days from the tekufah == 47D and 9H\r\n\t * from <em>Rosh Hashana</em> year 1.\r\n\t * \r\n\t * @return the number of elapsed days since <em>tekufas Tishrei</em>.\r\n\t * \r\n\t * @see #isVeseinTalUmatarStartDate()\r\n\t * @see #isVeseinTalUmatarStartingTonight()\r\n\t * @see #isVeseinTalUmatarRecited()\r\n\t */\r\n  public getTekufasTishreiElapsedDays():number {\r\n    // Days since Rosh Hashana year 1. Add 1/2 day as the first tekufas tishrei was 9 hours into the day. This allows all\r\n    // 4 years of the secular leap year cycle to share 47 days. Truncate 47D and 9H to 47D for simplicity.\r\n    const days:number = JewishCalendar.getJewishCalendarElapsedDays(this.getJewishYear()) + (this.getDaysSinceStartOfJewishYear() - 1) + 0.5;\r\n    // days of completed solar years\r\n    const solar:number = (this.getJewishYear() - 1) * 365.25;\r\n    return Math.floor(days - solar);\r\n  }\r\n\r\n  /**\r\n\t * Returns true if the current day is <em>Isru Chag</em>. The method returns true for the day following <em>Pesach</em>\r\n\t * <em>Shavuos</em> and <em>Succos</em>. It utilizes {@see #getInIsrael()} to return the proper date.\r\n\t * \r\n\t * @return true if the current day is <em>Isru Chag</em>. The method returns true for the day following <em>Pesach</em>\r\n\t * <em>Shavuos</em> and <em>Succos</em>. It utilizes {@see #getInIsrael()} to return the proper date.\r\n\t */\r\n  public isIsruChag():boolean {\r\n    const holidayIndex:number = this.getYomTovIndex();\r\n    return holidayIndex == JewishCalendar.ISRU_CHAG;\r\n  }\r\n\r\n  /**\r\n   * Indicates whether some other object is \"equal to\" this one.\r\n   * @see Object#equals(Object)\r\n   */\r\n  public equals(jewishCalendar: JewishCalendar): boolean {\r\n    return Temporal.PlainDate.compare(this.getDate(), jewishCalendar.getDate()) === 0 && this.getInIsrael() === jewishCalendar.getInIsrael();\r\n  }\r\n}\r\n","import { Temporal } from 'temporal-polyfill'\r\n\r\nimport { AstronomicalCalendar } from './AstronomicalCalendar';\r\nimport { JewishCalendar } from './hebrewcalendar/JewishCalendar';\r\nimport { NullPointerException } from './polyfills/errors';\r\nimport { Long_MIN_VALUE } from './polyfills/Utils';\r\n\r\n/**\r\n * The ZmanimCalendar is a specialized calendar that can calculate sunrise, sunset and Jewish <em>zmanim</em>\r\n * (religious times) for prayers and other Jewish religious duties. This class contains the main functionality of the\r\n * <em>Zmanim</em> library. For a much more extensive list of <em>zmanim</em>, use the {@link ComplexZmanimCalendar} that\r\n * extends this class. See documentation for the {@link ComplexZmanimCalendar} and {@link AstronomicalCalendar} for\r\n * simple examples on using the API. \r\n * <strong>Elevation based <em>zmanim</em> (even sunrise and sunset) should not be used <em>lekula</em> without the guidance\r\n * of a <em>posek</em></strong>. According to Rabbi Dovid Yehudah Bursztyn in his\r\n * <a href=\"https://www.worldcat.org/oclc/1158574217\">Zmanim Kehilchasam, 7th edition</a> chapter 2, section 7 (pages 181-182)\r\n * and section 9 (pages 186-187), no <em>zmanim</em> besides sunrise and sunset should use elevation. However, Rabbi Yechiel\r\n * Avrahom Zilber in the <a href=\"https://hebrewbooks.org/51654\">Birur Halacha Vol. 6</a> Ch. 58 Pages\r\n * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=42\">34</a> and\r\n * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=50\">42</a> is of the opinion that elevation should be\r\n * accounted for in <em>zmanim</em> calculations. Related to this, Rabbi Yaakov Karp in <a href=\r\n * \"https://www.worldcat.org/oclc/919472094\">Shimush Zekeinim</a>, Ch. 1, page 17 states that obstructing horizons should\r\n * be factored into <em>zmanim</em> calculations. The setting defaults to false (elevation will not be used for\r\n * <em>zmanim</em> calculations besides sunrise and sunset), unless the setting is changed to true in {@link\r\n * #setUseElevation(boolean)}. This will impact sunrise and sunset-based <em>zmanim</em> such as {@link #getSunrise()},\r\n * {@link #getSunset()}, {@link #getSofZmanShmaGRA()}, <em>alos</em>-based <em>zmanim</em> such as {@link #getSofZmanShmaMGA()}\r\n * that are based on a fixed offset of sunrise or sunset and <em>zmanim</em> based on a percentage of the day such as\r\n * {@link ComplexZmanimCalendar#getSofZmanShmaMGA90MinutesZmanis()} that are based on sunrise and sunset. Even when set to\r\n * true it will not impact <em>zmanim</em> that are a degree-based offset of sunrise and sunset, such as {@link\r\n * ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()} or {@link ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()} since\r\n * these <em>zmanim</em> are not linked to sunrise or sunset times (the calculations are based on the astronomical definition of\r\n * sunrise and sunset calculated in a vacuum with the solar radius above the horizon), and are therefore not impacted by the use\r\n * of elevation.\r\n * For additional information on the <em>halachic</em> impact of elevation on <em>zmanim</em> see:\r\n * <ul>\r\n * <li><a href=\"https://www.nli.org.il/en/books/NNL_ALEPH002542826/NLI\">Zmanei Halacha Lema'aseh</a> 4th edition by <a href=\r\n * \"http://beinenu.com/rabbis/%D7%94%D7%A8%D7%91-%D7%99%D7%93%D7%99%D7%93%D7%99%D7%94-%D7%9E%D7%A0%D7%AA\">Rabbi Yedidya Manat</a>.\r\n * See section 1, pages 11-12 for a very concise write-up, with details in section 2, pages 37 - 63 and 133 - 151.</li>\r\n * <li><a href=\"https://www.worldcat.org/oclc/1158574217\">Zmanim Kehilchasam</a> 7th edition, by Rabbi Dovid Yehuda Burstein,  vol 1,\r\n * chapter 2, pages 95 - 188.</li>\r\n * <li><a href=\"https://www.worldcat.org/oclc/36089452\">Hazmanim Bahalacha</a> by Rabbi Chaim Banish , perek 7, pages 53 - 63.</li>\r\n * </ul>\r\n * \r\n * <p><b>Note:</b> It is important to read the technical notes on top of the {@link AstronomicalCalculator} documentation\r\n * before using this code.\r\n * <p>I would like to thank <a href=\"https://www.worldcat.org/search?q=au%3AShakow%2C+Yaakov\">Rabbi Yaakov Shakow</a>, the\r\n * author of Luach Ikvei Hayom who spent a considerable amount of time reviewing, correcting and making suggestions on the\r\n * documentation in this library.\r\n * <h2>Disclaimer:</h2> I did my best to get accurate results, but please double-check before relying on these\r\n * <em>zmanim</em> for <em>halacha lema'aseh</em>.\r\n * \r\n * \r\n * @author &copy; Eliyahu Hershfeld 2004 - 2022\r\n */\r\nexport class ZmanimCalendar extends AstronomicalCalendar {\r\n  /**\r\n\t * Is elevation factored in for some zmanim (see {@link #isUseElevation()} for additional information).\r\n\t * @see #isUseElevation()\r\n\t * @see #setUseElevation(boolean)\r\n\t */\r\n  private useElevation: boolean = false;\r\n\r\n  /**\r\n\t * Is elevation above sea level calculated for times besides sunrise and sunset. According to Rabbi Dovid Yehuda\r\n\t * Bursztyn in his <a href=\"https://www.worldcat.org/oclc/659793988\">Zmanim Kehilchasam (second edition published\r\n\t * in 2007)</a> chapter 2 (pages 186-187) no <em>zmanim</em> besides sunrise and sunset should use elevation. However\r\n\t * Rabbi Yechiel Avrahom Zilber in the <a href=\"https://hebrewbooks.org/51654\">Birur Halacha Vol. 6</a> Ch. 58 Pages\r\n\t * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=42\">34</a> and <a href=\r\n\t * \"https://hebrewbooks.org/pdfpager.aspx?req=51654&amp;pgnum=50\">42</a> is of the opinion that elevation should be\r\n\t * accounted for in <em>zmanim</em> calculations. Related to this, Rabbi Yaakov Karp in <a href=\r\n\t * \"https://www.worldcat.org/oclc/919472094\">Shimush Zekeinim</a>, Ch. 1, page 17 states that obstructing horizons\r\n\t * should be factored into <em>zmanim</em> calculations.The setting defaults to false (elevation will not be used for\r\n\t * <em>zmanim</em> calculations), unless the setting is changed to true in {@link #setUseElevation(boolean)}. This will\r\n\t * impact sunrise and sunset based <em>zmanim</em> such as {@link #getSunrise()}, {@link #getSunset()},\r\n\t * {@link #getSofZmanShmaGRA()}, alos based <em>zmanim</em> such as {@link #getSofZmanShmaMGA()} that are based on a\r\n\t * fixed offset of sunrise or sunset and <em>zmanim</em> based on a percentage of the day such as {@link\r\n  * ComplexZmanimCalendar#getSofZmanShmaMGA90MinutesZmanis()} that are based on sunrise and sunset. It will not impact\r\n  * <em>zmanim</em> that are a degree based offset of sunrise and sunset, such as\r\n  * {@link ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()} or {@link ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()}.\r\n  * \r\n  * @return if the use of elevation is active\r\n  * \r\n  * @see #setUseElevation(boolean)\r\n  */\r\n  public isUseElevation(): boolean {\r\n    return this.useElevation;\r\n  }\r\n\r\n  /**\r\n\t * Sets whether elevation above sea level is factored into <em>zmanim</em> calculations for times besides sunrise and sunset.\r\n\t * See {@link #isUseElevation()} for more details. \r\n\t * @see #isUseElevation()\r\n\t * \r\n\t * @param useElevation set to true to use elevation in <em>zmanim</em> calculations\r\n\t */\r\n  public setUseElevation(useElevation: boolean): void {\r\n    this.useElevation = useElevation;\r\n  }\r\n\r\n  /**\r\n\t * Is astronomical <em>chatzos</em> used for <em>zmanim</em> calculations. The default value of <code>true</code> will\r\n\t * keep the standard astronomical <em>chatzos</em> calculation, while setting it to <code>false</code> will use half of\r\n\t * a solar day calculation for <em>chatzos</em>.\r\n\t * @see #isUseAstronomicalChatzos()\r\n\t * @see #setUseAstronomicalChatzos(boolean)\r\n\t * @see #getChatzos()\r\n\t * @see #getSunTransit()\r\n\t * @see #getChatzosAsHalfDay()\r\n\t * @see #useAstronomicalChatzosForOtherZmanim\r\n\t */\r\n\tprivate useAstronomicalChatzos:boolean = true;\r\n\r\n\t/**\r\n\t * Is {@link #getSunTransit() astronomical <em>chatzos</em>} used for {@link #getChatzos()} for enhanced accuracy. For\r\n\t * example as the day is lengthens, the second half of the day is longer than the first and astronomical <em>chatzos</em>\r\n\t * would be a drop earlier than half of the time between sunrise and sunset.\r\n\t * \r\n\t * @todo In the future, if this is set to true, the following may change to enhance accuracy. {@link #getSofZmanShmaGRA()\r\n\t * <em>Sof zman Shma</em> GRA} would be calculated as 3 <em>shaaos zmaniyos</em> after sunrise, but the <em>shaaos\r\n\t * zmaniyos</em> would be calculated a a 6th of the time between sunrise and <em>chatzos</em>, as opposed to a 12th of the\r\n\t * time between sunrise and sunset. {@link #getMinchaGedola() <em>mincha gedola</em>} will be calculated as half a\r\n\t * <em>shaah zmanis</em> of afternoon hours (a 6th of the time between <em>chatzos</em> and sunset after astronomical\r\n\t * <em>chatzos</em> as opposed to 6.5 <em>shaaos zmaniyos</em> after sunrise. {@link #getPlagHamincha() <em>Plag\r\n\t * hamincha</em>} would be calculated as 4.75 <em>shaaos zmaniyos</em> after astronomical <em>chatzos</em> as opposed to 10.75\r\n\t * <em>shaaos zmaniyos</em> after sunrise. Etc.\r\n\t * \r\n\t * @return if the use of astronomical <em>chatzos</em> is active.\r\n\t * @see #useAstronomicalChatzos\r\n\t * @see #setUseAstronomicalChatzos(boolean)\r\n\t * @see #getChatzos()\r\n\t * @see #getSunTransit()\r\n\t * @see #getChatzosAsHalfDay()\r\n\t * @see #isUseAstronomicalChatzosForOtherZmanim()\r\n\t */\r\n\tpublic isUseAstronomicalChatzos(): boolean {\r\n\t\treturn this.useAstronomicalChatzos;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if astronomical <em>chatzos</em> should be used in calculations of other <em>zmanim</em> for enhanced accuracy.\r\n\t * @param useAstronomicalChatzos set to true to use astronomical in <em>chatzos</em> in <em>zmanim</em> calculations.\r\n\t * @see #useAstronomicalChatzos\r\n\t * @see #isUseAstronomicalChatzos()\r\n\t * @see #getChatzos()\r\n\t * @see #getSunTransit()\r\n\t * @see #getChatzosAsHalfDay()\r\n\t * @see #setUseAstronomicalChatzosForOtherZmanim(boolean)\r\n\t */\r\n\tpublic setUseAstronomicalChatzos(useAstronomicalChatzos: boolean) {\r\n\t\tthis.useAstronomicalChatzos = useAstronomicalChatzos;\r\n\t}\r\n\r\n\t/**\r\n\t * Is astronomical <em>chatzos</em> used for <em>zmanim</em> calculations besides <em>chatzos</em> itself for enhanced\r\n\t * accuracy. The default value of <code>false</code> will keep the standard start to end of day calculations, while setting\r\n\t * it to <code>true</code> will use half of a solar day calculation for <em>zmanim</em>.\r\n\t * @see #isUseAstronomicalChatzosForOtherZmanim()\r\n\t * @see #setUseAstronomicalChatzosForOtherZmanim(boolean)\r\n\t * @see #isUseAstronomicalChatzos()\r\n\t * @see #setUseAstronomicalChatzos(boolean)\r\n\t * @see #getChatzos()\r\n\t */\r\n\tprivate useAstronomicalChatzosForOtherZmanim:boolean = false;\r\n\r\n\t/**\r\n\t * Is astronomical <em>chatzos</em> used for <em>zmanim</em> calculations besides <em>chatzos</em> itself for enhanced\r\n\t * accuracy. For example as the day is lengthening (as we approach spring season), the second half of the day is longer than\r\n\t * the first and astronomical <em>chatzos</em> would be a drop earlier than half of the time between sunrise and sunset.\r\n\t * Conversely, the second half of the day would be shorter in the fall season as the days start getting shorter.\r\n\t * \r\n\t * @todo In the future, if this is set to true, the following may change to enhance accuracy. {@link #getSofZmanShmaGRA()\r\n\t * <em>Sof zman Shma</em> GRA} would be calculated as 3 <em>shaaos zmaniyos</em> after sunrise, but the <em>shaaos\r\n\t * zmaniyos</em> would be calculated a a 6th of the time between sunrise and <em>chatzos</em>, as opposed to a 12th of the\r\n\t * time between sunrise and sunset. {@link #getMinchaGedola() <em>mincha gedola</em>} will be calculated as half a\r\n\t * <em>shaah zmanis</em> of afternoon hours (a 6th of the time between <em>chatzos</em> and sunset after astronomical\r\n\t * <em>chatzos</em> as opposed to 6.5 <em>shaaos zmaniyos</em> after sunrise. {@link #getPlagHamincha() <em>Plag\r\n\t * hamincha</em>} would be calculated as 4.75 <em>shaaos zmaniyos</em> after astronomical <em>chatzos</em> as opposed to 10.75\r\n\t * <em>shaaos zmaniyos</em> after sunrise. Etc.\r\n\t * \r\n\t * @return if the use of astronomical <em>chatzos</em> is active.\r\n\t * @see #useAstronomicalChatzosForOtherZmanim\r\n\t * @see #setUseAstronomicalChatzosForOtherZmanim(boolean)\r\n\t * @see #useAstronomicalChatzos\r\n\t * @see #setUseAstronomicalChatzos(boolean)\r\n\t */\r\n\tpublic isUseAstronomicalChatzosForOtherZmanim():boolean {\r\n\t\treturn this.useAstronomicalChatzosForOtherZmanim;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if astronomical <em>chatzos</em> should be used in calculations of other <em>zmanim</em> for enhanced accuracy.\r\n\t * @param useAstronomicalChatzosForOtherZmanim set to true to use astronomical in <em>chatzos</em> in <em>zmanim</em> calculations.\r\n\t * @see #useAstronomicalChatzos\r\n\t * @see #isUseAstronomicalChatzos()\r\n\t */\r\n\tpublic setUseAstronomicalChatzosForOtherZmanim(useAstronomicalChatzosForOtherZmanim: boolean) {\r\n\t\tthis.useAstronomicalChatzosForOtherZmanim = useAstronomicalChatzosForOtherZmanim;\r\n\t}\r\n\r\n  /**\r\n\t * The zenith of 16.1&deg; below geometric zenith (90&deg;). This calculation is used for determining <em>alos</em>\r\n\t * (dawn) and <em>tzais</em> (nightfall) in some opinions. It is based on the calculation that the time between dawn\r\n\t * and sunrise (and sunset to nightfall) is 72 minutes, the time that is takes to walk 4 <em>mil</em> at 18 minutes\r\n\t * a mil (<em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others). The sun's position at\r\n\t * 72 minutes before {@link #getSunrise sunrise} in Jerusalem <a href=\r\n\t * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> is\r\n\t * 16.1&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n\t * \r\n\t * @see #getAlosHashachar()\r\n\t * @see ComplexZmanimCalendar#getAlos16Point1Degrees()\r\n\t * @see ComplexZmanimCalendar#getTzais16Point1Degrees()\r\n\t * @see ComplexZmanimCalendar#getSofZmanShmaMGA16Point1Degrees()\r\n\t * @see ComplexZmanimCalendar#getSofZmanTfilaMGA16Point1Degrees()\r\n\t * @see ComplexZmanimCalendar#getMinchaGedola16Point1Degrees()\r\n\t * @see ComplexZmanimCalendar#getMinchaKetana16Point1Degrees()\r\n\t * @see ComplexZmanimCalendar#getPlagHamincha16Point1Degrees()\r\n\t * @see ComplexZmanimCalendar#getPlagAlos16Point1ToTzaisGeonim7Point083Degrees()\r\n\t * @see ComplexZmanimCalendar#getSofZmanShmaAlos16Point1ToSunset()\r\n\t */\r\n  protected static readonly ZENITH_16_POINT_1: number = ZmanimCalendar.GEOMETRIC_ZENITH + 16.1;\r\n\r\n  /**\r\n\t * The zenith of 8.5&deg; below geometric zenith (90&deg;). This calculation is used for calculating <em>alos</em>\r\n\t * (dawn) and <em>tzais</em> (nightfall) in some opinions. This calculation is based on the position of the sun 36\r\n\t * minutes after {@link #getSunset sunset} in Jerusalem <a href=\r\n\t * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\r\n\t * is 8.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. The <em><a href=\r\n\t * \"https://www.worldcat.org/oclc/29283612\">Ohr Meir</a></em> considers this the time that 3 small stars are visible,\r\n\t * which is later than the required 3 medium stars.\r\n\t * \r\n\t * @see #getTzais()\r\n\t * @see ComplexZmanimCalendar#getTzaisGeonim8Point5Degrees()\r\n\t */\r\n  protected static readonly ZENITH_8_POINT_5: number = ZmanimCalendar.GEOMETRIC_ZENITH + 8.5;\r\n\r\n  /**\r\n\t * The default <em>Shabbos</em> candle lighting offset is 18 minutes. This can be changed via the\r\n\t * {@link #setCandleLightingOffset(double)} and retrieved by the {@link #getCandleLightingOffset()}.\r\n\t */\r\n  private candleLightingOffset: number = 18;\r\n\r\n  /**\r\n\t * This method will return {@link #getSeaLevelSunrise() sea level sunrise} if {@link #isUseElevation()} is false (the\r\n\t * default), or elevation adjusted {@link AstronomicalCalendar#getSunrise()} if it is true. This allows relevant <em>zmanim</em>\r\n\t * in this and extending classes (such as the {@link ComplexZmanimCalendar}) to automatically adjust to the elevation setting.\r\n\t * \r\n\t * @return {@link #getSeaLevelSunrise()} if {@link #isUseElevation()} is false (the default), or elevation adjusted\r\n\t *         {@link AstronomicalCalendar#getSunrise()} if it is true.\r\n\t * @see AstronomicalCalendar#getSunrise()\r\n\t */\r\n  protected getElevationAdjustedSunrise(): Temporal.ZonedDateTime | null {\r\n    if (this.isUseElevation()) {\r\n      return super.getSunrise();\r\n    }\r\n    return this.getSeaLevelSunrise();\r\n  }\r\n\r\n  /**\r\n\t * This method will return {@link #getSeaLevelSunrise() sea level sunrise} if {@link #isUseElevation()} is false (the default),\r\n\t * or elevation adjusted {@link AstronomicalCalendar#getSunrise()} if it is true. This allows relevant <em>zmanim</em>\r\n\t * in this and extending classes (such as the {@link ComplexZmanimCalendar}) to automatically adjust to the elevation setting.\r\n\t * \r\n\t * @return {@link #getSeaLevelSunset()} if {@link #isUseElevation()} is false (the default), or elevation adjusted\r\n\t *         {@link AstronomicalCalendar#getSunset()} if it is true.\r\n\t * @see AstronomicalCalendar#getSunset()\r\n\t */\r\n  protected getElevationAdjustedSunset(): Temporal.ZonedDateTime | null {\r\n    if (this.isUseElevation()) {\r\n      return super.getSunset();\r\n    }\r\n    return this.getSeaLevelSunset();\r\n  }\r\n\r\n  /**\r\n\t * A method that returns <em>tzais</em> (nightfall) when the sun is {@link #ZENITH_8_POINT_5 8.5&deg;} below the\r\n\t * {@link #GEOMETRIC_ZENITH geometric horizon} (90&deg;) after {@link #getSunset sunset}, a time that Rabbi Meir\r\n\t * Posen in his the <em><a href=\"https://www.worldcat.org/oclc/29283612\">Ohr Meir</a></em> calculated that 3 small\r\n\t * stars are visible, which is later than the required 3 medium stars. See the {@link #ZENITH_8_POINT_5} constant.\r\n\t * \r\n\t * @see #ZENITH_8_POINT_5\r\n\t * \r\n\t * @return The <code>Date</code> of nightfall. If the calculation can't be computed such as northern and southern\r\n\t *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n\t *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n\t *         top of the {@link AstronomicalCalendar} documentation.\r\n\t * @see #ZENITH_8_POINT_5\r\n\t * ComplexZmanimCalendar#getTzaisGeonim8Point5Degrees() that returns an identical time to this generic <em>tzais</em>\r\n\t */\r\n  public getTzais(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ZmanimCalendar.ZENITH_8_POINT_5);\r\n  }\r\n\r\n  /**\r\n\t * Returns <em>alos</em> (dawn) based on the time when the sun is {@link #ZENITH_16_POINT_1 16.1&deg;} below the\r\n\t * eastern {@link #GEOMETRIC_ZENITH geometric horizon} before {@link #getSunrise sunrise}. This is based on the\r\n\t * calculation that the time between dawn and sunrise (and sunset to nightfall) is 72 minutes, the time that is\r\n\t * takes to walk 4 <em>mil</em> at 18 minutes a mil (<em><a href=\"https://en.wikipedia.org/wiki/Maimonides\"\r\n\t * >Rambam</a></em> and others). The sun's position at 72 minutes before {@link #getSunrise sunrise} in Jerusalem\r\n\t * on the <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox /\r\n\t * equilux</a> is 16.1&deg; below {@link #GEOMETRIC_ZENITH}.\r\n\t * \r\n\t * @see #ZENITH_16_POINT_1\r\n\t * @see ComplexZmanimCalendar#getAlos16Point1Degrees()\r\n\t * \r\n\t * @return The <code>Date</code> of dawn. If the calculation can't be computed such as northern and southern\r\n\t *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n\t *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n\t *         top of the {@link AstronomicalCalendar} documentation.\r\n\t */\r\n  public getAlosHashachar(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ZmanimCalendar.ZENITH_16_POINT_1);\r\n  }\r\n\r\n  /**\r\n\t * Method to return <em>alos</em> (dawn) calculated using 72 minutes before {@link #getSunrise() sunrise} or\r\n\t * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting). This time\r\n\t * is based on the time to walk the distance of 4 <em>Mil</em> at 18 minutes a <em>Mil</em>. The 72 minute time (but\r\n\t * not the concept of fixed minutes) is based on the opinion that the time of the <em>Neshef</em> (twilight between\r\n\t * dawn and sunrise) does not vary by the time of year or location but depends on the time it takes to walk the\r\n\t * distance of 4 <em>Mil</em>.\r\n\t * \r\n\t * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n\t *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n\t *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n\t *         documentation.\r\n\t */\r\n  public getAlos72() {\r\n    return this.getElevationAdjustedSunrise()\r\n\t\t?.subtract({ minutes: 72 });\r\n  }\r\n\r\n  /**\r\n\t * This method returns <em>chatzos</em> (midday) following most opinions that <em>chatzos</em> is the midpoint\r\n\t * between {@link #getSeaLevelSunrise sea level sunrise} and {@link #getSeaLevelSunset sea level sunset}. A day\r\n\t * starting at <em>alos</em> and ending at <em>tzais</em> using the same time or degree offset will also return\r\n\t * the same time. The returned value is identical to {@link #getSunTransit()}. In reality due to lengthening or\r\n\t * shortening of day, this is not necessarily the exact midpoint of the day, but it is very close.\r\n\t * \r\n\t * @see AstronomicalCalendar#getSunTransit()\r\n\t * @return the <code>Date</code> of chatzos. If the calculation can't be computed such as in the Arctic Circle\r\n\t *         where there is at least one day where the sun does not rise, and one where it does not set, a null will\r\n\t *         be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n\t */\r\n  public getChatzos(): Temporal.ZonedDateTime | null {\r\n    return this.getSunTransit();\r\n  }\r\n\r\n  /**\r\n\t * A generic method for calculating the latest <em>zman krias shema</em> (time to recite shema in the morning)\r\n\t * that is 3 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and\r\n\t * end of the day passed to this method.\r\n\t * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours),\r\n\t * and the latest <em>zman krias shema</em> is calculated as 3 of those <em>shaos zmaniyos</em> after the beginning of\r\n\t * the day. As an example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise()\r\n\t * sea level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()}\r\n\t * elevation setting) to this method will return <em>sof zman krias shema</em> according to the opinion of the\r\n\t * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n\t * \r\n\t * @param startOfDay\r\n\t *            the start of day for calculating <em>zman krias shema</em>. This can be sunrise or any <em>alos</em> passed\r\n\t *            to this method.\r\n\t * @param endOfDay\r\n\t *            the end of day for calculating <em>zman krias shema</em>. This can be sunset or any <em>tzais</em> passed to\r\n\t *            this method.\r\n\t * @return the <code>Date</code> of the latest <em>zman shema</em> based on the start and end of day times passed to this\r\n\t *         method. If the calculation can't be computed such as in the Arctic Circle where there is at least one day\r\n\t *         a year where the sun does not rise, and one where it does not set, a null will be returned. See detailed\r\n\t *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n\t */\r\n  public getSofZmanShma(startOfDay: Temporal.ZonedDateTime | null, endOfDay: Temporal.ZonedDateTime | null): Temporal.ZonedDateTime | null {\r\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 3);\r\n  }\r\n\r\n  /**\r\n\t * This method returns the latest <em>zman krias shema</em> (time to recite shema in the morning) that is 3 *\r\n\t * {@link #getShaahZmanisGra() <em>shaos zmaniyos</em>} (solar hours) after {@link #getSunrise() sunrise} or\r\n\t * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\r\n\t * to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. \r\n\t *  The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n\t *  sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n\t *  setting).\r\n\t * \r\n\t * @see #getSofZmanShma(Date, Date)\r\n\t * @see #getShaahZmanisGra()\r\n\t * @see #isUseElevation()\r\n\t * @see ComplexZmanimCalendar#getSofZmanShmaBaalHatanya()\r\n\t * @return the <code>Date</code> of the latest <em>zman shema</em> according to the GRA. If the calculation can't be\r\n\t *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n\t *         and one where it does not set, a null will be returned. See the detailed explanation on top of the {@link\r\n\t *         AstronomicalCalendar} documentation.\r\n\t */\r\n  public getSofZmanShmaGRA(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset());\r\n  }\r\n\r\n  /**\r\n\t * This method returns the latest <em>zman krias shema</em> (time to recite shema in the morning) that is 3 *\r\n\t * {@link #getShaahZmanisMGA() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos72()}, according to the\r\n\t * <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a>. The day is calculated\r\n\t * from 72 minutes before {@link #getSeaLevelSunrise() sea level sunrise} to 72 minutes after {@link\r\n\t * #getSeaLevelSunrise sea level sunset} or from 72 minutes before {@link #getSunrise() sunrise} to {@link #getSunset()\r\n\t * sunset} (depending on the {@link #isUseElevation()} setting).\r\n\t * \r\n\t * @return the <code>Date</code> of the latest <em>zman shema</em>. If the calculation can't be computed such as in\r\n\t *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n\t *         does not set, a null will be returned. See detailed explanation on top of the\r\n\t *         {@link AstronomicalCalendar} documentation.\r\n\t * @see #getSofZmanShma(Date, Date)\r\n\t * @see ComplexZmanimCalendar#getShaahZmanis72Minutes()\r\n\t * @see ComplexZmanimCalendar#getAlos72()\r\n\t * @see ComplexZmanimCalendar#getSofZmanShmaMGA72Minutes() that \r\n\t */\r\n  public getSofZmanShmaMGA(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos72()!, this.getTzais72()!);\r\n  }\r\n\r\n  /**\r\n\t * This method returns the <em>tzais</em> (nightfall) based on the opinion of <em>Rabbeinu Tam</em> that\r\n\t * <em>tzais hakochavim</em> is calculated as 72 minutes, the time it takes to walk 4 <em>Mil</em> at 18 minutes\r\n\t * a <em>Mil</em>. According to the <a href=\"https://en.wikipedia.org/wiki/Samuel_Loew\">Machtzis Hashekel</a> in\r\n\t * Orach Chaim 235:3, the <a href=\"https://en.wikipedia.org/wiki/Joseph_ben_Meir_Teomim\">Pri Megadim</a> in Orach\r\n\t * Chaim 261:2 (see the Biur Halacha) and others (see Hazmanim Bahalacha 17:3 and 17:5) the 72 minutes are standard\r\n\t * clock minutes any time of the year in any location. Depending on the {@link #isUseElevation()} setting) a 72\r\n\t * minute offset from  either {@link #getSunset() sunset} or {@link #getSeaLevelSunset() sea level sunset} is used.\r\n\t * \r\n\t * @see ComplexZmanimCalendar#getTzais16Point1Degrees()\r\n\t * @return the <code>Date</code> representing 72 minutes after sunset. If the calculation can't be\r\n\t *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n\t *         and one where it does not set, a null will be returned See detailed explanation on top of the\r\n\t *         {@link AstronomicalCalendar} documentation.\r\n\t */\r\n  public getTzais72() {\r\n    return this.getElevationAdjustedSunset()?.add({ minutes: 72 })\r\n  }\r\n\r\n  /**\r\n\t * A method to return candle lighting time, calculated as {@link #getCandleLightingOffset()} minutes before\r\n\t * {@link #getSeaLevelSunset() sea level sunset}. This will return the time for any day of the week, since it can be\r\n\t * used to calculate candle lighting time for <em>Yom Tov</em> (mid-week holidays) as well. Elevation adjustments\r\n\t * are intentionally not performed by this method, but you can calculate it by passing the elevation adjusted sunset\r\n\t * to {@link #getTimeOffset(Date, long)}.\r\n\t * \r\n\t * @return candle lighting time. If the calculation can't be computed such as in the Arctic Circle where there is at\r\n\t *         least one day a year where the sun does not rise, and one where it does not set, a null will be returned.\r\n\t *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n\t * \r\n\t * @see #getSeaLevelSunset()\r\n\t * @see #getCandleLightingOffset()\r\n\t * @see #setCandleLightingOffset(double)\r\n\t */\r\n  public getCandleLighting() {\r\n    return this.getSeaLevelSunset()?.subtract({ minutes: this.getCandleLightingOffset() });\r\n  }\r\n\r\n  /**\r\n\t * A generic method for calculating the latest <em>zman tfilah</em> (time to recite the morning prayers)\r\n\t * that is 4 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and\r\n\t * end of the day passed to this method.\r\n\t * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours),\r\n\t * and <em>sof zman tfila</em> is calculated as 4 of those <em>shaos zmaniyos</em> after the beginning of the day.\r\n\t * As an example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise()\r\n\t * sea level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()}\r\n\t * elevation setting) to this method will return <em>zman tfilah</em> according to the opinion of the <em><a href=\r\n\t * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n\t * \r\n\t * @param startOfDay\r\n\t *            the start of day for calculating <em>zman tfilah</em>. This can be sunrise or any <em>alos</em> passed\r\n\t *            to this method.\r\n\t * @param endOfDay\r\n\t *            the end of day for calculating <em>zman tfilah</em>. This can be sunset or any <em>tzais</em> passed\r\n\t *            to this method.\r\n\t * @return the <code>Date</code> of the latest <em>zman tfilah</em> based on the start and end of day times passed\r\n\t *         to this method. If the calculation can't be computed such as in the Arctic Circle where there is at least\r\n\t *         one day a year where the sun does not rise, and one where it does not set, a null will be returned. See\r\n\t *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n\t */\r\n  public getSofZmanTfila(startOfDay: Temporal.ZonedDateTime | null, endOfDay: Temporal.ZonedDateTime | null): Temporal.ZonedDateTime | null {\r\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 4);\r\n  }\r\n\r\n  /**\r\n\t * This method returns the latest <em>zman tfila</em> (time to recite shema in the morning) that is 4 *\r\n\t * {@link #getShaahZmanisGra() <em>shaos zmaniyos</em> }(solar hours) after {@link #getSunrise() sunrise} or\r\n\t * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting), according\r\n\t * to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. \r\n\t * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n\t * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n\t * setting).\r\n\t * \r\n\t * @see #getSofZmanTfila(Date, Date)\r\n\t * @see #getShaahZmanisGra()\r\n\t * @see ComplexZmanimCalendar#getSofZmanTfilaBaalHatanya()\r\n\t * @return the <code>Date</code> of the latest <em>zman tfilah</em>. If the calculation can't be computed such as in\r\n\t *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n\t *         does not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n\t *         documentation.\r\n\t */\r\n  public getSofZmanTfilaGRA(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset());\r\n  }\r\n\r\n  /**\r\n\t * This method returns the latest <em>zman tfila</em> (time to recite shema in the morning) that is 4 *\r\n\t * {@link #getShaahZmanisMGA() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos72()}, according to the\r\n\t * <em><a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em>. The day is calculated\r\n\t * from 72 minutes before {@link #getSeaLevelSunrise() sea level sunrise} to 72 minutes after {@link\r\n\t * #getSeaLevelSunrise sea level sunset} or from 72 minutes before {@link #getSunrise() sunrise} to {@link #getSunset()\r\n\t * sunset} (depending on the {@link #isUseElevation()} setting).\r\n\t * \r\n\t * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\r\n\t *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n\t *         does not set), a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n\t *         documentation.\r\n\t * @see #getSofZmanTfila(Date, Date)\r\n\t * @see #getShaahZmanisMGA()\r\n\t * @see #getAlos72()\r\n\t */\r\n  public getSofZmanTfilaMGA(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos72()!, this.getTzais72()!);\r\n  }\r\n\r\n  /**\r\n\t * A generic method for calculating the latest <em>mincha gedola</em> (the earliest time to recite the mincha  prayers)\r\n\t * that is 6.5 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and end\r\n\t * of the day passed to this method.\r\n\t * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\r\n\t * <em>mincha gedola</em> is calculated as 6.5 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\r\n\t * example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise() sea level\r\n  * sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\r\n  * setting) to this method will return <em>mincha gedola</em> according to the opinion of the\r\n  * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n  * \r\n  * @param startOfDay\r\n  *            the start of day for calculating <em>Mincha gedola</em>. This can be sunrise or any <em>alos</em> passed\r\n  *            to this method.\r\n  * @param endOfDay\r\n  *            the end of day for calculating <em>Mincha gedola</em>. This can be sunset or any <em>tzais</em> passed\r\n  *            to this method.\r\n  * @return the <code>Date</code> of the time of <em>Mincha gedola</em> based on the start and end of day times\r\n  *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\r\n  *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n  *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n  */\r\n  public getMinchaGedola(startOfDay: Temporal.ZonedDateTime | null = this.getElevationAdjustedSunrise(), endOfDay: Temporal.ZonedDateTime | null = this.getElevationAdjustedSunset()): Temporal.ZonedDateTime | null {\r\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 6.5);\r\n  }\r\n\r\n  /**\r\n\t * A generic method for calculating <em>samuch lemincha ketana</em>, / near <em>mincha ketana</em> time that is half\r\n\t * an hour before {@link #getMinchaKetana(Date, Date)}  or 9 * <em>shaos zmaniyos</em> (temporal hours) after the\r\n\t * start of the day, calculated using the start and end of the day passed to this method.\r\n\t * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\r\n\t * <em>samuch lemincha ketana</em> is calculated as 9 of those <em>shaos zmaniyos</em> after the beginning of the day.\r\n\t * For example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise() sea\r\n\t * level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\r\n\t * setting) to this method will return <em>samuch lemincha ketana</em> according to the opinion of the\r\n\t * <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>.\r\n\t * \r\n\t * @param startOfDay\r\n\t *            the start of day for calculating <em>samuch lemincha ketana</em>. This can be sunrise or any <em>alos</em>\r\n\t *            passed to to this method.\r\n\t * @param endOfDay\r\n\t *            the end of day for calculating <em>samuch lemincha ketana</em>. This can be sunset or any <em>tzais</em>\r\n\t *            passed to this method.\r\n\t * @return the <code>Date</code> of the time of <em>Mincha ketana</em> based on the start and end of day times\r\n\t *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\r\n\t *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n\t *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n\t *\r\n\t * @see ComplexZmanimCalendar#getSamuchLeMinchaKetanaGRA()\r\n\t * @see ComplexZmanimCalendar#getSamuchLeMinchaKetana16Point1Degrees()\r\n\t * @see ComplexZmanimCalendar#getSamuchLeMinchaKetana72Minutes()\r\n\t */\r\n  public getSamuchLeMinchaKetana(startOfDay: Temporal.ZonedDateTime, endOfDay: Temporal.ZonedDateTime): Temporal.ZonedDateTime | null {\r\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 9);\r\n  }\r\n\r\n  /**\r\n   * A generic method for calculating <em>mincha ketana</em>, (the preferred time to recite the mincha prayers in\r\n   * the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a></em> and others) that is\r\n   * 9.5 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day, calculated using the start and end\r\n   * of the day passed to this method.\r\n   * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\r\n   * <em>mincha ketana</em> is calculated as 9.5 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\r\n   * example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise() sea level\r\n     * sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\r\n   * setting) to this method will return <em>mincha ketana</em> according to the opinion of the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n   *\r\n   * @param startOfDay\r\n   *            the start of day for calculating <em>Mincha ketana</em>. This can be sunrise or any alos passed to\r\n   *            this method.\r\n   * @param endOfDay\r\n   *            the end of day for calculating <em>Mincha ketana</em>. This can be sunrise or any alos passed to\r\n   *            this method.\r\n   * @return the <code>Date</code> of the time of <em>Mincha ketana</em> based on the start and end of day times\r\n   *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\r\n   *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getMinchaKetana(startOfDay: Temporal.ZonedDateTime | null = this.getElevationAdjustedSunrise(), endOfDay: Temporal.ZonedDateTime | null = this.getElevationAdjustedSunset()): Temporal.ZonedDateTime | null {\r\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 9.5);\r\n  }\r\n\r\n  /**\r\n   * A generic method for calculating <em>plag hamincha</em> (the earliest time that Shabbos can be started) that is\r\n   * 10.75 hours after the start of the day, (or 1.25 hours before the end of the day) based on the start and end of\r\n   * the day passed to the method.\r\n   * The time from the start of day to the end of day are divided into 12 <em>shaos zmaniyos</em> (temporal hours), and\r\n   * <em>plag hamincha</em> is calculated as 10.75 of those <em>shaos zmaniyos</em> after the beginning of the day. As an\r\n   * example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link #getSeaLevelSunrise() sea level\r\n     * sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation\r\n   * setting) to this method will return <em>plag mincha</em> according to the opinion of the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n   *\r\n   * @param startOfDay\r\n   *            the start of day for calculating plag. This can be sunrise or any alos passed to this method.\r\n   * @param endOfDay\r\n   *            the end of day for calculating plag. This can be sunrise or any alos passed to this method.\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em> based on the start and end of day times\r\n   *         passed to this method. If the calculation can't be computed such as in the Arctic Circle where there is\r\n   *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getPlagHamincha(startOfDay: Temporal.ZonedDateTime | null = this.getElevationAdjustedSunrise(), endOfDay: Temporal.ZonedDateTime | null = this.getElevationAdjustedSunset()): Temporal.ZonedDateTime | null {\r\n    return this.getShaahZmanisBasedZman(startOfDay, endOfDay, 10.75);\r\n  }\r\n\r\n  /**\r\n   * This method returns <em>plag hamincha</em>, that is 10.75 * <em>{@link #getShaahZmanisGra() shaos zmaniyos}</em>\r\n   * (solar hours) after {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on\r\n   * the {@link #isUseElevation()} setting), according to the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\"\r\n   * >GRA</a></em>. Plag hamincha is the earliest time that <em>Shabbos</em> can be started.\r\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n     * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}\r\n   *\r\n   * @see #getPlagHamincha(Date, Date)\r\n   * @see ComplexZmanimCalendar#getPlagHaminchaBaalHatanya()\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n\r\n  /*\r\n      public getPlagHamincha(): Date {\r\n          return this.getPlagHamincha(this.getSeaLevelSunrise(), this.getSeaLevelSunset());\r\n      }\r\n  */\r\n\r\n  /**\r\n   * A method that returns a <em>shaah zmanis</em> ({@link #getTemporalHour(Date, Date) temporal hour}) according to\r\n   * the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>. This calculation divides\r\n   * the day based on the opinion of the <em>GRA</em> that the day runs from from {@link #getSeaLevelSunrise() sea\r\n     * level sunrise} to {@link #getSeaLevelSunrise sea level sunset} or {@link #getSunrise() sunrise} to\r\n   * {@link #getSunset() sunset} (depending on the {@link #isUseElevation()} setting). The day is split into 12 equal\r\n   * parts with each one being a <em>shaah zmanis</em>. This method is similar to {@link #getTemporalHour}, but can\r\n   * account for elevation.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em> calculated from sunrise to sunset.\r\n   *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\r\n   *         where the sun does not rise, and one where it does not set, {@link Long#MIN_VALUE} will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getTemporalHour(Date, Date)\r\n   * @see #getSeaLevelSunrise()\r\n   * @see #getSeaLevelSunset()\r\n   * @see ComplexZmanimCalendar#getShaahZmanisBaalHatanya()\r\n   */\r\n  public getShaahZmanisGra() {\r\n    return this.getTemporalHour(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset());\r\n  }\r\n\r\n  /**\r\n   * A method that returns a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <em><a href=\r\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a></em> based on a 72 minutes <em>alos</em>\r\n   * and <em>tzais</em>. This calculation divides the day that runs from dawn to dusk (for sof zman krias shema and tfila).\r\n   * Dawn for this calculation is 72 minutes before {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level\r\n     * sunrise} (depending on the {@link #isUseElevation()} elevation setting) and dusk is 72 minutes after {@link #getSunset\r\n     * sunset} or {@link #getSeaLevelSunset() sea level sunset} (depending on the {@link #isUseElevation()} elevation setting).\r\n   * This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. Alternate methods of calculating a\r\n   * <em>shaah zmanis</em> according to the Magen Avraham (MGA) are available in the subclass {@link ComplexZmanimCalendar}.\r\n   *\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getShaahZmanisMGA() {\r\n    return this.getTemporalHour(this.getAlos72(), this.getTzais72());\r\n  }\r\n\r\n  /**\r\n   * Default constructor will set a default {@link GeoLocation#GeoLocation()}, a default\r\n   * {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} and default the calendar to the current date.\r\n   *\r\n   * @see AstronomicalCalendar#AstronomicalCalendar()\r\n   */\r\n\r\n  /*\r\n      public ZmanimCalendar() {\r\n          super();\r\n      }\r\n  */\r\n\r\n  /**\r\n   * A constructor that takes a {@link GeoLocation} as a parameter.\r\n   *\r\n   * @param location\r\n   *            the location\r\n   */\r\n\r\n  /*\r\n  constructor(location?: GeoLocation) {\r\n    super(location);\r\n  }\r\n  */\r\n\r\n  /**\r\n   * A method to get the offset in minutes before {@link AstronomicalCalendar#getSeaLevelSunset() sea level sunset} which\r\n   * is used in calculating candle lighting time. The default time used is 18 minutes before sea level sunset. Some\r\n   * calendars use 15 minutes, while the custom in Jerusalem is to use a 40 minute offset. Please check the local custom\r\n   * for candle lighting time.\r\n   *\r\n   * @return Returns the currently set candle lighting offset in minutes.\r\n   * @see #getCandleLighting()\r\n   * @see #setCandleLightingOffset(double)\r\n   */\r\n  public getCandleLightingOffset(): number {\r\n    return this.candleLightingOffset;\r\n  }\r\n\r\n  /**\r\n   * A method to set the offset in minutes before {@link AstronomicalCalendar#getSeaLevelSunset() sea level sunset} that is\r\n   * used in calculating candle lighting time. The default time used is 18 minutes before sunset. Some calendars use 15\r\n   * minutes, while the custom in Jerusalem is to use a 40 minute offset.\r\n   *\r\n   * @param candleLightingOffset\r\n   *            The candle lighting offset to set in minutes.\r\n   * @see #getCandleLighting()\r\n   * @see #getCandleLightingOffset()\r\n   */\r\n  public setCandleLightingOffset(candleLightingOffset: number): void {\r\n    this.candleLightingOffset = candleLightingOffset;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public getClassName() {\r\n    return 'com.kosherjava.zmanim.ZmanimCalendar';\r\n  }\r\n\r\n  /**\r\n   * This is a utility method to determine if the current Date (date-time) passed in has a <em>melacha</em> (work) prohibition.\r\n   * Since there are many opinions on the time of <em>tzais</em>, the <em>tzais</em> for the current day has to be passed to this\r\n   * class. Sunset is the classes current day's {@link #getElevationAdjustedSunset() elevation adjusted sunset} that observes the\r\n   * {@link #isUseElevation()} settings. The {@link JewishCalendar#getInIsrael()} will be set by the inIsrael parameter.\r\n   *\r\n   * @param currentTime the current time\r\n   * @param tzais the time of tzais\r\n   * @param inIsrael whether to use Israel holiday scheme or not\r\n   *\r\n   * @return true if <em>melacha</em> is prohibited or false if it is not.\r\n   *\r\n   * @see JewishCalendar#isAssurBemelacha()\r\n   * @see JewishCalendar#hasCandleLighting()\r\n   * @see JewishCalendar#setInIsrael(boolean)\r\n   */\r\n  public isAssurBemlacha(currentTime: Temporal.ZonedDateTime, tzais: Temporal.ZonedDateTime, inIsrael: boolean): boolean {\r\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\r\n    const date = this.getDate();\r\n    jewishCalendar.setGregorianDate(date.year, date.month - 1, date.day);\r\n    jewishCalendar.setInIsrael(inIsrael);\r\n\r\n    // erev shabbos, YT or YT sheni and after shkiah\r\n    const sunset = this.getElevationAdjustedSunset();\r\n    if (!sunset) throw new NullPointerException();\r\n    if (jewishCalendar.hasCandleLighting() && currentTime >= sunset) {\r\n      return true;\r\n    }\r\n\r\n    // is shabbos or YT and it is before tzais\r\n    return jewishCalendar.isAssurBemelacha() && currentTime <= tzais;\r\n  }\r\n\r\n  /**\r\n   * A generic utility method for calculating any <em>shaah zmanis</em> (temporal hour) based <em>zman</em> with the\r\n   * day defined as the start and end of day (or night) and the number of <em>shaahos zmaniyos</em> passed to the\r\n   * method. This simplifies the code in other methods such as {@link #getPlagHamincha(Date, Date)} and cuts down on\r\n   * code replication. As an example, passing {@link #getSunrise() sunrise} and {@link #getSunset sunset} or {@link\r\n    * #getSeaLevelSunrise() sea level sunrise} and {@link #getSeaLevelSunset() sea level sunset} (depending on the\r\n   * {@link #isUseElevation()} elevation setting) and 10.75 hours to this method will return <em>plag mincha</em>\r\n   * according to the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a></em>.\r\n   *\r\n   * @param startOfDay\r\n   *            the start of day for calculating the <em>zman</em>. This can be sunrise or any <em>alos</em> passed\r\n   *            to this method.\r\n   * @param endOfDay\r\n   *            the end of day for calculating the <em>zman</em>. This can be sunrise or any <em>alos</em> passed to\r\n   *            this method.\r\n   * @param hours\r\n   *            the number of <em>shaahos zmaniyos</em> (temporal hours) to offset from the start of day\r\n   * @return the <code>Date</code> of the time of <em>zman</em> with the <em>shaahos zmaniyos</em> (temporal hours)\r\n   *         in the day offset from the start of day passed to this method. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a null will be  returned. See detailed explanation on top of the {@link\r\n    *         AstronomicalCalendar} documentation.\r\n   */\r\n  public getShaahZmanisBasedZman(startOfDay: Temporal.ZonedDateTime | null, endOfDay: Temporal.ZonedDateTime | null, hours: number): Temporal.ZonedDateTime | null {\r\n    const shaahZmanis = this.getTemporalHour(startOfDay, endOfDay)!;\r\n\r\n\tlet builtTime = startOfDay!;\r\n\tfor (let index = 0; index < hours; index++) {\r\n\t\tbuiltTime = builtTime.add(shaahZmanis)\r\n\t}\r\n    return builtTime\r\n  }\r\n\r\n  /**\r\n\t * A utility method that returns the percentage of a <em>shaah zmanis</em> after sunset (or before sunrise) for a given degree\r\n\t * offset. For the <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">equilux</a> where there\r\n\t * is a 720-minute day, passing 16.1&deg; for the location of Jerusalem will return about 1.2. This will work for any location\r\n\t * or date, but will typically only be of interest at the equinox/equilux to calculate the percentage of a <em>shaah zmanis</em>\r\n\t * for those who want to use the <a href=\"https://en.wikipedia.org/wiki/Abraham_Cohen_Pimentel\">Minchas Cohen</a> in Ma'amar 2:4\r\n\t * and the <a href=\"https://en.wikipedia.org/wiki/Hezekiah_da_Silva\">Pri Chadash</a> who calculate <em>tzais</em> as a percentage\r\n\t * of the day after sunset. While the Minchas Cohen only applies this to 72 minutes or a 1/10 of the day around the world (based\r\n\t * on the equinox / equilux in Israel), this method allows calculations for any degrees level for any location.\r\n\t * \r\n\t * @param degrees\r\n\t *            the number of degrees below the horizon after sunset.\r\n\t * @param sunset\r\n\t *            if <code>true</code> the calculation should be degrees after sunset, or if <code>false</code>, degrees before sunrise.\r\n\t * @return the <code>double</code> percentage of a <em>sha'ah zmanis</em> for a given set of degrees below the astronomical horizon\r\n\t *         for the current calendar.  If the calculation can't be computed a {@link Double#MIN_VALUE} will be returned. See detailed\r\n\t *         explanation on top of the page.\r\n\t */\r\n\tpublic getPercentOfShaahZmanisFromDegrees(degrees:number, sunset: boolean):number|null {\r\n\t\tconst seaLevelSunrise: Temporal.ZonedDateTime | null = this.getSeaLevelSunrise();\r\n\t\tconst seaLevelSunset: Temporal.ZonedDateTime | null = this.getSeaLevelSunset();\r\n\t\tlet twilight: Temporal.ZonedDateTime | null = null;\r\n\t\tif (sunset) {\r\n\t\t\ttwilight = this.getSunsetOffsetByDegrees(ZmanimCalendar.GEOMETRIC_ZENITH + degrees);\r\n\t\t} else {\r\n\t\t\ttwilight = this.getSunriseOffsetByDegrees(ZmanimCalendar.GEOMETRIC_ZENITH + degrees);\r\n\t\t}\r\n\t\tif (seaLevelSunrise == null || seaLevelSunset == null || twilight == null) {\r\n\t\t\treturn Long_MIN_VALUE;\r\n\t\t}\r\n\t\tconst shaahZmanis = seaLevelSunset.until(seaLevelSunrise).total({ unit: 'milliseconds' }) / 12.0;\r\n\t\tlet riseSetToTwilight;\r\n\t\tif (sunset) {\r\n\t\t\triseSetToTwilight = twilight.until(seaLevelSunset).total({ unit: 'milliseconds' });\r\n\t\t} else {\r\n\t\t\triseSetToTwilight = seaLevelSunrise.until(twilight).total({ unit: 'milliseconds' });\r\n\t\t}\r\n\t\treturn riseSetToTwilight / shaahZmanis;\r\n\t}\r\n}\r\n","import { Temporal } from 'temporal-polyfill'\r\n\r\nimport { Calendar, Long_MIN_VALUE, TimeZone } from './polyfills/Utils';\r\nimport { GeoLocation } from './util/GeoLocation';\r\nimport { ZmanimCalendar } from './ZmanimCalendar';\r\nimport { JewishCalendar } from './hebrewcalendar/JewishCalendar';\r\n\r\n/**\r\n * <p>This class extends ZmanimCalendar and provides many more <em>zmanim</em> than available in the ZmanimCalendar. The basis\r\n * for most <em>zmanim</em> in this class are from the <em>sefer</em> <b><a href=\"https://hebrewbooks.org/9765\">Yisroel\r\n * Vehazmanim</a></b> by <b><a href=\"https://en.wikipedia.org/wiki/Yisroel_Dovid_Harfenes\">Rabbi Yisrael Dovid Harfenes</a></b>.\r\n * As an example of the number of different <em>zmanim</em> made available by this class, there are methods to return 18\r\n * different calculations for <em>alos</em> (dawn), 18 for <em>plag hamincha</em> and 29 for <em>tzais</em> available in this\r\n * API. The real power of this API is the ease in calculating <em>zmanim</em> that are not part of the library. The methods for\r\n * <em>zmanim</em> calculations not present in this class or it's superclass  {@link ZmanimCalendar} are contained in the\r\n * {@link AstronomicalCalendar}, the base class of the calendars in our API since they are generic methods for calculating\r\n * time based on degrees or time before or after {@link #getSunrise sunrise} and {@link #getSunset sunset} and are of interest\r\n * for calculation beyond <em>zmanim</em> calculations. Here are some examples.\r\n * <p>First create the Calendar for the location you would like to calculate:\r\n * \r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * String locationName = &quot;Lakewood, NJ&quot;;\r\n * double latitude = 40.0828; // Lakewood, NJ\r\n * double longitude = -74.2094; // Lakewood, NJ\r\n * double elevation = 20; // optional elevation correction in Meters\r\n * // the String parameter in getTimeZone() has to be a valid timezone listed in\r\n * // {@link java.util.TimeZone#getAvailableIDs()}\r\n * TimeZone timeZone = TimeZone.getTimeZone(&quot;America/New_York&quot;);\r\n * GeoLocation location = new GeoLocation(locationName, latitude, longitude, elevation, timeZone);\r\n * ComplexZmanimCalendar czc = new ComplexZmanimCalendar(location);\r\n * // Optionally set the date or it will default to today's date\r\n * czc.getCalendar().set(Calendar.MONTH, Calendar.FEBRUARY);\r\n * czc.getCalendar().set(Calendar.DAY_OF_MONTH, 8);</pre>\r\n * <p>\r\n * <b>Note:</b> For locations such as Israel where the beginning and end of daylight savings time can fluctuate from\r\n * year to year, if your version of Java does not have an <a href=\r\n * \"https://www.oracle.com/java/technologies/tzdata-versions.html\">up to date timezone database</a>, create a\r\n * {@link java.util.SimpleTimeZone} with the known start and end of DST.\r\n * To get <em>alos</em> calculated as 14&deg; below the horizon (as calculated in the calendars published in Montreal),\r\n * add {@link AstronomicalCalendar#GEOMETRIC_ZENITH} (90) to the 14&deg; offset to get the desired time:\r\n * <br><br>\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n *  Date alos14 = czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 14);</pre>\r\n * <p>\r\n * To get <em>mincha gedola</em> calculated based on the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\"\r\n * >Magen Avraham (MGA)</a> using a <em>shaah zmanis</em> based on the day starting\r\n * 16.1&deg; below the horizon (and ending 16.1&deg; after sunset) the following calculation can be used:\r\n * \r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date minchaGedola = czc.getTimeOffset(czc.getAlos16point1Degrees(), czc.getShaahZmanis16Point1Degrees() * 6.5);</pre>\r\n * <p>\r\n * or even simpler using the included convenience methods\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date minchaGedola = czc.getMinchaGedola(czc.getAlos16point1Degrees(), czc.getShaahZmanis16Point1Degrees());</pre>\r\n * <p>\r\n * A little more complex example would be calculating <em>zmanim</em> that rely on a <em>shaah zmanis</em> that is\r\n * not present in this library. While a drop more complex, it is still rather easy. An example would be to calculate\r\n * the <a href=\"https://en.wikipedia.org/wiki/Israel_Isserlein\">Trumas Hadeshen</a>'s <em>alos</em> to\r\n * <em>tzais</em> based <em>plag hamincha</em> as calculated in the Machzikei Hadass calendar in Manchester, England.\r\n * A number of this calendar's <em>zmanim</em> are calculated based on a day starting at <em>alos</em> of 12&deg; before\r\n * sunrise and ending at <em>tzais</em> of 7.083&deg; after sunset. Be aware that since the <em>alos</em> and <em>tzais</em>\r\n * do not use identical degree-based offsets, this leads to <em>chatzos</em> being at a time other than the\r\n * {@link #getSunTransit() solar transit} (solar midday). To calculate this <em>zman</em>, use the following steps. Note\r\n * that <em>plag hamincha</em> is 10.75 hours after the start of the day, and the following steps are all that it takes.\r\n * <br>\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date plag = czc.getPlagHamincha(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\r\n * \t\t\t\tczc.getSunsetOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + ZENITH_7_POINT_083));</pre>\r\n * <p>\r\n * Something a drop more challenging, but still simple, would be calculating a <em>zman</em> using the same \"complex\"\r\n * offset day used in the above mentioned Manchester calendar, but for a <em>shaos zmaniyos</em> based <em>zman</em> not\r\n * supported by this library, such as calculating the point that one should be <em>makpid</em>\r\n * not to eat on <em>erev Shabbos</em> or <em>erev Yom Tov</em>. This is 9 <em>shaos zmaniyos</em> into the day.\r\n * <ol>\r\n * \t<li>Calculate the <em>shaah zmanis</em> in milliseconds for this day</li>\r\n * \t<li>Add 9 of these <em>shaos zmaniyos</em> to <em>alos</em> starting at 12&deg;</li>\r\n * </ol>\r\n * <br>\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * long shaahZmanis = czc.getTemporalHour(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\r\n * \t\t\t\t\t\tczc.getSunsetOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + ZENITH_7_POINT_083));\r\n * Date sofZmanAchila = getTimeOffset(czc.getSunriseOffsetByDegrees({@link AstronomicalCalendar#GEOMETRIC_ZENITH} + 12),\r\n * \t\t\t\t\tshaahZmanis * 9);</pre>\r\n * <p>\r\n * Calculating this <em>sof zman achila</em> according to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>\r\n * is simplicity itself.\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * Date sofZamnAchila = czc.getTimeOffset(czc.getSunrise(), czc.getShaahZmanisGra() * 9);</pre>\r\n * \r\n * <h2>Documentation from the {@link ZmanimCalendar} parent class</h2>\r\n * {@inheritDoc}\r\n * \r\n * @author &copy; Eliyahu Hershfeld 2004 - 2023\r\n */\r\nexport class ComplexZmanimCalendar extends ZmanimCalendar {\r\n  /**\r\n   * The zenith of 3.7&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> that <em>tzais</em> is the\r\n   * time it takes to walk 3/4 of a <em>Mil</em> at 18 minutes a <em>Mil</em>, or 13.5 minutes after sunset. The sun\r\n   * is 3.7&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} at this time in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>.\r\n   * \r\n   * @see #getTzaisGeonim3Point7Degrees()\r\n   */\r\n  protected static readonly ZENITH_3_POINT_7: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.7;\r\n\r\n  /**\r\n   * The zenith of 3.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> that <em>tzais</em> is the\r\n   * time it takes to walk 3/4 of a <em>Mil</em> at 18 minutes a <em>Mil</em>, or 13.5 minutes after sunset. The sun\r\n   * is 3.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} at this time in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>.\r\n   * \r\n   * @see #getTzaisGeonim3Point8Degrees()\r\n   */\r\n  protected static readonly ZENITH_3_POINT_8: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.8;\r\n\r\n  /**\r\n   * The zenith of 5.95&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n   * the sun 24 minutes after sunset in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\r\n   * which calculates to 5.95&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @see #getTzaisGeonim5Point95Degrees()\r\n   */\r\n  protected static readonly ZENITH_5_POINT_95: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 5.95;\r\n\r\n  /**\r\n   * The zenith of 7.083&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This is often referred to as\r\n   * 7&deg;5' or 7&deg; and 5 minutes. This calculation is used for calculating <em>alos</em> (dawn) and\r\n   * <em>tzais</em> (nightfall) according to some opinions. This calculation is based on observation of 3 medium sized\r\n   * stars by Dr. Baruch Cohen in his calendar published in in 1899 in Strasbourg, France. This calculates to\r\n   * 7.0833333&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. The <a href=\"https://hebrewbooks.org/1053\">Sh\"Ut\r\n   * Melamed Leho'il</a> in Orach Chaim 30 agreed to this <em>zman</em>, as did the Sh\"Ut Bnei Tziyon, Tenuvas Sadeh and\r\n   * it is very close to the time of the <a href=\"https://hebrewbooks.org/22044\">Mekor Chesed</a> of the Sefer chasidim.\r\n   * It is close to the position of the sun 30 minutes after sunset in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, but not\r\n   * Exactly. The actual position of the sun 30 minutes after sunset in Jerusalem at the equilux is 7.205&deg; and\r\n   * 7.199&deg; at the equinox. See Hazmanim Bahalacha vol 2, pages 520-521 for details.\r\n   * @todo Hyperlink the proper sources.\r\n   * \r\n   * @see #getTzaisGeonim7Point083Degrees()\r\n   * @see #getBainHashmashosRT13Point5MinutesBefore7Point083Degrees()\r\n   */\r\n  protected static readonly ZENITH_7_POINT_083: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7 + (5 / 60);\r\n\r\n  /**\r\n   * The zenith of 10.2&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\r\n   * 45 minutes before {@link #getSunrise sunrise} in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> which\r\n   * calculates to 10.2&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @see #getMisheyakir10Point2Degrees()\r\n   */\r\n  protected static readonly ZENITH_10_POINT_2: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 10.2;\r\n\r\n  /**\r\n   * The zenith of 11&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\r\n   * 48 minutes before {@link #getSunrise sunrise} in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\r\n   * calculates to 11&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @see #getMisheyakir11Degrees()\r\n   */\r\n  protected static readonly ZENITH_11_DEGREES: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 11;\r\n\r\n  /**\r\n   * The zenith of 11.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun\r\n   * 52 minutes before {@link #getSunrise sunrise} in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\r\n   * calculates to 11.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @see #getMisheyakir11Point5Degrees()\r\n   */\r\n  protected static readonly ZENITH_11_POINT_5: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 11.5;\r\n\r\n  /**\r\n   * The zenith of 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating Rabbeinu Tam's <em>bain hashmashos</em> according to some opinions.\r\n   * NOTE: See comments on {@link #getBainHashmashosRT13Point24Degrees} for additional details about the degrees.\r\n   * \r\n   * @see #getBainHashmashosRT13Point24Degrees\r\n   * \r\n   */\r\n  protected static readonly ZENITH_13_POINT_24: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 13.24;\r\n\r\n  /**\r\n   * The zenith of 19&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>alos</em> according to some opinions.\r\n   * \r\n   * @see #getAlos19Degrees()\r\n   * @see #ZENITH_19_POINT_8\r\n   */\r\n  protected static readonly ZENITH_19_DEGREES: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 19;\r\n\r\n  /**\r\n   * The zenith of 19.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions. This calculation is\r\n   * based on the position of the sun 90 minutes after sunset in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> which\r\n   * calculates to 19.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @see #getTzais19Point8Degrees()\r\n   * @see #getAlos19Point8Degrees()\r\n   * @see #getAlos90()\r\n   * @see #getTzais90()\r\n   * @see #ZENITH_19_DEGREES\r\n   */\r\n  protected static readonly ZENITH_19_POINT_8: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 19.8;\r\n\r\n  /**\r\n   * The zenith of 26&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions. This calculation is\r\n   * based on the position of the sun {@link #getAlos120() 120 minutes} after sunset in Jerusalem o<a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> which\r\n   * calculates to 26&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. Since the level of darkness when the sun is\r\n   * 26&deg; and at a point when the level of darkness is long past the 18&deg; point where the darkest point is reached,\r\n   * it should only be used <em>lechumra</em> such as delaying the start of nighttime <em>mitzvos</em> or avoiding eating\r\n   * this early on a fast day.\r\n   * \r\n   * @see #getAlos26Degrees()\r\n   * @see #getTzais26Degrees()\r\n   * @see #getAlos120()\r\n   * @see #getTzais120()\r\n   */\r\n  protected static readonly ZENITH_26_DEGREES: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 26;\r\n\r\n  /**\r\n   * The zenith of 4.37&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n   * the sun {@link #getTzaisGeonim4Point37Degrees() 16 7/8 minutes} after sunset (3/4 of a 22.5-minute <em>Mil</em>)\r\n   * in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\r\n   * which calculates to 4.37&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @see #getTzaisGeonim4Point37Degrees()\r\n   */\r\n  protected static readonly ZENITH_4_POINT_37: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.37;\r\n\r\n  /**\r\n   * The zenith of 4.61&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n   * the sun {@link #getTzaisGeonim4Point37Degrees() 18 minutes} after sunset (3/4 of a 24-minute <em>Mil</em>) in\r\n   * Jerusalem <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox\r\n   * / equilux</a>, which calculates to 4.61&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * @todo add documentation links\r\n   * \r\n   * @see #getTzaisGeonim4Point61Degrees()\r\n   */\r\n  protected static readonly ZENITH_4_POINT_61: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.61;\r\n\r\n  /**\r\n   * The zenith of 4.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;).\r\n   * @todo Add more documentation.\r\n   * @see #getTzaisGeonim4Point8Degrees()\r\n   */\r\n  protected static readonly ZENITH_4_POINT_8: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 4.8;\r\n\r\n  /**\r\n   * The zenith of 3.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>tzais</em> (nightfall) according to some opinions. This calculation is based on the position of\r\n   * the sun {@link #getTzaisGeonim3Point65Degrees() 13.5 minutes} after sunset (3/4 of an 18-minute <em>Mil</em>)\r\n   * in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> which\r\n   * calculates to 3.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @see #getTzaisGeonim3Point65Degrees()\r\n   */\r\n  protected static readonly ZENITH_3_POINT_65: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.65;\r\n\r\n  /**\r\n   * The zenith of 3.676&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;).\r\n   * @todo Add more documentation.\r\n   */\r\n  protected static readonly ZENITH_3_POINT_676: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 3.676;\r\n\r\n  /**\r\n   * The zenith of 5.88&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;).\r\n   * @todo Add more documentation.\r\n   */\r\n  protected static readonly ZENITH_5_POINT_88: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 5.88;\r\n\r\n  /**\r\n   * The zenith of 1.583&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>netz amiti</em> (sunrise) and <em>shkiah amiti</em> (sunset) based on the opinion of the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>.\r\n   *\r\n   * @see #getSunriseBaalHatanya()\r\n   * @see #getSunsetBaalHatanya()\r\n   */\r\n  protected static readonly ZENITH_1_POINT_583: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 1.583;\r\n\r\n  /**\r\n   * The zenith of 16.9&deg; below geometric zenith (90&deg;). This calculation is used for determining <em>alos</em>\r\n   * (dawn) based on the opinion of the Baal Hatanya. It is based on the calculation that the time between dawn\r\n   * and <em>netz amiti</em> (sunrise) is 72 minutes, the time that is takes to walk 4 <em>mil</em> at 18 minutes\r\n   * a <em>mil</em> (<a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others). The sun's position at 72\r\n   * minutes before {@link #getSunriseBaalHatanya <em>netz amiti</em> (sunrise)} in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> is\r\n   * 16.9&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   *\r\n   * @see #getAlosBaalHatanya()\r\n   */\r\n  protected static readonly ZENITH_16_POINT_9: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 16.9;\r\n\r\n  /**\r\n   * The zenith of 16.9&deg; below geometric zenith (90&deg;). This calculation is used for determining <em>alos</em>\r\n   * (dawn) based on the opinion of the Baal Hatanya. It is based on the calculation that the time between dawn\r\n   * and <em>netz amiti</em> (sunrise) is 72 minutes, the time that is takes to walk 4 <em>mil</em> at 18 minutes\r\n   * a <em>mil</em> (<a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others). The sun's position at 72\r\n   * minutes before {@link #getSunriseBaalHatanya <em>netz amiti</em> (sunrise)} in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> is\r\n   * 16.9&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   *\r\n   * @see #getAlosBaalHatanya()\r\n   */\r\n  protected static readonly ZENITH_6_DEGREES: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 6;\r\n\r\n  /**\r\n   * The zenith of 6.45&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>tzais</em> (nightfall) according to some opinions. This is based on the calculations of <a href=\r\n   * \"https://en.wikipedia.org/wiki/Yechiel_Michel_Tucazinsky\">Rabbi Yechiel Michel Tucazinsky</a> of the position of\r\n   * the sun no later than {@link #getTzaisGeonim6Point45Degrees() 31 minutes} after sunset in Jerusalem, and at the\r\n   * height of the summer solstice, this <em>zman</em> is 28 minutes after <em>shkiah</em>. This computes to 6.45&deg;\r\n   * below {@link #GEOMETRIC_ZENITH geometric zenith}. This calculation is found in the <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=50536&st=&pgnum=51\">Birur Halacha Yoreh Deah 262</a> it the commonly\r\n   * used <em>zman</em> in Israel. It should be noted that this differs from the 6.1&deg;/6.2&deg; calculation for\r\n   * Rabbi Tucazinsky's time as calculated by the Hazmanim Bahalacha Vol II chapter 50:7 (page 515).\r\n   * \r\n   * @see #getTzaisGeonim6Point45Degrees()\r\n   */\r\n  protected static readonly ZENITH_6_POINT_45: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 6.45;\r\n\r\n  /**\r\n   * The zenith of 7.65&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>misheyakir</em> according to some opinions.\r\n   * \r\n   * @see #getMisheyakir7Point65Degrees()\r\n   */\r\n  protected static readonly ZENITH_7_POINT_65: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7.65;\r\n\r\n  /**\r\n   * The zenith of 7.67&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>tzais</em> according to some opinions.\r\n   * \r\n   * @see #getTzaisGeonim7Point67Degrees()\r\n   */\r\n  protected static readonly ZENITH_7_POINT_67: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 7.67;\r\n\r\n  /**\r\n   * The zenith of 9.3&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>tzais</em> (nightfall) according to some opinions.\r\n   * \r\n   * @see #getTzaisGeonim9Point3Degrees()\r\n   */\r\n  protected static readonly ZENITH_9_POINT_3: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.3;\r\n\r\n  /**\r\n   * The zenith of 9.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>misheyakir</em> according to some opinions.\r\n   * \r\n   * @see #getMisheyakir9Point5Degrees()\r\n   */\r\n  protected static readonly ZENITH_9_POINT_5: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.5;\r\n\r\n  /**\r\n   * The zenith of 9.75&deg; below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating <em>alos</em> (dawn) and <em>tzais</em> (nightfall) according to some opinions.\r\n   * \r\n   * @see #getTzaisGeonim9Point75Degrees()\r\n   */\r\n  protected static readonly ZENITH_9_POINT_75: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH + 9.75;\r\n\r\n  /**\r\n   * The zenith of 2.1&deg; above {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating the start of <em>bain hashmashos</em> (twilight) of 13.5 minutes before sunset converted to degrees\r\n   * according to the Yereim. As is traditional with degrees below the horizon, this is calculated without refraction\r\n   * and from the center of the sun. It would be 0.833&deg; less without this. \r\n   * \r\n   * @see #getBainHashmashosYereim2Point1Degrees()\r\n   */\r\n  protected static readonly ZENITH_MINUS_2_POINT_1: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH - 2.1;\r\n\r\n  /**\r\n   * The zenith of 2.8&deg; above {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating the start of <em>bain hashmashos</em> (twilight) of 16.875 minutes before sunset converted to degrees\r\n   * according to the Yereim. As is traditional with degrees below the horizon, this is calculated without refraction\r\n   * and from the center of the sun. It would be 0.833&deg; less without this.\r\n   * \r\n   * @see #getBainHashmashosYereim2Point8Degrees()\r\n   */\r\n  protected static readonly ZENITH_MINUS_2_POINT_8: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH - 2.8;\r\n\r\n  /**\r\n   * The zenith of 3.05&deg; above {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for\r\n   * calculating the start of <em>bain hashmashos</em> (twilight) of 18 minutes before sunset converted to degrees\r\n   * according to the Yereim. As is traditional with degrees below the horizon, this is calculated without refraction\r\n   * and from the center of the sun. It would be 0.833&deg; less without this.\r\n   * \r\n   * @see #getBainHashmashosYereim3Point05Degrees()\r\n   */\r\n  protected static readonly ZENITH_MINUS_3_POINT_05: number = ComplexZmanimCalendar.GEOMETRIC_ZENITH - 3.05;\r\n\r\n  /**\r\n   * The offset in minutes (defaults to 40) after sunset used for <em>tzeit</em> based on calculations of\r\n   * <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah. \r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   */\r\n\r\n  private ateretTorahSunsetOffset: number = 40;\r\n\r\n  /*\r\n  constructor(location?: GeoLocation) {\r\n    super(location);\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Default constructor will set a default {@link GeoLocation#GeoLocation()}, a default\r\n   * {@link AstronomicalCalculator#getDefault() AstronomicalCalculator} and default the calendar to the current date.\r\n   *\r\n   * @see AstronomicalCalendar#AstronomicalCalendar()\r\n   */\r\n\r\n  /*\r\n    public ComplexZmanimCalendar() {\r\n        super();\r\n    }\r\n*/\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a 19.8&deg; dip. This calculation\r\n   * divides the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen\r\n   * Avraham (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is when the sun is 19.8&deg;\r\n   * below the eastern geometric horizon before sunrise. Dusk for this is when the sun is 19.8&deg; below the western\r\n   * geometric horizon after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getShaahZmanis19Point8Degrees() {\r\n    return this.getTemporalHour(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a 18&deg; dip. This calculation divides\r\n   * the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham\r\n   * (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is when the sun is 18&deg; below the\r\n   * eastern geometric horizon before sunrise. Dusk for this is when the sun is 18&deg; below the western geometric\r\n   * horizon after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getShaahZmanis18Degrees() {\r\n    return this.getTemporalHour(this.getAlos18Degrees(), this.getTzais18Degrees());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 26&deg;. This calculation\r\n   * divides the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen\r\n   * Avraham (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is when the sun is\r\n   * {@link #getAlos26Degrees() 26&deg;} below the eastern geometric horizon before sunrise. Dusk for this is when\r\n   * the sun is {@link #getTzais26Degrees() 26&deg;} below the western geometric horizon after sunset. This day is\r\n   * split into 12 equal parts with each part being a <em>shaah zmanis</em>. Since <em>zmanim</em> that use this\r\n   * method are extremely late or early and at a point when the sky is a long time past the 18&deg; point where the\r\n   * darkest point is reached, <em>zmanim</em> that use this should only be used <em>lechumra</em>, such as\r\n   * delaying the start of nighttime <em>mitzvos</em>.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis120Minutes()\r\n   */\r\n  public getShaahZmanis26Degrees() {\r\n    return this.getTemporalHour(this.getAlos26Degrees(), this.getTzais26Degrees());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 16.1&deg;. This calculation\r\n   * divides the day based on the opinion that the day runs from dawn to dusk. Dawn for this calculation is when the\r\n   * sun is 16.1&deg; below the eastern geometric horizon before sunrise and dusk is when the sun is 16.1&deg; below\r\n   * the western geometric horizon after sunset. This day is split into 12 equal parts with each part being a\r\n   * <em>shaah zmanis</em>.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a {@link Long#MIN_VALUE}\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getTzais16Point1Degrees()\r\n   * @see #getSofZmanShmaMGA16Point1Degrees()\r\n   * @see #getSofZmanTfilaMGA16Point1Degrees()\r\n   * @see #getMinchaGedola16Point1Degrees()\r\n   * @see #getMinchaKetana16Point1Degrees()\r\n   * @see #getPlagHamincha16Point1Degrees()\r\n   */\r\n\r\n  public getShaahZmanis16Point1Degrees() {\r\n    return this.getTemporalHour(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (solar hour) according to the opinion of the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a>. This calculation\r\n   * divides the day based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation is\r\n   * 60 minutes before sunrise and dusk is 60 minutes after sunset. This day is split into 12 equal parts with each\r\n   * part being a <em>shaah zmanis</em>. Alternate methods of calculating a <em>shaah zmanis</em> are available in the\r\n   * subclass {@link ComplexZmanimCalendar}.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getAlos60()\r\n   * @see #getTzais60()\r\n   * @see #getPlagHamincha60Minutes()\r\n   */\r\n  public getShaahZmanis60Minutes() {\r\n    return this.getTemporalHour(this.getAlos60(), this.getTzais60());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (solar hour) according to the opinion of the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a>. This calculation divides the day\r\n   * based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation is 72 minutes\r\n   * before sunrise and dusk is 72 minutes after sunset. This day is split into 12 equal parts with each part\r\n   * being a <em>shaah zmanis</em>. Alternate methods of calculating a <em>shaah zmanis</em> are available in the\r\n   * subclass {@link ComplexZmanimCalendar}.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getShaahZmanis72Minutes() {\r\n    return this.getShaahZmanisMGA();\r\n  }\r\n\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em> being\r\n   * {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This calculation\r\n   * divides the day based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation\r\n   * is 72 minutes <em>zmaniyos</em> before sunrise and dusk is 72 minutes <em>zmaniyos</em> after sunset. This day\r\n   * is split into 12 equal parts with each part being a <em>shaah zmanis</em>. This is identical to 1/10th of the day\r\n   * from {@link #getSunrise() sunrise} to {@link #getSunset() sunset}.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzais72Zmanis()\r\n   */\r\n  public getShaahZmanis72MinutesZmanis() {\r\n    return this.getTemporalHour(this.getAlos72Zmanis(), this.getTzais72Zmanis());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 90 minutes. This calculation\r\n   * divides the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen\r\n   * Avraham (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is 90 minutes before sunrise\r\n   * and dusk is 90 minutes after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getShaahZmanis90Minutes() {\r\n    return this.getTemporalHour(this.getAlos90(), this.getTzais90());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em> being\r\n   * {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This calculation divides\r\n   * the day based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation is 90 minutes\r\n   * <em>zmaniyos</em> before sunrise and dusk is 90 minutes <em>zmaniyos</em> after sunset. This day is split into 12 equal\r\n   * parts with each part being a <em>shaah zmanis</em>. This is 1/8th of the day from {@link #getSunrise() sunrise} to\r\n   * {@link #getSunset() sunset}.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos90Zmanis()\r\n   * @see #getTzais90Zmanis()\r\n   */\r\n  public getShaahZmanis90MinutesZmanis() {\r\n    return this.getTemporalHour(this.getAlos90Zmanis(), this.getTzais90Zmanis());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em> being {@link\r\n   * #getAlos96Zmanis() 96} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This calculation divides the\r\n   * day based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation is 96 minutes\r\n   * <em>zmaniyos</em> before sunrise and dusk is 96 minutes <em>zmaniyos</em> after sunset. This day is split into 12\r\n   * equal parts with each part being a <em>shaah zmanis</em>. This is identical to 1/7.5th of the day from\r\n   * {@link #getSunrise() sunrise} to {@link #getSunset() sunset}.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos96Zmanis()\r\n   * @see #getTzais96Zmanis()\r\n   */\r\n  public getShaahZmanis96MinutesZmanis() {\r\n    return this.getTemporalHour(this.getAlos96Zmanis(), this.getTzais96Zmanis());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the\r\n   * <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah calculated with <em>alos</em> being 1/10th\r\n   * of sunrise to sunset day, or {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> of such a day before\r\n   * {@link #getSunrise() sunrise}, and <em>tzais</em> is usually calculated as {@link #getTzaisAteretTorah() 40\r\n   * minutes} (configurable to any offset via {@link #setAteretTorahSunsetOffset(double)}) after {@link #getSunset()\r\n   * sunset}. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>. Note that with this\r\n   * system, <em>chatzos</em> (mid-day) will not be the point that the sun is {@link #getSunTransit() halfway across\r\n   * the sky}.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   */\r\n  public getShaahZmanisAteretTorah() {\r\n    return this.getTemporalHour(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) used by some <em>zmanim</em> according to the opinion of\r\n   * <a href=\"https://en.wikipedia.org/wiki/Yaakov_Moshe_Hillel\">Rabbi Yaakov Moshe Hillel</a> as published in the\r\n   * <em>luach</em> of the Bais Horaah of Yeshivat Chevrat Ahavat Shalom that is based on a day starting 72 minutes before\r\n   * sunrise in degrees {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ending 14 minutes after sunset in\r\n   * degrees {@link #getTzaisGeonim3Point8Degrees() <em>tzais</em> 3.8&deg;}. This day is split into 12 equal parts with\r\n   * each part being a <em>shaah zmanis</em>. Note that with this system, <em>chatzos</em> (mid-day) will not be the point\r\n   * that the sun is {@link #getSunTransit() halfway across the sky}. These <em>shaos zmaniyos</em> are used for <em>Mincha\r\n   * Ketana</em> and <em>Plag Hamincha</em>. The 14 minutes are based on 3/4 of an 18 minute <em>mil</em>, with half a minute\r\n   * added for Rav Yosi.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getMinchaKetanaAhavatShalom()\r\n   * @see #getPlagAhavatShalom()\r\n   */\r\n  public getShaahZmanisAlos16Point1ToTzais3Point8() {\r\n    return this.getTemporalHour(this.getAlos16Point1Degrees(), this.getTzaisGeonim3Point8Degrees());\r\n  }\r\n  \r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) used by some <em>zmanim</em> according to the opinion of\r\n   * <a href=\"https://en.wikipedia.org/wiki/Yaakov_Moshe_Hillel\">Rabbi Yaakov Moshe Hillel</a> as published in the\r\n   * <em>luach</em> of the Bais Horaah of Yeshivat Chevrat Ahavat Shalom that is based on a day starting 72 minutes before\r\n   * sunrise in degrees {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ending 13.5 minutes after sunset in\r\n   * degrees {@link #getTzaisGeonim3Point7Degrees() <em>tzais</em> 3.7&deg;}. This day is split into 12 equal parts with\r\n   * each part being a <em>shaah zmanis</em>. Note that with this system, <em>chatzos</em> (mid-day) will not be the point\r\n   * that the sun is {@link #getSunTransit() halfway across the sky}. These <em>shaos zmaniyos</em> are used for <em>Mincha\r\n   * Gedola</em> calculation.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getMinchaGedolaAhavatShalom()\r\n   */\r\n  public getShaahZmanisAlos16Point1ToTzais3Point7() {\r\n    return this.getTemporalHour(this.getAlos16Point1Degrees(), this.getTzaisGeonim3Point7Degrees());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 96 minutes. This calculation\r\n   * divides the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen\r\n   * Avraham (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is 96 minutes before sunrise\r\n   * and dusk is 96 minutes after sunset. This day is split into 12 equal parts with each part being a <em>shaah\r\n   * zmanis</em>.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getShaahZmanis96Minutes() {\r\n    return this.getTemporalHour(this.getAlos96(), this.getTzais96());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) calculated using a dip of 120 minutes. This calculation\r\n   * divides the day based on the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen\r\n   * Avraham (MGA)</a> that the day runs from dawn to dusk. Dawn for this calculation is 120 minutes before sunrise and\r\n   * dusk is 120 minutes after sunset. This day is split into 12 equal parts with each part being a <em>shaah zmanis</em>.\r\n   * Since <em>zmanim</em> that use this method are extremely late or early and at a point when the sky is a long time\r\n   * past the 18&deg; point where the darkest point is reached, <em>zmanim</em> that use this should only be used\r\n   * <em>lechumra</em> only, such as delaying the start of nighttime <em>mitzvos</em>.\r\n   * \r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n   *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis26Degrees()\r\n   */\r\n  public getShaahZmanis120Minutes() {\r\n    return this.getTemporalHour(this.getAlos120(), this.getTzais120());\r\n  }\r\n\r\n  /**\r\n   * Method to return a <em>shaah zmanis</em> (temporal hour) according to the opinion of the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em> being {@link\r\n  * #getAlos120Zmanis() 120} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This calculation divides\r\n  * the day based on the opinion of the MGA that the day runs from dawn to dusk. Dawn for this calculation is\r\n  * 120 minutes <em>zmaniyos</em> before sunrise and dusk is 120 minutes <em>zmaniyos</em> after sunset. This day is\r\n  * split into 12 equal parts with each part being a <em>shaah zmanis</em>. This is identical to 1/6th of the day from\r\n  * {@link #getSunrise() sunrise} to {@link #getSunset() sunset}. Since <em>zmanim</em> that use this method are\r\n  * extremely late or early and at a point when the sky is a long time past the 18&deg; point where the darkest point\r\n  * is reached, <em>zmanim</em> that use this should only be used <em>lechumra</em> such as delaying the start of\r\n  * nighttime <em>mitzvos</em>.\r\n  * \r\n  * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em>. If the calculation can't be computed\r\n  *         such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n  *         where it does not set, a {@link Long#MIN_VALUE} will be returned. See detailed explanation on top of the\r\n  *         {@link AstronomicalCalendar} documentation.\r\n  * @see #getAlos120Zmanis()\r\n  * @see #getTzais120Zmanis()\r\n  */\r\n  public getShaahZmanis120MinutesZmanis() {\r\n    return this.getTemporalHour(this.getAlos120Zmanis(), this.getTzais120Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on sunrise\r\n   * being 120 minutes <em>zmaniyos</em> or 1/6th of the day before sunrise. This is calculated as 10.75 hours after\r\n   * {@link #getAlos120Zmanis() dawn}. The formula used is 10.75 * {@link #getShaahZmanis120MinutesZmanis()} after\r\n   * {@link #getAlos120Zmanis() dawn}. Since the <em>zman</em> based on an extremely early <em>alos</em> and a very\r\n   * late <em>tzais</em>, it should only be used <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis120MinutesZmanis()\r\n   * @see #getAlos120()\r\n   * @see #getTzais120()\r\n   * @see #getPlagHamincha26Degrees()\r\n   * @see #getPlagHamincha120Minutes()\r\n   */\r\n  public getPlagHamincha120MinutesZmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos120Zmanis(), this.getTzais120Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> according to the\r\n   * Magen Avraham with the day starting 120 minutes before sunrise and ending 120 minutes after sunset. This is\r\n   * calculated as 10.75 hours after {@link #getAlos120() dawn 120 minutes}. The formula used is 10.75 {@link\r\n   * #getShaahZmanis120Minutes()} after {@link #getAlos120()}. Since the <em>zman</em> based on an extremely early\r\n   * <em>alos</em> and a very late <em>tzais</em>, it should only be used <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis120Minutes()\r\n   * @see #getPlagHamincha26Degrees()\r\n   */\r\n  public getPlagHamincha120Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos120(), this.getTzais120());\r\n  }\r\n\r\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated as 60 minutes before sunrise. This is the time to walk the \r\n   * distance of 4 <em>Mil</em> at 15 minutes a <em>Mil</em>. This seems to be the opinion of the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Yair_Bacharach\">Chavas Yair</a> in the Mekor Chaim, Orach Chaim Ch.\r\n   * 90, though  the Mekor Chaim in Ch. 58 and in the <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=45193&pgnum=214\">Chut Hashani Cha 97</a> states that\r\n   * a a person walks 3 and a 1/3 <em>mil</em> in an hour, or an 18-minute <em>mil</em>. Also see the <a href=\r\n   * \"https://he.wikipedia.org/wiki/%D7%9E%D7%9C%D7%9B%D7%99%D7%90%D7%9C_%D7%A6%D7%91%D7%99_%D7%98%D7%A0%D7%A0%D7%91%D7%95%D7%99%D7%9D\"\r\n   * >Divrei Malkiel</a> <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=803&pgnum=33\">Vol. 4, Ch. 20, page 34</a>) who\r\n   * mentions the 15 minute <em>mil</em> lechumra by baking matzos. Also see the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Joseph_Colon_Trabotto\">Maharik</a> <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=1142&pgnum=216\">Ch. 173</a> where the questioner quoting the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Eliezer_ben_Nathan\">Ra'avan</a> is of the opinion that the time to walk a\r\n   * <em>mil</em> is 15 minutes (5 <em>mil</em> in a little over an hour). There are many who believe that there is a\r\n   * <em>ta'us sofer</em> (scribe's error) in the Ra'avan, and it should 4 <em>mil</em> in a little over an hour, or an\r\n   * 18-minute <em>mil</em>. Time based offset calculations are based on the opinion of the\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time of the <em>neshef</em>\r\n   * (time between dawn and sunrise) does not vary by the time of year or location but purely depends on the time it takes to\r\n   * walk the distance of 4* <em>mil</em>. {@link #getTzaisGeonim9Point75Degrees()} is a related <em>zman</em> that is a\r\n   * degree-based calculation based on 60 minutes.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}.\r\n   *         documentation.\r\n   *\r\n   * @see #getTzais60()\r\n   * @see #getPlagHamincha60Minutes()\r\n   * @see #getShaahZmanis60Minutes()\r\n   */\r\n  public getAlos60() {\r\n    return this.getSunrise()?.subtract({ minutes: 60 })\r\n  }\r\n\r\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated using 72 minutes <em>zmaniyos</em> or 1/10th of the day before\r\n   * sunrise. This is based on an 18-minute <em>Mil</em> so the time for 4 <em>Mil</em> is 72 minutes which is 1/10th\r\n   * of a day (12 * 60 = 720) based on the a day being from {@link #getSeaLevelSunrise() sea level sunrise} to\r\n   * {@link #getSeaLevelSunrise sea level sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset}\r\n   * (depending on the {@link #isUseElevation()} setting).\r\n   * The actual calculation is {@link #getSeaLevelSunrise()} - ({@link #getShaahZmanisGra()} * 1.2). This calculation\r\n   * is used in the calendars published by the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Central_Rabbinical_Congress\">Hisachdus Harabanim D'Artzos Habris Ve'Canada</a>.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getShaahZmanisGra()\r\n   */\r\n  public getAlos72Zmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getZmanisBasedOffset(-1.2);\r\n  }\r\n\r\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated using 96 minutes before before {@link #getSunrise() sunrise} or\r\n   * {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting) that is based\r\n   * on the time to walk the distance of 4 <em>Mil</em> at 24 minutes a <em>Mil</em>. Time based offset\r\n   * calculations for <em>alos</em> are based on the opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\"\r\n   * >Rishonim</a></em> who stated that the time of the <em>Neshef</em> (time between dawn and sunrise) does not vary\r\n   * by the time of year or location but purely depends on the time it takes to walk the distance of 4 <em>Mil</em>.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getAlos96() {\r\n    return this.getElevationAdjustedSunrise()?.subtract({ minutes: 96 });\r\n  }\r\n\r\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated using 90 minutes <em>zmaniyos</em> or 1/8th of the day before\r\n   * {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link\r\n   * #isUseElevation()} setting). This is based on a 22.5-minute <em>Mil</em> so the time for 4 <em>Mil</em> is 90\r\n   * minutes which is 1/8th of a day (12 * 60) / 8 = 90\r\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n   * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}.\r\n   * The actual calculation used is {@link #getSunrise()} - ({@link #getShaahZmanisGra()} * 1.5).\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getShaahZmanisGra()\r\n   */\r\n  public getAlos90Zmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getZmanisBasedOffset(-1.5);\r\n  }\r\n\r\n  /**\r\n   * This method returns <em>alos</em> (dawn) calculated using 96 minutes <em>zmaniyos</em> or 1/7.5th of the day before\r\n   * {@link #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link\r\n   * #isUseElevation()} setting). This is based on a 24-minute <em>Mil</em> so the time for 4 <em>Mil</em> is 96\r\n   * minutes which is 1/7.5th of a day (12 * 60 / 7.5 = 96).\r\n   * The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getSeaLevelSunrise sea level\r\n   * sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending on the {@link #isUseElevation()}.\r\n   * The actual calculation used is {@link #getSunrise()} - ({@link #getShaahZmanisGra()} * 1.6).\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getShaahZmanisGra()\r\n   */\r\n  public getAlos96Zmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getZmanisBasedOffset(-1.6);\r\n  }\r\n\r\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated using 90 minutes before {@link #getSeaLevelSunrise() sea level\r\n   * sunrise} based on the time to walk the distance of 4 <em>Mil</em> at 22.5 minutes a <em>Mil</em>. Time based\r\n   * offset calculations for <em>alos</em> are based on the opinion of the <em><a href=\r\n   * \"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a></em> who stated that the time of the <em>Neshef</em>\r\n   * (time between dawn and sunrise) does not vary by the time of year or location but purely depends on the time it\r\n   * takes to walk the distance of 4 <em>Mil</em>.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getAlos90() {\r\n    return this.getElevationAdjustedSunrise()?.subtract({ minutes: 90 });\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns <em>alos</em> (dawn) calculated using 120 minutes\r\n   * before {@link #getSeaLevelSunrise() sea level sunrise} (no adjustment for elevation is made) based on the time\r\n   * to walk the distance of 5 <em>Mil</em>(<em>Ula</em>) at 24 minutes a <em>Mil</em>. Time based offset calculations\r\n   * for <em>alos</em> are based on the* opinion of the <em><a href=\"https://en.wikipedia.org/wiki/Rishonim\">Rishonim</a>\r\n   * </em> who stated that the time of the <em>neshef</em> (time between dawn and sunrise) does not vary by the time of\r\n   * year or location but purely depends on the time it takes to walk the distance of 5 <em>Mil</em>(<em>Ula</em>). Since\r\n   * this time is extremely early, it should only be used <em>lechumra</em>, such as not eating after this time on a fast\r\n   * day, and not as the start time for <em>mitzvos</em> that can only be performed during the day.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only (such as stopping to eat at this time on a fast day),\r\n   *         since it returns a very early time, and if used <em>lekula</em> can result in doing <em>mitzvos hayom</em>\r\n   *         too early according to most opinions. There is no current plan to remove this method from the API, and this\r\n   *         deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * \r\n   * @see #getTzais120()\r\n   * @see #getAlos26Degrees()\r\n   */\r\n  public getAlos120() {\r\n    return this.getElevationAdjustedSunrise()?.subtract({ minutes: 120 });\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and  method returns <em>alos</em> (dawn) calculated using\r\n   * 120 minutes <em>zmaniyos</em> or 1/6th of the day before {@link #getSunrise() sunrise} or {@link\r\n   * #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()} setting). This is based\r\n   * on a 24-minute <em>Mil</em> so the time for 5 <em>Mil</em> is 120 minutes which is 1/6th of a day (12 * 60 /\r\n   * 6 = 120). The day is calculated from {@link #getSeaLevelSunrise() sea level sunrise} to {@link\r\n   * #getSeaLevelSunrise sea level sunset} or {@link #getSunrise() sunrise} to {@link #getSunset() sunset} (depending\r\n   * on the {@link #isUseElevation()}. The actual calculation used is {@link #getSunrise()} - ({@link\r\n   * #getShaahZmanisGra()} * 2). Since this time is extremely early, it should only be used <em>lechumra</em>, such\r\n   * as not eating after this time on a fast day, and not as the start time for <em>mitzvos</em> that can only be\r\n   * performed during the day.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only (such as stopping to eat at this time on a fast day),\r\n   *         since it returns a very early time, and if used <em>lekula</em> can result in doing <em>mitzvos hayom</em>\r\n   *         too early according to most opinions. There is no current plan to remove this method from the API, and this\r\n   *         deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos120()\r\n   * @see #getAlos26Degrees()\r\n   */\r\n  public getAlos120Zmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getZmanisBasedOffset(-2);\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns <em>alos</em> (dawn) calculated when the sun is {@link\r\n   * #ZENITH_26_DEGREES 26&deg;} below the eastern geometric horizon before sunrise. This calculation is based on the same\r\n   * calculation of {@link #getAlos120() 120 minutes} but uses a degree-based calculation instead of 120 exact minutes. This\r\n   * calculation is based on the position of the sun 120 minutes before sunrise in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\r\n   * calculates to 26&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}. Since this time is extremely early, it should\r\n   * only be used <em>lechumra</em> only, such as not eating after this time on a fast day, and not as the start time for\r\n   * <em>mitzvos</em> that can only be performed during the day.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only (such as stopping to eat at this time on a fast day),\r\n   *         since it returns a very early time, and if used <em>lekula</em> can result in doing <em>mitzvos hayom</em>\r\n   *         too early according to most opinions. There is no current plan to remove this  method from the API, and this\r\n   *         deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_26_DEGREES\r\n   * @see #getAlos120()\r\n   * @see #getTzais120()\r\n   * @see #getTzais26Degrees()\r\n   */\r\n  public getAlos26Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_26_DEGREES);\r\n  }\r\n\r\n  /**\r\n   * A method to return <em>alos</em> (dawn) calculated when the sun is {@link #ASTRONOMICAL_ZENITH 18&deg;} below the\r\n   * eastern geometric horizon before sunrise.\r\n   * \r\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ASTRONOMICAL_ZENITH\r\n   */\r\n  public getAlos18Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ASTRONOMICAL_ZENITH);\r\n  }\r\n\r\n  /**\r\n   * A method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_19_DEGREES 19&deg;} below the\r\n   * eastern geometric horizon before sunrise. This is the <a href=\"https://en.wikipedia.org/wiki/Maimonides\"\r\n   * >Rambam</a>'s <em>alos</em> according to Rabbi Moshe Kosower's <a href=\r\n   * \"https://www.worldcat.org/oclc/145454098\">Maaglei Tzedek</a>, page 88, <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=33464&pgnum=13\">Ayeles Hashachar Vol. I, page 12</a>, <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=55960&pgnum=258\">Yom Valayla Shel Torah, Ch. 34, p. 222</a> and \r\n   * Rabbi Yaakov Shakow's <a href=\"https://www.worldcat.org/oclc/1043573513\">Luach Ikvei Hayom</a>.\r\n   * \r\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ASTRONOMICAL_ZENITH\r\n   */\r\n  public getAlos19Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_DEGREES);\r\n  }\r\n\r\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_19_POINT_8 19.8&deg;} below the\r\n   * eastern geometric horizon before sunrise. This calculation is based on the same calculation of\r\n   * {@link #getAlos90() 90 minutes} but uses a degree-based calculation instead of 90 exact minutes. This calculation\r\n   * is based on the position of the sun 90 minutes before sunrise in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\r\n   * calculates to 19.8&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_19_POINT_8\r\n   * @see #getAlos90()\r\n   */\r\n  public getAlos19Point8Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_POINT_8);\r\n  }\r\n\r\n  /**\r\n   * Method to return <em>alos</em> (dawn) calculated when the sun is {@link #ZENITH_16_POINT_1 16.1&deg;} below the\r\n   * eastern geometric horizon before sunrise. This calculation is based on the same calculation of\r\n   * {@link #getAlos72() 72 minutes} but uses a degree-based calculation instead of 72 exact minutes. This calculation\r\n   * is based on the position of the sun 72 minutes before sunrise in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, which\r\n   * calculates to 16.1&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @return the <code>Date</code> representing <em>alos</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun\r\n   *         may not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_16_POINT_1\r\n   * @see #getAlos72()\r\n   */\r\n  public getAlos16Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_1);\r\n  }\r\n\r\n  /**\r\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_11_DEGREES\r\n   * 11.5&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n   * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 52 minutes\r\n   * before {@link #getSunrise sunrise} in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\r\n   * which calculates to 11.5&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * @todo recalculate.\r\n   * \r\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n   *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_11_POINT_5\r\n   */\r\n  public getMisheyakir11Point5Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_11_POINT_5);\r\n  }\r\n\r\n  /**\r\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_11_DEGREES\r\n   * 11&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n   * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 48 minutes\r\n   * before {@link #getSunrise sunrise} in Jerusalem d<a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\r\n   * which calculates to 11&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @return If the calculation can't be computed such as northern and southern locations even south of the Arctic\r\n   *         Circle and north of the Antarctic Circle where the sun may not reach low enough below the horizon for\r\n   *         this calculation, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_11_DEGREES\r\n   */\r\n  public getMisheyakir11Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_11_DEGREES);\r\n  }\r\n\r\n  /**\r\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_10_POINT_2\r\n   * 10.2&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is used for calculating\r\n   * <em>misheyakir</em> according to some opinions. This calculation is based on the position of the sun 45 minutes\r\n   * before {@link #getSunrise sunrise} in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox</a> which calculates\r\n   * to 10.2&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * \r\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_10_POINT_2\r\n   */\r\n  public getMisheyakir10Point2Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_10_POINT_2);\r\n  }\r\n\r\n  /**\r\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_7_POINT_65\r\n   * 7.65&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). The degrees are based on a 35/36 minute\r\n   * <em>zman</em> <a href=\"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the\r\n   * equinox / equilux</a>, when the <em>neshef</em> (twilight) is the shortest. This time is based on <a href=\r\n   * \"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rabbi Moshe Feinstein</a> who writes in <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=14677&pgnum=7\">Ohr Hachaim Vol. 4, Ch. 6</a>)\r\n   * that <em>misheyakir</em> in New York is 35-40 minutes before sunset, something that is a drop less than 8&deg;.\r\n   * <a href=\"https://en.wikipedia.org/wiki/Yisroel_Taplin\">Rabbi Yisroel Taplin</a> in <a href=\r\n   * \"https://www.worldcat.org/oclc/889556744\">Zmanei Yisrael</a> (page 117) notes that <a href=\r\n   * \"https://en.wikipedia.org/wiki/Yaakov_Kamenetsky\">Rabbi Yaakov Kamenetsky</a> stated that it is not less than 36\r\n   * minutes before sunrise (maybe it is 40 minutes). Sefer Yisrael Vehazmanim (p. 7) quotes the Tamar Yifrach\r\n   * in the name of the <a href=\"https://en.wikipedia.org/wiki/Joel_Teitelbaum\">Satmar Rov</a> that one should be stringent\r\n   * not consider <em>misheyakir</em> before 36 minutes. This is also the accepted <a href=\r\n   * \"https://en.wikipedia.org/wiki/Minhag\">minhag</a> in <a href=\r\n   * \"https://en.wikipedia.org/wiki/Lakewood_Township,_New_Jersey\">Lakewood</a> that is used in the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Beth_Medrash_Govoha\">Yeshiva</a>. This follows the opinion of <a href=\r\n   * \"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who provided the time of 35/36 minutes,\r\n   * but did not provide a degree-based time. Since this <em>zman</em> depends on the level of light, Rabbi Yaakov Shakow\r\n   * presented this degree-based calculations to Rabbi Kamenetsky who agreed to them.\r\n   * \r\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #ZENITH_7_POINT_65\r\n   * @see #getMisheyakir9Point5Degrees()\r\n   */\r\n  public getMisheyakir7Point65Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_65);\r\n  }\r\n\r\n  /**\r\n   * This method returns <em>misheyakir</em> based on the position of the sun when it is {@link #ZENITH_9_POINT_5\r\n   * 9.5&deg;} below {@link #GEOMETRIC_ZENITH geometric zenith} (90&deg;). This calculation is based on Rabbi Dovid Kronglass's\r\n   * Calculation of 45 minutes in Baltimore as mentioned in <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=20287&pgnum=29\">Divrei Chachamim No. 24</a> brought down by the <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=50535&pgnum=87\">Birur Halacha, Tinyana, Ch. 18</a>. This calculates to\r\n   * 9.5&deg;. Also see <a href=\"https://en.wikipedia.org/wiki/Jacob_Isaac_Neiman\">Rabbi Yaakov Yitzchok Neiman</a> in Kovetz\r\n   * Eitz Chaim Vol. 9, p. 202 that the Vya'an Yosef did not want to rely on times earlier than 45 minutes in New York. This\r\n   * <em>zman</em> is also used in the calendars published by Rabbi Hershel Edelstein. As mentioned in Yisroel Vehazmanim,\r\n   * Rabbi Edelstein who was given the 45 minute <em>zman</em> by Rabbi Bick. The calendars published by the <em><a href=\r\n   * \"https://en.wikipedia.org/wiki/Mizrahi_Jews\">Edot Hamizrach</a></em> communities also use this <em>zman</em>. This also\r\n   * follows the opinion of <a href=\"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who provided\r\n   * the time of 36 and 45 minutes, but did not provide a degree-based time. Since this <em>zman</em> depends on the level of\r\n   * light, Rabbi Yaakov Shakow presented these degree-based times to Rabbi Shmuel Kamenetsky who agreed to them.\r\n   * \r\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #ZENITH_9_POINT_5\r\n   * @see #getMisheyakir7Point65Degrees()\r\n   */\r\n  public getMisheyakir9Point5Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_5);\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on\r\n   * <em>alos</em> being {@link #getAlos19Point8Degrees() 19.8&deg;} before {@link #getSunrise() sunrise}. This\r\n   * time is 3 {@link #getShaahZmanis19Point8Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link\r\n   * #getAlos19Point8Degrees() dawn} based on the opinion of the MGA that the day is calculated from dawn to nightfall\r\n   * with both being 19.8&deg; below sunrise or sunset. This returns the time of 3 *\r\n   * {@link #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis19Point8Degrees()\r\n   * @see #getAlos19Point8Degrees()\r\n   */\r\n  public getSofZmanShmaMGA19Point8Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based\r\n   * on <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before {@link #getSunrise() sunrise}. This time\r\n   * is 3 {@link #getShaahZmanis16Point1Degrees() <em>shaos zmaniyos</em>} (solar hours) after\r\n   * {@link #getAlos16Point1Degrees() dawn} based on the opinion of the MGA that the day is calculated from\r\n   * dawn to nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of\r\n   * 3 * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getAlos16Point1Degrees()\r\n   */\r\n  public getSofZmanShmaMGA16Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based\r\n   * on <em>alos</em> being {@link #getAlos18Degrees() 18&deg;} before {@link #getSunrise() sunrise}. This time is 3\r\n   * {@link #getShaahZmanis18Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos18Degrees() dawn}\r\n   * based on the opinion of the MGA that the day is calculated from dawn to nightfall with both being 18&deg;\r\n   * below sunrise or sunset. This returns the time of 3 * {@link #getShaahZmanis18Degrees()} after\r\n   * {@link #getAlos18Degrees() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis18Degrees()\r\n   * @see #getAlos18Degrees()\r\n   */\r\n  public getSofZmanShmaMGA18Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos18Degrees(), this.getTzais18Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on\r\n   * <em>alos</em> being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}. This time is 3 {@link\r\n   * #getShaahZmanis72Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos72() dawn} based on the opinion\r\n   * of the MGA that the day is calculated from a {@link #getAlos72() dawn} of 72 minutes before sunrise to\r\n   * {@link #getTzais72() nightfall} of 72 minutes after sunset. This returns the time of 3 * {@link\r\n   * #getShaahZmanis72Minutes()} after {@link #getAlos72() dawn}. This class returns an identical time to {@link\r\n   * #getSofZmanShmaMGA()} and is repeated here for clarity.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis72Minutes()\r\n   * @see #getAlos72()\r\n   * @see #getSofZmanShmaMGA()\r\n   */\r\n  public getSofZmanShmaMGA72Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShmaMGA();\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite <em>Shema</em> in the morning) according\r\n   * to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based\r\n   * on <em>alos</em> being {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em>, or 1/10th of the day before\r\n   * {@link #getSunrise() sunrise}. This time is 3 {@link #getShaahZmanis90MinutesZmanis() <em>shaos zmaniyos</em>}\r\n   * (solar hours) after {@link #getAlos72Zmanis() dawn} based on the opinion of the MGA that the day is calculated\r\n   * from a {@link #getAlos72Zmanis() dawn} of 72 minutes <em>zmaniyos</em>, or 1/10th of the day before\r\n   * {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getTzais72Zmanis() nightfall} of 72 minutes\r\n   * <em>zmaniyos</em> after {@link #getSeaLevelSunset() sea level sunset}. This returns the time of 3 *\r\n   * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis72MinutesZmanis()\r\n   * @see #getAlos72Zmanis()\r\n   */\r\n  public getSofZmanShmaMGA72MinutesZmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos72Zmanis(), this.getTzais72Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite <em>Shema</em> in the morning) according\r\n   * to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on\r\n   * <em>alos</em> being {@link #getAlos90() 90} minutes before {@link #getSunrise() sunrise}. This time is 3\r\n   * {@link #getShaahZmanis90Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos90() dawn} based on\r\n   * the opinion of the MGA that the day is calculated from a {@link #getAlos90() dawn} of 90 minutes before sunrise to\r\n   * {@link #getTzais90() nightfall} of 90 minutes after sunset. This returns the time of 3 *\r\n   * {@link #getShaahZmanis90Minutes()} after {@link #getAlos90() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis90Minutes()\r\n   * @see #getAlos90()\r\n   */\r\n  public getSofZmanShmaMGA90Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos90()!, this.getTzais90()!);\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based\r\n   * on <em>alos</em> being {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em> before {@link #getSunrise()\r\n   * sunrise}. This time is 3 {@link #getShaahZmanis90MinutesZmanis() <em>shaos zmaniyos</em>} (solar hours) after\r\n   * {@link #getAlos90Zmanis() dawn} based on the opinion of the MGA that the day is calculated from a {@link\r\n   * #getAlos90Zmanis() dawn} of 90 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais90Zmanis() nightfall}\r\n   * of 90 minutes <em>zmaniyos</em> after sunset. This returns the time of 3 * {@link #getShaahZmanis90MinutesZmanis()}\r\n   * after {@link #getAlos90Zmanis() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis90MinutesZmanis()\r\n   * @see #getAlos90Zmanis()\r\n   */\r\n  public getSofZmanShmaMGA90MinutesZmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos90Zmanis(), this.getTzais90Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based\r\n   * on <em>alos</em> being {@link #getAlos96() 96} minutes before {@link #getSunrise() sunrise}. This time is 3\r\n   * {@link #getShaahZmanis96Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos96() dawn} based on\r\n   * the opinion of the MGA that the day is calculated from a {@link #getAlos96() dawn} of 96 minutes before\r\n   * sunrise to {@link #getTzais96() nightfall} of 96 minutes after sunset. This returns the time of 3 * {@link\r\n   * #getShaahZmanis96Minutes()} after {@link #getAlos96() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis96Minutes()\r\n   * @see #getAlos96()\r\n   */\r\n  public getSofZmanShmaMGA96Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos96()!, this.getTzais96()!);\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based\r\n   * on <em>alos</em> being {@link #getAlos90Zmanis() 96} minutes <em>zmaniyos</em> before {@link #getSunrise()\r\n   * sunrise}. This time is 3 {@link #getShaahZmanis96MinutesZmanis() <em>shaos zmaniyos</em>} (solar hours) after\r\n   * {@link #getAlos96Zmanis() dawn} based on the opinion of the MGA that the day is calculated from a {@link\r\n   * #getAlos96Zmanis() dawn} of 96 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais90Zmanis() nightfall}\r\n   * of 96 minutes <em>zmaniyos</em> after sunset. This returns the time of 3 * {@link #getShaahZmanis96MinutesZmanis()}\r\n   * after {@link #getAlos96Zmanis() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis96MinutesZmanis()\r\n   * @see #getAlos96Zmanis()\r\n   */\r\n  public getSofZmanShmaMGA96MinutesZmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos96Zmanis(), this.getTzais96Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite <em>Shema</em> in the morning) calculated\r\n   * as 3 hours (regular clock hours and not <em>sha'os zmaniyos</em>) before {@link ZmanimCalendar#getChatzos()}.\r\n   * Generally known as part of the \"Komarno\" <em>zmanim</em> after <a href=\r\n   * \"https://en.wikipedia.org/wiki/Komarno_(Hasidic_dynasty)#Rabbi_Yitzchak_Eisik_Safrin\">Rav Yitzchak Eizik of\r\n   * Komarno</a>, a proponent of this calculation, it actually predates him a lot. It is the opinion of the \r\n   * <em>Shach</em> in the Nekudas Hakesef (Yoreh Deah 184), <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=21638&st=&pgnum=30\">Rav Moshe Lifshitz</a> in his commentary\r\n   * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=21638&st=&pgnum=50\">Lechem Mishneh on Brachos 1:2</a>. It is\r\n   * next brought down about 100 years later by the <a href=\"https://en.wikipedia.org/wiki/Jacob_Emden\">Yaavetz</a>\r\n   * (in his <em>siddur</em>, <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=7920&st=&pgnum=6\">Mor Uktziah Orach\r\n   * Chaim 1</a>, <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=22309&st=&pgnum=30\">Lechem Shamayim, Brachos 1:2</a>\r\n   * and <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=1408&st=&pgnum=69\">She'elos Yaavetz vol. 1 no. 40</a>),\r\n   * Rav Yitzchak Eizik of Komarno in the Ma'aseh Oreg on Mishnayos Brachos 11:2, Shevus Yaakov, Chasan Sofer and others.\r\n   * See Yisrael Vehazmanim <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=9765&st=&pgnum=83\">vol. 1 7:3, page 55 -\r\n   * 62</a>. A variant of this calculation {@link #getSofZmanShmaFixedLocal()} uses {@link #getFixedLocalChatzos() fixed\r\n   * local <em>chatzos</em>} for calculating this type of <em>zman</em>.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see ZmanimCalendar#getChatzos()\r\n   * @see #getSofZmanShmaFixedLocal()\r\n   * @see #getSofZmanTfila2HoursBeforeChatzos()\r\n   */\r\n  public getSofZmanShma3HoursBeforeChatzos() {\r\n    return this.getChatzos()?.subtract({ minutes: 180 })\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based\r\n   * on <em>alos</em> being {@link #getAlos120() 120} minutes or 1/6th of the day before {@link #getSunrise() sunrise}.\r\n   * This time is 3 {@link #getShaahZmanis120Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos120()\r\n   * dawn} based on the opinion of the MGA that the day is calculated from a {@link #getAlos120() dawn} of 120 minutes\r\n   * before sunrise to {@link #getTzais120() nightfall} of 120 minutes after sunset. This returns the time of 3\r\n   * {@link #getShaahZmanis120Minutes()} after {@link #getAlos120() dawn}. This is an extremely early <em>zman</em> that\r\n   * is very much a <em>chumra</em>.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis120Minutes()\r\n   * @see #getAlos120()\r\n   */\r\n  public getSofZmanShmaMGA120Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos120()!, this.getTzais120());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite <em>Shema</em> in the morning) based\r\n   * on the opinion that the day starts at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ends at\r\n   * {@link #getSeaLevelSunset() sea level sunset}. This is the opinion of the <a href=\r\n   * \"https://hebrewbooks.org/40357\">\\u05D7\\u05D9\\u05D3\\u05D5\\u05E9\\u05D9\r\n   * \\u05D5\\u05DB\\u05DC\\u05DC\\u05D5\\u05EA \\u05D4\\u05E8\\u05D6\\u05F4\\u05D4</a> and the <a href=\r\n   * \"https://hebrewbooks.org/14799\">\\u05DE\\u05E0\\u05D5\\u05E8\\u05D4 \\u05D4\\u05D8\\u05D4\\u05D5\\u05E8\\u05D4</a> as\r\n   * mentioned by Yisrael Vehazmanim <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=9765&pgnum=81\">vol 1, sec. 7,\r\n   * ch. 3 no. 16</a>. Three <em>shaos zmaniyos</em> are calculated based on this day and added to {@link\r\n   * #getAlos16Point1Degrees() <em>alos</em>} to reach this time. This time is 3 <em>shaos zmaniyos</em> (solar hours)\r\n   * after {@link #getAlos16Point1Degrees() dawn} based on the opinion that the day is calculated from a {@link\r\n   * #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} to {@link #getSeaLevelSunset() sea level sunset}.\r\n   * <b>Note:</b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this day. If the calculation can't\r\n   *         be computed such as northern and southern locations even south of the Arctic Circle and north of the\r\n   *         Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a null\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getSeaLevelSunset()\r\n   */\r\n  public getSofZmanShmaAlos16Point1ToSunset(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getElevationAdjustedSunset());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) based on the\r\n   * opinion that the day starts at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ends at\r\n   * {@link #getTzaisGeonim7Point083Degrees() <em>tzais</em> 7.083&deg;}. 3 <em>shaos zmaniyos</em> are calculated\r\n   * based on this day and added to {@link #getAlos16Point1Degrees() <em>alos</em>} to reach this time. This time is 3\r\n   * <em>shaos zmaniyos</em> (temporal hours) after {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} based on\r\n   * the opinion that the day is calculated from a {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} to\r\n   * {@link #getTzaisGeonim7Point083Degrees() <em>tzais</em> 7.083&deg;}.\r\n   * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getTzaisGeonim7Point083Degrees()\r\n   */\r\n  public getSofZmanShmaAlos16Point1ToTzaisGeonim7Point083Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos16Point1Degrees(), this.getTzaisGeonim7Point083Degrees());\r\n  }\r\n\r\n  /**\r\n   * From the GRA in Kol Eliyahu on Berachos #173 that states that <em>zman krias shema</em> is calculated as half the\r\n   * time from {@link #getSeaLevelSunrise() sea level sunrise} to {@link #getFixedLocalChatzos() fixed local chatzos}.\r\n   * The GRA himself seems to contradict this when he stated that <em>zman krias shema</em> is 1/4 of the day from\r\n   * sunrise to sunset. See <em>Sarah Lamoed</em> #25 in Yisroel Vehazmanim Vol. III page 1016.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\r\n   *         the sun does not rise, and one where it does not set, a null will be returned. See detailed explanation\r\n   *         on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getFixedLocalChatzos()\r\n   * \r\n   * @deprecated As per a conversation Rabbi Yisroel Twerski had with Rabbi Harfenes, this <em>zman</em> published in\r\n   *         the Yisrael Vehazmanim was based on a misunderstanding and should not be used. This deprecated method\r\n   *         will be removed (likely in KosherJava v3.0) pending confirmation from Rabbi Harfenes.\r\n   */\r\n  public getSofZmanShmaKolEliyahu(): Temporal.ZonedDateTime | null {\r\n    const chatzos = this.getFixedLocalChatzos()!;\r\n    if (chatzos === null || this.getSunrise() === null) {\r\n      return null;\r\n    }\r\n    let diff = Temporal.Duration.from({ nanoseconds: this.getElevationAdjustedSunrise()?.until(chatzos).total(\"nanoseconds\")! / 2 });\r\n    return chatzos.subtract(diff)\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on\r\n   * <em>alos</em> being {@link #getAlos19Point8Degrees() 19.8&deg;} before {@link #getSunrise() sunrise}. This time\r\n   * is 4 {@link #getShaahZmanis19Point8Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link\r\n   * #getAlos19Point8Degrees() dawn} based on the opinion of the MGA that the day is calculated from dawn to\r\n   * nightfall with both being 19.8&deg; below sunrise or sunset. This returns the time of 4 * {@link\r\n   * #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis19Point8Degrees()\r\n   * @see #getAlos19Point8Degrees()\r\n   */\r\n  public getSofZmanTfilaMGA19Point8Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on\r\n   * <em>alos</em> being {@link #getAlos16Point1Degrees() 16.1&deg;} before {@link #getSunrise() sunrise}. This time\r\n   * is 4 {@link #getShaahZmanis16Point1Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link\r\n   * #getAlos16Point1Degrees() dawn} based on the opinion of the MGA that the day is calculated from dawn to\r\n   * nightfall with both being 16.1&deg; below sunrise or sunset. This returns the time of 4 * {@link\r\n   * #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getAlos16Point1Degrees()\r\n   */\r\n  public getSofZmanTfilaMGA16Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on\r\n   * <em>alos</em> being {@link #getAlos18Degrees() 18&deg;} before {@link #getSunrise() sunrise}. This time is 4\r\n   * {@link #getShaahZmanis18Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos18Degrees() dawn}\r\n   * based on the opinion of the MGA that the day is calculated from dawn to nightfall with both being 18&deg;\r\n   * below sunrise or sunset. This returns the time of 4 * {@link #getShaahZmanis18Degrees()} after\r\n   * {@link #getAlos18Degrees() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis18Degrees()\r\n   * @see #getAlos18Degrees()\r\n   */\r\n  public getSofZmanTfilaMGA18Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos18Degrees(), this.getTzais18Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on\r\n   * <em>alos</em> being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}. This time is 4\r\n   * {@link #getShaahZmanis72Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos72() dawn} based on\r\n   * the opinion of the MGA that the day is calculated from a {@link #getAlos72() dawn} of 72 minutes before\r\n   * sunrise to {@link #getTzais72() nightfall} of 72 minutes after sunset. This returns the time of 4 *\r\n   * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() dawn}. This class returns an identical time to\r\n   * {@link #getSofZmanTfilaMGA()} and is repeated here for clarity.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\r\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis72Minutes()\r\n   * @see #getAlos72()\r\n   * @see #getSofZmanShmaMGA()\r\n   */\r\n  public getSofZmanTfilaMGA72Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfilaMGA();\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em>\r\n   * being {@link #getAlos72Zmanis() 72} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This time is 4\r\n   * {@link #getShaahZmanis72MinutesZmanis() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos72Zmanis() dawn}\r\n   * based on the opinion of the MGA that the day is calculated from a {@link #getAlos72Zmanis() dawn} of 72\r\n   * minutes <em>zmaniyos</em> before sunrise to {@link #getTzais72Zmanis() nightfall} of 72 minutes <em>zmaniyos</em>\r\n   * after sunset. This returns the time of 4 * {@link #getShaahZmanis72MinutesZmanis()} after {@link #getAlos72Zmanis() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis72MinutesZmanis()\r\n   * @see #getAlos72Zmanis()\r\n   */\r\n  public getSofZmanTfilaMGA72MinutesZmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos72Zmanis(), this.getTzais72Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on\r\n   * <em>alos</em> being {@link #getAlos90() 90} minutes before {@link #getSunrise() sunrise}. This time is 4\r\n   * {@link #getShaahZmanis90Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos90() dawn} based on\r\n   * the opinion of the MGA that the day is calculated from a {@link #getAlos90() dawn} of 90 minutes before sunrise to\r\n   * {@link #getTzais90() nightfall} of 90 minutes after sunset. This returns the time of 4 *\r\n   * {@link #getShaahZmanis90Minutes()} after {@link #getAlos90() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\r\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis90Minutes()\r\n   * @see #getAlos90()\r\n   */\r\n  public getSofZmanTfilaMGA90Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos90()!, this.getTzais90()!);\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em>\r\n   * being {@link #getAlos90Zmanis() 90} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This time is\r\n   * 4 {@link #getShaahZmanis90MinutesZmanis() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos90Zmanis()\r\n   * dawn} based on the opinion of the MGA that the day is calculated from a {@link #getAlos90Zmanis() dawn}\r\n   * of 90 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais90Zmanis() nightfall} of 90 minutes\r\n   * <em>zmaniyos</em> after sunset. This returns the time of 4 * {@link #getShaahZmanis90MinutesZmanis()} after\r\n   * {@link #getAlos90Zmanis() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis90MinutesZmanis()\r\n   * @see #getAlos90Zmanis()\r\n   */\r\n  public getSofZmanTfilaMGA90MinutesZmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos90Zmanis(), this.getTzais90Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on\r\n   * <em>alos</em> being {@link #getAlos96() 96} minutes before {@link #getSunrise() sunrise}. This time is 4\r\n   * {@link #getShaahZmanis96Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos96() dawn} based on\r\n   * the opinion of the MGA that the day is calculated from a {@link #getAlos96() dawn} of 96 minutes before\r\n   * sunrise to {@link #getTzais96() nightfall} of 96 minutes after sunset. This returns the time of 4 *\r\n   * {@link #getShaahZmanis96Minutes()} after {@link #getAlos96() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman tfila</em>. If the calculation can't be computed such as in\r\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis96Minutes()\r\n   * @see #getAlos96()\r\n   */\r\n  public getSofZmanTfilaMGA96Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos96()!, this.getTzais96()!);\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to the morning prayers) according to the opinion of the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em>\r\n   * being {@link #getAlos96Zmanis() 96} minutes <em>zmaniyos</em> before {@link #getSunrise() sunrise}. This time is\r\n   * 4 {@link #getShaahZmanis96MinutesZmanis() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos96Zmanis()\r\n  * dawn} based on the opinion of the MGA that the day is calculated from a {@link #getAlos96Zmanis() dawn}\r\n  * of 96 minutes <em>zmaniyos</em> before sunrise to {@link #getTzais96Zmanis() nightfall} of 96 minutes\r\n  * <em>zmaniyos</em> after sunset. This returns the time of 4 * {@link #getShaahZmanis96MinutesZmanis()} after\r\n  * {@link #getAlos96Zmanis() dawn}.\r\n  * \r\n  * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n  *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n  *         it does not set, a null will be returned. See detailed explanation on top of the\r\n  *         {@link AstronomicalCalendar} documentation.\r\n  * @see #getShaahZmanis90MinutesZmanis()\r\n  * @see #getAlos90Zmanis()\r\n  */\r\n  public getSofZmanTfilaMGA96MinutesZmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos96Zmanis(), this.getTzais96Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) according to the opinion\r\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on\r\n   * <em>alos</em> being {@link #getAlos120() 120} minutes before {@link #getSunrise() sunrise} . This time is 4\r\n   * {@link #getShaahZmanis120Minutes() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos120() dawn}\r\n   * based on the opinion of the MGA that the day is calculated from a {@link #getAlos120() dawn} of 120\r\n   * minutes before sunrise to {@link #getTzais120() nightfall} of 120 minutes after sunset. This returns the time of\r\n   * 4 * {@link #getShaahZmanis120Minutes()} after {@link #getAlos120() dawn}. This is an extremely early <em>zman</em>\r\n   * that is very much a <em>chumra</em>.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis120Minutes()\r\n   * @see #getAlos120()\r\n   */\r\n  public getSofZmanTfilaMGA120Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos120()!, this.getTzais120());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) calculated as 2 hours\r\n   * before {@link ZmanimCalendar#getChatzos()}. This is based on the opinions that calculate\r\n   * <em>sof zman krias shema</em> as {@link #getSofZmanShma3HoursBeforeChatzos()}. This returns the time of 2 hours\r\n   * before {@link ZmanimCalendar#getChatzos()}.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where\r\n   *         it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see ZmanimCalendar#getChatzos()\r\n   * @see #getSofZmanShma3HoursBeforeChatzos()\r\n   */\r\n  public getSofZmanTfila2HoursBeforeChatzos() {\r\n    return this.getChatzos()?.subtract({ minutes: 120 });\r\n  }\r\n\r\n  /**\r\n   * This method returns <em>mincha gedola</em> calculated as 30 minutes after {@link #getChatzos() <em>chatzos</em>}\r\n   * and not 1/2 of a {@link #getShaahZmanisGra() <em>shaah zmanis</em>} after {@link #getChatzos() <em>chatzos</em>} as\r\n   * calculated by {@link #getMinchaGedola}. Some use this time to delay the start of <em>mincha</em> in the winter when\r\n   * 1/2 of a {@link #getShaahZmanisGra() <em>shaah zmanis</em>} is less than 30 minutes. See\r\n   * {@link #getMinchaGedolaGreaterThan30()} for a convenience method that returns the later of the 2 calculations. One\r\n   * should not use this time to start <em>mincha</em> before the standard {@link #getMinchaGedola() <em>mincha gedola</em>}.\r\n   * See Shulchan Aruch <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=49624&st=&pgnum=291\">Orach Chayim 234:1</a> and\r\n   * the Shaar Hatziyon <em>seif katan ches</em>.\r\n   * \r\n   * @return the <code>Date</code> of 30 minutes after <em>chatzos</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaGedolaGreaterThan30()\r\n   */\r\n  public getMinchaGedola30Minutes() {\r\n    return this.getChatzos()?.add({ minutes: 30 });\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>mincha gedola</em> according to the Magen Avraham with the day starting 72\r\n   * minutes before sunrise and ending 72 minutes after sunset. This is the earliest time to pray <em>mincha</em>. For\r\n   * more information on this see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}. This is\r\n   * calculated as 6.5 {@link #getTemporalHour() solar hours} after <em>alos</em>. The calculation used is 6.5 *\r\n   * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() <em>alos</em>}.\r\n   * \r\n   * @see #getAlos72()\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetana()\r\n   * @see ZmanimCalendar#getMinchaGedola()\r\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getMinchaGedola72Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getMinchaGedola(this.getAlos72(), this.getTzais72());\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>mincha gedola</em> according to the Magen Avraham with the day starting and\r\n   * ending 16.1&deg; below the horizon. This is the earliest time to pray <em>mincha</em>. For more information on\r\n   * this see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}. This is calculated as 6.5\r\n   * {@link #getTemporalHour() solar hours} after <em>alos</em>. The calculation used is 6.5 *\r\n   * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() <em>alos</em>}.\r\n   * \r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetana()\r\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun  may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getMinchaGedola16Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getMinchaGedola(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>mincha gedola</em> based on the opinion of <a href=\r\n   * \"https://en.wikipedia.org/wiki/Yaakov_Moshe_Hillel\">Rabbi Yaakov Moshe Hillel</a> as published in the <em>luach</em>\r\n   * of the Bais Horaah of Yeshivat Chevrat Ahavat Shalom that <em>mincha gedola</em> is calculated as half a <em>shaah\r\n   * zmanis</em> after <em>chatzos</em> with <em>shaos zmaniyos</em> calculated based on a day starting 72 minutes befoe sunrise\r\n   * {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ending 13.5 minutes after sunset {@link\r\n   * #getTzaisGeonim3Point7Degrees() <em>tzais</em> 3.7&deg;}. <em>Mincha gedola</em> is the earliest time to pray <em>mincha</em>.\r\n   * The later of this time or 30 clock minutes after <em>chatzos</em> is returned. See {@link #getMinchaGedolaGreaterThan30()}\r\n   * (though that calculation is based on <em>mincha gedola</em> GRA).\r\n   * For more information about <em>mincha gedola</em> see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}.\r\n   * \r\n   * @return the <code>Date</code> of the <em>mincha gedola</em>. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not\r\n   *         reach low enough below the horizon for this calculation, a null will be returned. See detailed explanation\r\n   *         on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getTzaisGeonim3Point7Degrees()\r\n   * @see #getShaahZmanisAlos16Point1ToTzais3Point7()\r\n   * @see #getMinchaGedolaGreaterThan30()\r\n   */\r\n  public getMinchaGedolaAhavatShalom(): Temporal.ZonedDateTime | null {\r\n    if (!this.getMinchaGedola30Minutes() || !this.getMinchaGedola()) {\r\n      return null;\r\n    }\r\n\r\n    return [\r\n      this.getMinchaGedola30Minutes()!,\r\n      this.getChatzos()?.add({nanoseconds: Math.trunc(this.getShaahZmanisAlos16Point1ToTzais3Point7()!.total(\"nanoseconds\") / 2)})!\r\n    ].sort(Temporal.ZonedDateTime.compare).at(-1)!\r\n  }\r\n\r\n  /**\r\n   * This is a convenience method that returns the later of {@link #getMinchaGedola()} and\r\n   * {@link #getMinchaGedola30Minutes()}. In the winter when 1/2 of a {@link #getShaahZmanisGra() <em>shaah zmanis</em>} is\r\n   * less than 30 minutes {@link #getMinchaGedola30Minutes()} will be returned, otherwise {@link #getMinchaGedola()}\r\n   * will be returned.\r\n   *\r\n   * @return the <code>Date</code> of the later of {@link #getMinchaGedola()} and {@link #getMinchaGedola30Minutes()}.\r\n   *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\r\n   *         where the sun does not rise, and one where it does not set, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getMinchaGedolaGreaterThan30(): Temporal.ZonedDateTime | null {\r\n    if (this.getMinchaGedola30Minutes() === null || this.getMinchaGedola() === null) {\r\n      return null;\r\n    }\r\n\r\n    return [\r\n      this.getMinchaGedola30Minutes()!,\r\n      this.getMinchaGedola()!\r\n    ].sort(Temporal.ZonedDateTime.compare).at(-1)!\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>mincha ketana</em> according to the Magen Avraham with the day starting and\r\n   * ending 16.1&deg; below the horizon. This is the preferred earliest time to pray <em>mincha</em> according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others. For more information on\r\n   * this see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}. This is calculated as 9.5\r\n   * {@link #getTemporalHour() solar hours} after <em>alos</em>. The calculation used is 9.5 *\r\n   * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() <em>alos</em>}.\r\n   * \r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetana()\r\n   * @return the <code>Date</code> of the time of <em>mincha ketana</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getMinchaKetana16Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getMinchaKetana(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>mincha ketana</em> based on the opinion of <a href=\r\n   * \"https://en.wikipedia.org/wiki/Yaakov_Moshe_Hillel\">Rabbi Yaakov Moshe Hillel</a> as published in the <em>luach</em>\r\n   * of the Bais Horaah of Yeshivat Chevrat Ahavat Shalom that <em>mincha ketana</em> is calculated as 2.5 <em>shaos\r\n   * zmaniyos</em> before {@link #getTzaisGeonim3Point8Degrees() <em>tzais</em> 3.8&deg;} with <em>shaos zmaniyos</em>\r\n   * calculated based on a day starting at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ending at\r\n   * <em>tzais</em> 3.8&deg;. <em>Mincha ketana</em> is the preferred earliest time to pray <em>mincha</em> according to\r\n   * the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others. For more information\r\n   * on this see the documentation on {@link #getMinchaKetana() <em>mincha ketana</em>}. \r\n   * \r\n   * @return the the <code>Date</code> of the time of <em>mincha ketana</em>. If the calculation can't be computed such as northern\r\n   *         and southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not\r\n   *         reach low enough below the horizon for this calculation, a null will be returned. See detailed explanation\r\n   *         on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanisAlos16Point1ToTzais3Point8()\r\n   * @see #getMinchaGedolaAhavatShalom()\r\n   * @see #getPlagAhavatShalom()\r\n   */\r\n  public getMinchaKetanaAhavatShalom() {\r\n    return this.getTzaisGeonim3Point8Degrees()?.subtract({\r\n      nanoseconds: Math.trunc(this.getShaahZmanisAlos16Point1ToTzais3Point8()?.total(\"nanoseconds\")! * 2.5)\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * This method returns the time of <em>mincha ketana</em> according to the Magen Avraham with the day\r\n   * starting 72 minutes before sunrise and ending 72 minutes after sunset. This is the preferred earliest time to pray\r\n   * <em>mincha</em> according to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a>\r\n   * and others. For more information on this see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}.\r\n   * This is calculated as 9.5 {@link #getShaahZmanis72Minutes()} after <em>alos</em>. The calculation used is 9.5 *\r\n   * {@link #getShaahZmanis72Minutes()} after {@link #getAlos72() <em>alos</em>}.\r\n   * \r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetana()\r\n   * @return the <code>Date</code> of the time of <em>mincha ketana</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getMinchaKetana72Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getMinchaKetana(this.getAlos72(), this.getTzais72());\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> according to the Magen Avraham with the day starting 60\r\n   * minutes before sunrise and ending 60 minutes after sunset. This is calculated as 10.75 hours after\r\n   * {@link #getAlos60() dawn}. The formula used is 10.75 {@link #getShaahZmanis60Minutes()} after {@link #getAlos60()}.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis60Minutes()\r\n   * @see #getAlos60()\r\n   * @see #getTzais60()\r\n   */\r\n  public getPlagHamincha60Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos60(), this.getTzais60());\r\n  }\r\n\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> according to the\r\n   * Magen Avraham with the day starting 72 minutes before sunrise and ending 72 minutes after sunset. This is calculated\r\n   * as 10.75 hours after {@link #getAlos72() dawn}. The formula used is 10.75 {@link #getShaahZmanis72Minutes()} after\r\n   * {@link #getAlos72()}. Since <em>plag</em> by this calculation can occur after sunset, it should only be used\r\n   * <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis72Minutes()\r\n   */\r\n  public getPlagHamincha72Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos72(), this.getTzais72());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> according to the\r\n   * Magen Avraham with the day starting 90 minutes before sunrise and ending 90 minutes after sunset. This is calculated\r\n   * as 10.75 hours after {@link #getAlos90() dawn}. The formula used is 10.75 {@link #getShaahZmanis90Minutes()} after\r\n   * {@link #getAlos90()}. Since <em>plag</em> by this calculation can occur after sunset, it should only be used\r\n   * <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis90Minutes()\r\n   */\r\n  public getPlagHamincha90Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos90(), this.getTzais90());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> according to the Magen\r\n   * Avraham with the day starting 96 minutes before sunrise and ending 96 minutes after sunset. This is calculated as 10.75\r\n   * hours after {@link #getAlos96() dawn}. The formula used is 10.75 {@link #getShaahZmanis96Minutes()} after\r\n   * {@link #getAlos96()}. Since <em>plag</em> by this calculation can occur after sunset, it should only be used\r\n   * <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanis96Minutes()\r\n   */\r\n  public getPlagHamincha96Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos96(), this.getTzais96());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em>. This is calculated\r\n   * as 10.75 hours after {@link #getAlos96Zmanis() dawn}. The formula used is 10.75 * {@link\r\n  * #getShaahZmanis96MinutesZmanis()} after {@link #getAlos96Zmanis() dawn}. Since <em>plag</em> by this calculation can\r\n  * occur after sunset, it should only be used <em>lechumra</em>.\r\n  * \r\n  * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n  *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n  *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n  * \r\n  * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n  *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n  *         does not set, a null will be returned. See detailed explanation on top of the\r\n  *         {@link AstronomicalCalendar} documentation.\r\n  */\r\n  public getPlagHamincha96MinutesZmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos96Zmanis(), this.getTzais96Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em>. This is calculated\r\n   * as 10.75 hours after {@link #getAlos90Zmanis() dawn}. The formula used is 10.75 * {@link\r\n  * #getShaahZmanis90MinutesZmanis()} after {@link #getAlos90Zmanis() dawn}. Since <em>plag</em> by this calculation can\r\n  * occur after sunset, it should only be used <em>lechumra</em>.\r\n  * \r\n  * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n  *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n  *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n  * \r\n  * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n  *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n  *         does not set, a null will be returned. See detailed explanation on top of the\r\n  *         {@link AstronomicalCalendar} documentation.\r\n  */\r\n  public getPlagHamincha90MinutesZmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos90Zmanis(), this.getTzais90Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em>. This is calculated as\r\n   * 10.75 hours after {@link #getAlos72Zmanis()}. The formula used is 10.75 * {@link #getShaahZmanis72MinutesZmanis()} after\r\n   * {@link #getAlos72Zmanis() dawn}. Since <em>plag</em> by this calculation can occur after sunset, it should only be used\r\n   * <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getPlagHamincha72MinutesZmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos72Zmanis(), this.getTzais72Zmanis());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on the\r\n   * opinion that the day starts at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ends at {@link\r\n   * #getTzais16Point1Degrees() <em>tzais</em> 16.1&deg;}. This is calculated as 10.75 hours <em>zmaniyos</em>\r\n   * after {@link #getAlos16Point1Degrees() dawn}. The formula used is 10.75 * {@link #getShaahZmanis16Point1Degrees()}\r\n   * after {@link #getAlos16Point1Degrees()}. Since <em>plag</em> by this calculation can occur after sunset, it\r\n   * should only be used <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   */\r\n  public getPlagHamincha16Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on the\r\n   * opinion that the day starts at {@link #getAlos19Point8Degrees() <em>alos</em> 19.8&deg;} and ends at {@link\r\n   * #getTzais19Point8Degrees() <em>tzais</em> 19.8&deg;}. This is calculated as 10.75 hours <em>zmaniyos</em>\r\n   * after {@link #getAlos19Point8Degrees() dawn}. The formula used is 10.75 * {@link\r\n   * #getShaahZmanis19Point8Degrees()} after {@link #getAlos19Point8Degrees()}. Since <em>plag</em> by this\r\n   * calculation can occur after sunset, it should only be used <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis19Point8Degrees()\r\n   */\r\n  public getPlagHamincha19Point8Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos19Point8Degrees(), this.getTzais19Point8Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on the\r\n   * opinion that the day starts at {@link #getAlos26Degrees() <em>alos</em> 26&deg;} and ends at {@link\r\n   * #getTzais26Degrees() <em>tzais</em> 26&deg;}. This is calculated as 10.75 hours <em>zmaniyos</em> after {@link\r\n   * #getAlos26Degrees() dawn}. The formula used is 10.75 * {@link #getShaahZmanis26Degrees()} after {@link\r\n   * #getAlos26Degrees()}. Since the <em>zman</em> based on an extremely early <em>alos</em> and a very late\r\n   * <em>tzais</em>, it should only be used <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis26Degrees()\r\n   * @see #getPlagHamincha120Minutes()\r\n   */\r\n  public getPlagHamincha26Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos26Degrees(), this.getTzais26Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on the\r\n   * opinion that the day starts at {@link #getAlos18Degrees() <em>alos</em> 18&deg;} and ends at {@link\r\n   * #getTzais18Degrees() <em>tzais</em> 18&deg;}. This is calculated as 10.75 hours <em>zmaniyos</em> after {@link\r\n   * #getAlos18Degrees() dawn}. The formula used is 10.75 * {@link #getShaahZmanis18Degrees()} after {@link\r\n   * #getAlos18Degrees()}. Since <em>plag</em> by this calculation can occur after sunset, it should only be used\r\n   * <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis18Degrees()\r\n   */\r\n  public getPlagHamincha18Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos18Degrees(), this.getTzais18Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns the time of <em>plag hamincha</em> based on the opinion\r\n   * that the day starts at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ends at {@link #getSunset() sunset}.\r\n   * 10.75 <em>shaos zmaniyos</em> are calculated based on this day and added to {@link #getAlos16Point1Degrees()\r\n   * <em>alos</em>} to reach this time. This time is 10.75 <em>shaos zmaniyos</em> (temporal hours) after {@link\r\n   * #getAlos16Point1Degrees() dawn} based on the opinion that the day is calculated from a {@link #getAlos16Point1Degrees()\r\n   * dawn} of 16.1 degrees before sunrise to {@link #getSeaLevelSunset() sea level sunset}. This returns the time of 10.75 *\r\n   * the calculated <em>shaah zmanis</em> after {@link #getAlos16Point1Degrees() dawn}. Since <em>plag</em> by this\r\n   * calculation can occur after sunset, it should only be used <em>lechumra</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> of the <em>plag</em>. If the calculation can't be computed such as northern and southern\r\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n   *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n   *         top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getSeaLevelSunset()\r\n   */\r\n  public getPlagAlosToSunset(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getElevationAdjustedSunset());\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> based on the opinion that the day starts at\r\n   * {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and ends at {@link #getTzaisGeonim7Point083Degrees()\r\n   * <em>tzais</em>}. 10.75 <em>shaos zmaniyos</em> are calculated based on this day and added to {@link\r\n   * #getAlos16Point1Degrees() <em>alos</em>} to reach this time. This time is 10.75 <em>shaos zmaniyos</em> (temporal\r\n   * hours) after {@link #getAlos16Point1Degrees() dawn} based on the opinion that the day is calculated from a\r\n   * {@link #getAlos16Point1Degrees() dawn} of 16.1 degrees before sunrise to\r\n   * {@link #getTzaisGeonim7Point083Degrees() <em>tzais</em>} . This returns the time of 10.75 * the calculated\r\n   * <em>shaah zmanis</em> after {@link #getAlos16Point1Degrees() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the <em>plag</em>. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not\r\n   *         reach low enough below the horizon for this calculation, a null will be returned. See detailed explanation\r\n   *         on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getTzaisGeonim7Point083Degrees()\r\n   */\r\n  public getPlagAlos16Point1ToTzaisGeonim7Point083Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos16Point1Degrees(), this.getTzaisGeonim7Point083Degrees());\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> (the earliest time that Shabbos can be started) based on the\r\n   * opinion of <a href=\"https://en.wikipedia.org/wiki/Yaakov_Moshe_Hillel\">Rabbi Yaakov Moshe Hillel</a> as published in\r\n   * the <em>luach</em> of the Bais Horaah of Yeshivat Chevrat Ahavat Shalom that that <em>plag hamincha</em> is calculated\r\n   * as 1.25 <em>shaos zmaniyos</em> before {@link #getTzaisGeonim3Point8Degrees() <em>tzais</em> 3.8&deg;} with <em>shaos\r\n   * zmaniyos</em> calculated based on a day starting at {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;} and\r\n   * ending at <em>tzais</em> 3.8&deg;.\r\n   * \r\n   * @return the <code>Date</code> of the <em>plag</em>. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not\r\n   *         reach low enough below the horizon for this calculation, a null will be returned. See detailed explanation\r\n   *         on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanisAlos16Point1ToTzais3Point8()\r\n   * @see #getMinchaGedolaAhavatShalom()\r\n   * @see #getMinchaKetanaAhavatShalom()\r\n   */\r\n  public getPlagAhavatShalom() {\r\n    const distance = Temporal.Duration.from({ nanoseconds: this.getShaahZmanisAlos16Point1ToTzais3Point8()?.total(\"nanoseconds\")! * 1.25 });\r\n    return this.getTzaisGeonim3Point8Degrees()?.subtract(distance)\r\n  }\r\n\r\n  /**\r\n   * Method to return the beginning of <em>bain hashmashos</em> of Rabbeinu Tam calculated when the sun is\r\n   * {@link #ZENITH_13_POINT_24 13.24&deg;} below the western {@link #GEOMETRIC_ZENITH geometric horizon} (90&deg;)\r\n   * after sunset. This calculation is based on the same calculation of {@link #getBainHashmashosRT58Point5Minutes()\r\n   * <em>bain hashmashos</em> Rabbeinu Tam 58.5 minutes} but uses a degree-based calculation instead of 58.5 exact\r\n   * minutes. This calculation is based on the position of the sun 58.5 minutes after sunset in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\r\n   * which calculates to 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}.\r\n   * NOTE: As per Yisrael Vehazmanim Vol. III page 1028, No. 50, a dip of slightly less than 13&deg; should be used.\r\n   * Calculations show that the proper dip to be 13.2456&deg; (truncated to 13.24 that provides about 1.5 second\r\n   * earlier (<em>lechumra</em>) time) below the horizon at that time. This makes a difference of 1 minute and 10\r\n   * seconds in Jerusalem during the Equinox, and 1 minute 29 seconds during the solstice as compared to the proper\r\n   * 13.24&deg; versus 13&deg;. For NY during the solstice, the difference is 1 minute 56 seconds.\r\n   * @todo recalculate the above based on equilux/equinox calculations.\r\n   * \r\n   * @return the <code>Date</code> of the sun being 13.24&deg; below {@link #GEOMETRIC_ZENITH geometric zenith}\r\n   *         (90&deg;). If the calculation can't be computed such as northern and southern locations even south of the\r\n   *         Arctic Circle and north of the Antarctic Circle where the sun may not reach low enough below the horizon\r\n   *         for this calculation, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #ZENITH_13_POINT_24\r\n   * @see #getBainHashmashosRT58Point5Minutes()\r\n   */\r\n  public getBainHashmashosRT13Point24Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_13_POINT_24);\r\n  }\r\n\r\n  /**\r\n   * This method returns the beginning of <em>Bain hashmashos</em> of Rabbeinu Tam calculated as a 58.5\r\n   * minute offset after sunset. <em>bain hashmashos</em> is 3/4 of a <em>Mil</em> before <em>tzais</em> or 3 1/4\r\n   * <em>Mil</em> after sunset. With a <em>Mil</em> calculated as 18 minutes, 3.25 * 18 = 58.5 minutes.\r\n   * \r\n   * @return the <code>Date</code> of 58.5 minutes after sunset. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * \r\n   */\r\n  public getBainHashmashosRT58Point5Minutes() {\r\n    return this.getElevationAdjustedSunset()?.add({ minutes: 58, seconds: 30 });\r\n  }\r\n\r\n  /**\r\n   * This method returns the beginning of <em>bain hashmashos</em> based on the calculation of 13.5 minutes (3/4 of an\r\n   * 18-minute <em>Mil</em>) before <em>shkiah</em> calculated as {@link #getTzaisGeonim7Point083Degrees() 7.083&deg;}.\r\n   * \r\n   * @return the <code>Date</code> of the <em>bain hashmashos</em> of Rabbeinu Tam in this calculation. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getTzaisGeonim7Point083Degrees()\r\n   */\r\n  public getBainHashmashosRT13Point5MinutesBefore7Point083Degrees() {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_083)?.subtract({ minutes: 13, seconds: 30 })\r\n  }\r\n\r\n  /**\r\n   * This method returns the beginning of <em>bain hashmashos</em> of Rabbeinu Tam calculated according to the\r\n   * opinion of the <em>Divrei Yosef</em> (see Yisrael Vehazmanim) calculated 5/18th (27.77%) of the time between\r\n   * <em>alos</em> (calculated as 19.8&deg; before sunrise) and sunrise. This is added to sunset to arrive at the time\r\n   * for <em>bain hashmashos</em> of Rabbeinu Tam.\r\n   * \r\n   * @return the <code>Date</code> of <em>bain hashmashos</em> of Rabbeinu Tam for this calculation. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getBainHashmashosRT2Stars() {\r\n    const alos19Point8: Temporal.ZonedDateTime | null = this.getAlos19Point8Degrees();\r\n    const sunrise: Temporal.ZonedDateTime | null = this.getElevationAdjustedSunrise();\r\n    if (alos19Point8 === null || sunrise === null) {\r\n      return null;\r\n    }\r\n\r\n    const inverseOfSunriseToAlot = -alos19Point8.until(sunrise).total(\"nanoseconds\")\r\n\r\n    return this.getElevationAdjustedSunset()?.add({ nanoseconds: inverseOfSunriseToAlot * (5 / 18) });\r\n  }\r\n\r\n  /**\r\n   * This method returns the beginning of <em>bain hashmashos</em> (twilight) according to the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as 18 minutes\r\n   * or 3/4 of a 24-minute <em>Mil</em> before sunset. According to the Yereim, <em>bain hashmashos</em> starts 3/4\r\n   * of a <em>Mil</em> before sunset and <em>tzais</em> or nightfall starts at sunset. \r\n   * \r\n   * @return the <code>Date</code> of 18 minutes before sunset. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getBainHashmashosYereim3Point05Degrees()\r\n   */\r\n  public getBainHashmashosYereim18Minutes() {\r\n    return this.getElevationAdjustedSunset()?.subtract({ minutes: 18 })\r\n  }\r\n\r\n  /**\r\n   * This method returns the beginning of <em>bain hashmashos</em> (twilight) according to the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as the sun's\r\n   * position 3.05&deg; above the horizon <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\r\n   * its position 18 minutes or 3/4 of an 24-minute <em>mil</em> before sunset. According to the Yereim, <em>bain\r\n   * hashmashos</em> starts 3/4 of a <em>Mil</em> before sunset and <em>tzais</em> or nightfall starts at sunset.\r\n   * Note that <em>lechumra</em> (of about 14 seconds) a refraction value of 0.5166&deg; as opposed to the traditional\r\n   * 0.566&deg; is used. This is more inline with the actual refraction in <em>Eretz Yisrael</em> and is brought down\r\n   * by <a href=\r\n   * \"http://beinenu.com/rabbis/%D7%94%D7%A8%D7%91-%D7%99%D7%93%D7%99%D7%93%D7%99%D7%94-%D7%9E%D7%A0%D7%AA\">Rabbi\r\n   * Yedidya Manet</a> in his <a href=\"https://www.nli.org.il/en/books/NNL_ALEPH002542826/NLI\">Zmanei Halacha\r\n   * Lema’aseh</a> (p. 11). That is the first source that I am aware of that calculates degree-based Yereim\r\n   * <em>zmanim</em>. The 0.5166&deg; refraction is also used by the <a href=\"https://zmanim.online/\">Luach Itim\r\n   * Lebinah</a>. Calculating the Yereim's <em>bain hashmashos</em> using 18-minute based degrees is also suggested\r\n   * in the upcoming 8th edition of the zmanim Kehilchasam. For more details, see the article <a href=\r\n   * \"https://kosherjava.com/2020/12/07/the-yereims-bein-hashmashos/\">The Yereim’s <em>Bein Hashmashos</em></a>.\r\n   * \r\n   * @todo recalculate based on equinox/equilux\r\n   * @return the <code>Date</code> of the sun's position 3.05&deg; minutes before sunset. If the calculation can't\r\n   *         be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\r\n   *         rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #ZENITH_MINUS_3_POINT_05\r\n   * @see #getBainHashmashosYereim18Minutes()\r\n   * @see #getBainHashmashosYereim2Point8Degrees()\r\n   * @see #getBainHashmashosYereim2Point1Degrees()\r\n   */\r\n  public getBainHashmashosYereim3Point05Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_MINUS_3_POINT_05);\r\n  }\r\n\r\n  /**\r\n   * This method returns the beginning of <em>bain hashmashos</em> (twilight) according to the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as 16.875\r\n   * minutes or 3/4 of a 22.5-minute <em>Mil</em> before sunset. According to the Yereim, <em>bain hashmashos</em>\r\n   * starts 3/4 of a <em>Mil</em> before sunset and <em>tzais</em> or nightfall starts at sunset. \r\n   * \r\n   * @return the <code>Date</code> of 16.875 minutes before sunset. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * \r\n   * @see #getBainHashmashosYereim2Point8Degrees()\r\n   */\r\n  public getBainHashmashosYereim16Point875Minutes() {\r\n    return this.getElevationAdjustedSunset()?.subtract({ minutes: 16, seconds: 52, milliseconds: 500 });\r\n  }\r\n\r\n  /**\r\n   * This method returns the beginning of <em>bain hashmashos</em> (twilight) according to the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as the sun's\r\n   * position 2.8&deg; above the horizon <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>,\r\n   * its position 16.875 minutes or 3/4 of an 18-minute <em>Mil</em> before sunset. According to the Yereim, <em>bain\r\n   * hashmashos</em> starts 3/4 of a <em>Mil</em> before sunset and <em>tzais</em> or nightfall starts at sunset.\r\n   * Details, including how the degrees were calculated can be seen in the documentation of\r\n   * {@link #getBainHashmashosYereim3Point05Degrees()}.\r\n   * \r\n   * @return the <code>Date</code> of the sun's position 2.8&deg; minutes before sunset. If the calculation can't\r\n   *         be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\r\n   *         rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #ZENITH_MINUS_2_POINT_8\r\n   * @see #getBainHashmashosYereim16Point875Minutes()\r\n   * @see #getBainHashmashosYereim3Point05Degrees()\r\n   * @see #getBainHashmashosYereim2Point1Degrees()\r\n   */\r\n  public getBainHashmashosYereim2Point8Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_MINUS_2_POINT_8);\r\n  }\r\n\r\n  /**\r\n   * This method returns the beginning of <em>bain hashmashos</em> (twilight) according to the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as 13.5 minutes\r\n   * or 3/4 of an 18-minute <em>Mil</em> before sunset. According to the Yereim, <em>bain hashmashos</em> starts 3/4 of\r\n   * a <em>Mil</em> before sunset and <em>tzais</em> or nightfall starts at sunset.\r\n   * \r\n   * @return the <code>Date</code> of 13.5 minutes before sunset. If the calculation can't be computed such as in the\r\n   *         Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * \r\n   * @see #getBainHashmashosYereim2Point1Degrees()\r\n   */\r\n  public getBainHashmashosYereim13Point5Minutes() {\r\n    return this.getElevationAdjustedSunset()?.subtract({ minutes: 13, seconds: 30 });\r\n  }\r\n\r\n  /**\r\n   * This method returns the beginning of <em>bain hashmashos</em> according to the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Eliezer_ben_Samuel\">Yereim (Rabbi Eliezer of Metz)</a> calculated as the sun's\r\n   * position 2.1&deg; above the horizon <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> in\r\n   * Yerushalayim, its position 13.5 minutes or 3/4 of an 18-minute <em>Mil</em> before sunset. According to the Yereim,\r\n   * <em>bain hashmashos</em> starts 3/4 of a <em>mil</em> before sunset and <em>tzais</em> or nightfall starts at sunset.\r\n   * Details, including how the degrees were calculated can be seen in the documentation of\r\n   * {@link #getBainHashmashosYereim3Point05Degrees()}.\r\n   * \r\n   * @return the <code>Date</code> of the sun's position 2.1&deg; minutes before sunset. If the calculation can't\r\n   *         be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\r\n   *         rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #ZENITH_MINUS_2_POINT_1\r\n   * @see #getBainHashmashosYereim13Point5Minutes()\r\n   * @see #getBainHashmashosYereim2Point8Degrees()\r\n   * @see #getBainHashmashosYereim3Point05Degrees()\r\n   */\r\n  public getBainHashmashosYereim2Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_MINUS_2_POINT_1);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n   * sun's position at {@link #ZENITH_3_POINT_7 3.7&deg;} below the western horizon.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 3.7&deg; below sea level.\r\n   * @see #ZENITH_3_POINT_7\r\n   */\r\n  public getTzaisGeonim3Point7Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_7);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n   * sun's position at {@link #ZENITH_3_POINT_8 3.8&deg;} below the western horizon.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 3.8&deg; below sea level.\r\n   * @see #ZENITH_3_POINT_8\r\n   */\r\n  public getTzaisGeonim3Point8Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_8);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n   * sun's position at {@link #ZENITH_5_POINT_95 5.95&deg;} below the western horizon.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 5.95&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_5_POINT_95\r\n   */\r\n  public getTzaisGeonim5Point95Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_5_POINT_95);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a <a href= \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on an 18\r\n   * minute Mil, or 13.5 minutes. It is the sun's position at {@link #ZENITH_3_POINT_65 3.65&deg;} below the western\r\n   * horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 3.65&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_3_POINT_65\r\n   */\r\n  public getTzaisGeonim3Point65Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_65);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a <a href= \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on an 18\r\n   * minute Mil, or 13.5 minutes. It is the sun's position at {@link #ZENITH_3_POINT_676 3.676&deg;} below the western\r\n   * horizon based on the calculations of Stanley Fishkind. This is a very early <em>zman</em> and should not be\r\n   * relied on without Rabbinical guidance.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 3.676&deg; below sea level. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #ZENITH_3_POINT_676\r\n   */\r\n  public getTzaisGeonim3Point676Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_3_POINT_676);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a <em><a href= \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >mil</a></em> based\r\n   * on a 24-minute Mil, or 18 minutes. It is the sun's position at {@link #ZENITH_4_POINT_61 4.61&deg;} below the\r\n   * western horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 4.61&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_4_POINT_61\r\n   */\r\n  public getTzaisGeonim4Point61Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_61);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a <a href= \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a>, based on a 22.5\r\n   * minute Mil, or 16 7/8 minutes. It is the sun's position at {@link #ZENITH_4_POINT_37 4.37&deg;} below the western\r\n   * horizon. This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 4.37&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_4_POINT_37\r\n   */\r\n  public getTzaisGeonim4Point37Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_37);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a 24-minute <em><a href= \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a></em>,\r\n   * based on a <em>Mil</em> being 24 minutes, and is calculated as 18 + 2 + 4 for a total of 24 minutes. It is the\r\n   * sun's position at {@link #ZENITH_5_POINT_88 5.88&deg;} below the western horizon. This is a very early\r\n   * <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n   * \r\n   * @todo Additional detailed documentation needed.\r\n   * @return the <code>Date</code> representing the time when the sun is 5.88&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_5_POINT_88\r\n   */\r\n  public getTzaisGeonim5Point88Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_5_POINT_88);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 3/4\r\n   * of a <a href= \"https://en.wikipedia.org/wiki/Biblical_and_Talmudic_units_of_measurement\" >Mil</a> based on the\r\n   * sun's position at {@link #ZENITH_4_POINT_8 4.8&deg;} below the western horizon. This is based on Rabbi Leo Levi's\r\n   * calculations. This is the This is a very early <em>zman</em> and should not be relied on without Rabbinical guidance.\r\n   * @todo Additional documentation needed.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 4.8&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_4_POINT_8\r\n   */\r\n  public getTzaisGeonim4Point8Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_4_POINT_8);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> as calculated by\r\n   * <a href=\"https://en.wikipedia.org/wiki/Yechiel_Michel_Tucazinsky\">Rabbi Yechiel Michel Tucazinsky</a>. It is\r\n   * based on of the position of the sun no later than {@link #getTzaisGeonim6Point45Degrees() 31 minutes} after sunset\r\n   * in Jerusalem the height of the summer solstice and is 28 minutes after <em>shkiah</em> <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>. This\r\n   * computes to 6.45&deg; below the western horizon.\r\n   * @todo Additional documentation details needed.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 6.45&deg; below sea level. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #ZENITH_6_POINT_45\r\n   */\r\n  public getTzaisGeonim6Point45Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_6_POINT_45);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated when the\r\n   * sun's position {@link #ZENITH_7_POINT_083 7.083&deg; (or 7&deg; 5\\u2032}) below the western horizon. This is often\r\n   * referred to as 7&deg;5' or 7&deg; and 5 minutes. This calculation is based on the observation of 3 medium sized\r\n   * stars by Dr. Baruch (Berthold) Cohn in his <em>luach</em> <a href=\r\n   * \"https://sammlungen.ub.uni-frankfurt.de/freimann/content/titleinfo/983088\">Tabellen enthaltend die Zeitangaben für\r\n   * den Beginn der Nacht und des Tages für die Breitengrade + 66 bis -38</a> published in Strasbourg, France in 1899.\r\n   * This calendar was very popular in Europe, and many other calendars based their time on it. <a href=\r\n   * \"https://en.wikipedia.org/wiki/David_Zvi_Hoffmann\">Rav Dovid Tzvi Hoffman</a> in his\r\n   * <a href=\"https://hebrewbooks.org/1053\">Sh\"Ut Melamed Leho'il</a> in an exchange of letters with Baruch Cohn in <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=1053&st=&pgnum=37\">Orach Chaim 30</a> agreed to this <em>zman</em> (page 36),\r\n   * as did the Sh\"Ut Bnei Tziyon and the Tenuvas Sadeh. It is very close to the time of the <a href=\r\n   * \"https://hebrewbooks.org/22044\">Mekor Chesed</a> of the Sefer chasidim. It is close to the position of the sun 30 minutes\r\n   * after sunset in Jerusalem <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, but not\r\n   * Exactly. The actual position of the sun 30 minutes after sunset in Jerusalem at the equilux is 7.205&deg; and 7.199&deg;\r\n   * at the equinox. See Hazmanim Bahalacha vol 2, pages 520-521 for more details.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 7.083&deg; below sea level. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #ZENITH_7_POINT_083\r\n   */\r\n  public getTzaisGeonim7Point083Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_083);\r\n  }\r\n\r\n  /**\r\n   * This method returns <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 45 minutes\r\n   * after sunset during the summer solstice in New York, when the <em>neshef</em> (twilight) is the longest. The sun's\r\n   * position at this time computes to {@link #ZENITH_7_POINT_67 7.75&deg;} below the western horizon. See <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=921&pgnum=149\">Igros Moshe Even Haezer 4, Ch. 4</a> (regarding\r\n   * <em>tzais</em> for <em>krias Shema</em>). It is also mentioned in Rabbi Heber's <a href=\r\n   * \"https://hebrewbooks.org/53000\">Shaarei Zmanim</a> on in\r\n   * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=53055&pgnum=101\">chapter 10 (page 87)</a> and\r\n   * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=53055&pgnum=122\">chapter 12 (page 108)</a>. Also see the\r\n   * time of 45 minutes in <a href=\"https://en.wikipedia.org/wiki/Simcha_Bunim_Cohen\">Rabbi Simcha Bunim Cohen's</a> <a\r\n   * href=\"https://www.worldcat.org/oclc/179728985\">The radiance of Shabbos</a> as the earliest <em>zman</em> for New York.\r\n   * This <em>zman</em> is also listed in the <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=1927&pgnum=90\">Divrei\r\n   * Shalom Vol. III, chapter 75</a>, and <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=892&pgnum=431\">Bais Av\"i\r\n   * Vol. III, chapter 117</a>. This <em>zman</em> is also listed in the Divrei Shalom etc. chapter 177 (FIXME - could not\r\n   * be located). Since this <em>zman</em> depends on the level of light, Rabbi Yaakov Shakow presented this degree-based\r\n   * calculation to Rabbi <a href=\"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a> who agreed\r\n   * to it.\r\n   * @todo add hyperlinks to source of Divrei Shalom.\r\n   * @return the <code>Date</code> representing the time when the sun is 7.67&deg; below sea level. If the\r\n   *         calculation can't be computed such as northern and southern locations even south of the Arctic Circle and\r\n   *         north of the Antarctic Circle where the sun may not reach low enough below the horizon for this\r\n   *         calculation, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #ZENITH_7_POINT_67\r\n   */\r\n  public getTzaisGeonim7Point67Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_7_POINT_67);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated at the\r\n   * sun's position at {@link #ZENITH_8_POINT_5 8.5&deg;} below the western horizon.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 8.5&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_8_POINT_5\r\n   */\r\n  public getTzaisGeonim8Point5Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_8_POINT_5);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the calculations used in the <a href=\r\n   * \"https://www.worldcat.org/oclc/243303103\">Luach Itim Lebinah</a> as the stringent time for <em>tzais</em>.  It is\r\n   * calculated at the sun's position at {@link #ZENITH_9_POINT_3 9.3&deg;} below the western horizon.\r\n   * \r\n   * @return the <code>Date</code> representing the time when the sun is 9.3&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getTzaisGeonim9Point3Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_3);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <em>Geonim</em> calculated as 60\r\n   * minutes after sunset <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a>, the\r\n   * day that a solar hour is 60 minutes in New York. The sun's position at this time computes to\r\n   * {@link #ZENITH_9_POINT_75 9.75&deg;} below the western horizon. This is the opinion of <a href=\r\n   * \"https://en.wikipedia.org/wiki/Yosef_Eliyahu_Henkin\">Rabbi Eliyahu Henkin</a>.  This also follows the opinion of\r\n   * <a href=\"https://en.wikipedia.org/wiki/Shmuel_Kamenetsky\">Rabbi Shmuel Kamenetsky</a>. Rabbi Yaakov Shakow presented\r\n   * these degree-based times to Rabbi Shmuel Kamenetsky who agreed to them.\r\n   * \r\n   * @todo recalculate based on equinox / equilux.\r\n   * @return the <code>Date</code> representing the time when the sun is 9.75&deg; below sea level. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of\r\n   *         the Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a\r\n   *         null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see #getTzais60()\r\n   */\r\n  public getTzaisGeonim9Point75Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_9_POINT_75);\r\n  }\r\n\r\n  /**\r\n   * This method returns the <em>tzais</em> (nightfall) based on the opinion of the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Yair_Bacharach\">Chavas Yair</a> and <a href=\r\n   * \"https://he.wikipedia.org/wiki/%D7%9E%D7%9C%D7%9B%D7%99%D7%90%D7%9C_%D7%A6%D7%91%D7%99_%D7%98%D7%A0%D7%A0%D7%91%D7%95%D7%99%D7%9D\"\r\n   * >Divrei Malkiel</a> that the time to walk the distance of a <em>Mil</em> is 15 minutes for a total of 60 minutes\r\n   * for 4 <em>Mil</em> after {@link #getSeaLevelSunset() sea level sunset}. See detailed documentation explaining the\r\n   * 60 minute concept at {@link #getAlos60()}.\r\n   * \r\n   * @return the <code>Date</code> representing 60 minutes after sea level sunset. If the calculation can't be\r\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n   *         and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getAlos60()\r\n   * @see #getPlagHamincha60Minutes()\r\n   * @see #getShaahZmanis60Minutes()\r\n   */\r\n  public getTzais60() {\r\n    return this.getElevationAdjustedSunset()?.add({ minutes: 60 })\r\n  }\r\n\r\n  /**\r\n   * This method returns <em>tzais</em> usually calculated as 40 minutes (configurable to any offset via\r\n   * {@link #setAteretTorahSunsetOffset(double)}) after sunset. Please note that <em>Chacham</em> Yosef Harari-Raful\r\n   * of Yeshivat Ateret Torah who uses this time, does so only for calculating various other <em>zmanai hayom</em>\r\n   * such as <em>Sof Zman Krias Shema</em> and <em>Plag Hamincha</em>. His calendars do not publish a <em>zman</em>\r\n   * for <em>Tzais</em>. It should also be noted that <em>Chacham</em> Harari-Raful provided a 25 minute <em>zman</em>\r\n   * for Israel. This API uses 40 minutes year round in any place on the globe by default. This offset can be change\r\n   *  by calling {@link #setAteretTorahSunsetOffset(double)}.\r\n   * \r\n   * @return the <code>Date</code> representing 40 minutes (configurable via {@link #setAteretTorahSunsetOffset})\r\n   *         after sea level sunset. If the calculation can't be computed such as in the Arctic Circle where there is\r\n   *         at least one day a year where the sun does not rise, and one where it does not set, a null will be\r\n   *         returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   */\r\n  public getTzaisAteretTorah() {\r\n    return this.getElevationAdjustedSunset()?.add({ minutes: this.getAteretTorahSunsetOffset() });\r\n  }\r\n\r\n  /**\r\n   * Returns the offset in minutes after sunset used to calculate <em>tzais</em> based on the calculations of\r\n   * <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah calculations. The default value is 40 minutes.\r\n   * This affects most <em>zmanim</em>, since almost all zmanim use subset as part of their calculation.\r\n   * \r\n   * @return the number of minutes after sunset for <em>Tzait</em>.\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   */\r\n  public getAteretTorahSunsetOffset(): number {\r\n    return this.ateretTorahSunsetOffset;\r\n  }\r\n\r\n  /**\r\n   * Allows setting the offset in minutes after sunset for the Ateret Torah <em>zmanim</em>. The default if unset is\r\n   * 40 minutes. <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah uses 40 minutes globally with the exception\r\n   * of Israel where a 25 minute offset is used. This 40 minute (or any other) offset can be overridden by this method.\r\n   * This offset impacts all Ateret Torah <em>zmanim</em>.\r\n   * \r\n   * @param ateretTorahSunsetOffset\r\n   *            the number of minutes after sunset to use as an offset for the Ateret Torah <em>tzais</em>\r\n   * @see #getAteretTorahSunsetOffset()\r\n   */\r\n  public setAteretTorahSunsetOffset(ateretTorahSunsetOffset: number): void {\r\n    this.ateretTorahSunsetOffset = ateretTorahSunsetOffset;\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) based on the\r\n   * calculation of <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah, that the day starts\r\n   * {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is usually calculated as ending\r\n   * {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset via\r\n   * {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em> are calculated based on this day and added\r\n   * to {@link #getAlos72Zmanis() <em>alos</em>} to reach this time. This time is 3\r\n   * {@link #getShaahZmanisAteretTorah() <em>shaos zmaniyos</em>} (temporal hours) after\r\n   * {@link #getAlos72Zmanis() <em>alos</em> 72 <em>zmaniyos</em>}. <b>Note: </b> Based on this calculation <em>chatzos</em>\r\n   * will not be at midday.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\r\n   *         the sun does not rise, and one where it does not set, a null will be returned. See detailed explanation\r\n   *         on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   * @see #getShaahZmanisAteretTorah()\r\n   */\r\n  public getSofZmanShmaAteretTorah(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getAlos72Zmanis(), this.getTzaisAteretTorah()!);\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) based on the calculation\r\n   * of <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah, that the day starts {@link #getAlos72Zmanis()\r\n   * 1/10th of the day} before sunrise and is usually calculated as ending {@link #getTzaisAteretTorah() 40 minutes\r\n   * after sunset} (configurable to any offset via {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em>\r\n   * are calculated based on this day and added to {@link #getAlos72Zmanis() <em>alos</em>} to reach this time. This time\r\n   * is 4 * {@link #getShaahZmanisAteretTorah() <em>shaos zmaniyos</em>} (temporal hours) after\r\n   * {@link #getAlos72Zmanis() <em>alos</em> 72 zmaniyos}.\r\n   * <b>Note: </b> Based on this calculation <em>chatzos</em> will not be at midday.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em> based on this calculation. If the\r\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\r\n   *         the sun does not rise, and one where it does not set, a null will be returned. See detailed explanation\r\n   *         on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getShaahZmanisAteretTorah()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   */\r\n  public getSofZmanTfilahAteretTorah(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getAlos72Zmanis(), this.getTzaisAteretTorah()!);\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>mincha gedola</em> based on the calculation of <em>Chacham</em> Yosef\r\n   * Harari-Raful of Yeshivat Ateret Torah, that the day starts {@link #getAlos72Zmanis() 1/10th of the day}\r\n   * before sunrise and is usually calculated as ending {@link #getTzaisAteretTorah() 40 minutes after sunset}\r\n   * (configurable to any offset via {@link #setAteretTorahSunsetOffset(double)}). This is the preferred earliest\r\n   * time to pray <em>mincha</em> according to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\"\r\n   * >Rambam</a> and others. For more information on this see the documentation on {@link #getMinchaGedola() <em>mincha\r\n   * gedola</em>}. This is calculated as 6.5 {@link #getShaahZmanisAteretTorah()  solar hours} after <em>alos</em>. The\r\n   * calculation used is 6.5 * {@link #getShaahZmanisAteretTorah()} after {@link #getAlos72Zmanis() <em>alos</em>}.\r\n   * \r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getShaahZmanisAteretTorah()\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetanaAteretTorah()\r\n   * @see ZmanimCalendar#getMinchaGedola()\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getMinchaGedolaAteretTorah(): Temporal.ZonedDateTime | null {\r\n    return this.getMinchaGedola(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>mincha ketana</em> based on the calculation of\r\n   * <em>Chacham</em> Yosef Harari-Raful of Yeshivat Ateret Torah, that the day starts\r\n   * {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is usually calculated as ending\r\n   * {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset via\r\n   * {@link #setAteretTorahSunsetOffset(double)}). This is the preferred earliest time to pray <em>mincha</em>\r\n   * according to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others.\r\n   * For more information on this see the documentation on {@link #getMinchaGedola() <em>mincha gedola</em>}. This is\r\n   * calculated as 9.5 {@link #getShaahZmanisAteretTorah() solar hours} after {@link #getAlos72Zmanis() <em>alos</em>}.\r\n   * The calculation used is 9.5 * {@link #getShaahZmanisAteretTorah()} after {@link #getAlos72Zmanis() <em>alos</em>}.\r\n   * \r\n   * @see #getAlos72Zmanis()\r\n   * @see #getTzaisAteretTorah()\r\n   * @see #getShaahZmanisAteretTorah()\r\n   * @see #getAteretTorahSunsetOffset()\r\n   * @see #setAteretTorahSunsetOffset(double)\r\n   * @see #getMinchaGedola()\r\n   * @see #getMinchaKetana()\r\n   * @return the <code>Date</code> of the time of <em>mincha ketana</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getMinchaKetanaAteretTorah(): Temporal.ZonedDateTime | null {\r\n    return this.getMinchaKetana(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>plag hamincha</em> based on the calculation of <em>Chacham</em> Yosef Harari-Raful\r\n   * of Yeshivat Ateret Torah, that the day starts {@link #getAlos72Zmanis() 1/10th of the day} before sunrise and is\r\n   * usually calculated as ending {@link #getTzaisAteretTorah() 40 minutes after sunset} (configurable to any offset\r\n   * via {@link #setAteretTorahSunsetOffset(double)}). <em>shaos zmaniyos</em> are calculated based on this day and\r\n   * added to {@link #getAlos72Zmanis() <em>alos</em>} to reach this time. This time is 10.75\r\n   * {@link #getShaahZmanisAteretTorah() <em>shaos zmaniyos</em>} (temporal hours) after {@link #getAlos72Zmanis()\r\n  * dawn}.\r\n  * \r\n  * @return the <code>Date</code> of the <em>plag</em>. If the calculation can't be computed such as in the Arctic Circle\r\n  *         where there is at least one day a year where the sun does not rise, and one where it does not set, a null\r\n  *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n  * @see #getAlos72Zmanis()\r\n  * @see #getTzaisAteretTorah()\r\n  * @see #getShaahZmanisAteretTorah()\r\n  * @see #setAteretTorahSunsetOffset(double)\r\n  * @see #getAteretTorahSunsetOffset()\r\n  */\r\n  public getPlagHaminchaAteretTorah(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getAlos72Zmanis(), this.getTzaisAteretTorah());\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>misheyakir</em> based on the common calculation of the Syrian community in NY\r\n   * that the <em>alos</em> is a fixed minute offset from day starting {@link #getAlos72Zmanis() 1/10th of the day}\r\n   * before sunrise. The common offsets are 6 minutes (based on the <em>Pri Megadim</em>, but not linked to the\r\n   * calculation of <em>Alos</em> as 1/10th of the day), 8 and 18 minutes (possibly attributed to\r\n   * <em>Chacham Baruch Ben Haim</em>). Since there is no universal accepted offset, the user of this API will have to\r\n   * <em><a href=\"https://en.wikipedia.org/wiki/Baruch_Ben_Haim\">Chacham Baruch Ben Haim</a></em>). Since there is no\r\n   * universal accepted offset, the user of this API will have to specify one. <em>Chacham Yosef Harari-Raful</em> of\r\n   * <em>Yeshivat Ateret Torah</em> does not supply any <em>zman</em> for <em>misheyakir</em> and does not endorse any\r\n   * specific calculation for <em>misheyakir</em>. For that reason, this method is not a public method.\r\n   *\r\n   * @param minutes\r\n   *            the number of minutes after <em>alos</em> calculated as {@link #getAlos72Zmanis() 1/10th of the day}\r\n   * @return the <code>Date</code> of <em>misheyakir</em>. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos72Zmanis()\r\n   */\r\n  // private Date getMesheyakirAteretTorah(double minutes) {\r\n  // return getTimeOffset(getAlos72Zmanis(), minutes * MINUTE_MILLIS);\r\n  // }\r\n\r\n  /**\r\n   * Method to return <em>tzais</em> (dusk) calculated as 72 minutes zmaniyos, or 1/10th of the day after\r\n   * {@link #getSeaLevelSunset() sea level sunset}. This is the way that the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Abraham_Cohen_Pimentel\">Minchas Cohen</a> in Ma'amar 2:4 calculates Rebbeinu Tam's\r\n   * time of <em>tzeis</em>. It should be noted that this calculation results in the shortest time from sunset to\r\n   * <em>tzais</em> being during the winter solstice, the longest at the summer solstice and 72 clock minutes at the\r\n   * equinox. This does not match reality, since there is no direct relationship between the length of the day and\r\n   * twilight. The shortest twilight is during the equinox, the longest is during the the summer solstice, and in the\r\n   * winter with the shortest daylight, the twilight period is longer than during the equinoxes.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos72Zmanis()\r\n   */\r\n  public getTzais72Zmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getZmanisBasedOffset(1.2);\r\n  }\r\n\r\n  /**\r\n   * A utility method to return <em>alos</em> (dawn) or <em>tzais</em> (dusk) based on a fractional day offset. \r\n   * @param hours the number of <em>shaaos zmaniyos</em> (temporal hours) before sunrise or after sunset that defines dawn\r\n   *        or dusk. If a negative number is passed in, it will return the time of <em>alos</em> (dawn) (subtracting the\r\n   *        time from sunrise) and if a positive number is passed in, it will return the time of <em>tzais</em> (dusk)\r\n   *        (adding the time to sunset). If 0 is passed in, a null will be returned (since we can't tell if it is sunrise\r\n   *        or sunset based).\r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. A null will also be returned if 0 is passed in, since we can't tell if it is sunrise\r\n   *         or sunset based. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  private getZmanisBasedOffset(hours: 0): null;\r\n  private getZmanisBasedOffset(hours: Exclude<number, 0>): Temporal.ZonedDateTime;\r\n  private getZmanisBasedOffset(hours: number): Temporal.ZonedDateTime | null {\r\n    const shaahZmanis = this.getShaahZmanisGra()!;\r\n\r\n    if (hours > 0) {\r\n      let sunset = this.getElevationAdjustedSunset();\r\n      for (let index = 0; index < hours; index++) {\r\n        sunset = sunset?.add(shaahZmanis)!;\r\n      }\r\n      return sunset;\r\n    } else {\r\n      let sunrise = this.getElevationAdjustedSunrise();\r\n      for (let index = 0; index < Math.abs(hours); index++) {\r\n        sunrise = sunrise?.subtract(shaahZmanis)!;\r\n      }\r\n      return sunrise;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to return <em>tzais</em> (dusk) calculated using 90 minutes zmaniyos or 1/8th of the day after {@link\r\n   * #getSeaLevelSunset() sea level sunset}. This time is known in Yiddish as the <em>achtel</em> (an eighth)\r\n   * <em>zman</em>.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos90Zmanis()\r\n   */\r\n  public getTzais90Zmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getZmanisBasedOffset(1.5);\r\n  }\r\n\r\n  /**\r\n   * Method to return <em>tzais</em> (dusk) calculated using 96 minutes <em>zmaniyos</em> or 1/7.5 of the day after\r\n   * {@link #getSeaLevelSunset() sea level sunset}.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos96Zmanis()\r\n   */\r\n  public getTzais96Zmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getZmanisBasedOffset(1.6);\r\n  }\r\n\r\n  /**\r\n   * Method to return <em>tzais</em> (dusk) calculated as 90 minutes after sea level sunset. This method returns\r\n   * <em>tzais</em> (nightfall) based on the opinion of the Magen Avraham that the time to walk the distance of a\r\n   * <em>Mil</em> according to the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a>'s opinion\r\n   * is 18 minutes for a total of 90 minutes based on the opinion of Ula who calculated <em>tzais</em> as 5\r\n   * <em>Mil</em> after sea level <em>shkiah</em> (sunset). A similar calculation {@link #getTzais19Point8Degrees()}\r\n   * uses solar position calculations based on this time.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getTzais19Point8Degrees()\r\n   * @see #getAlos90()\r\n   */\r\n  public getTzais90() {\r\n    return this.getElevationAdjustedSunset()?.add({ minutes: 90 })\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns <em>tzais</em> (nightfall) based on the calculations\r\n   * of <a href=\"https://en.wikipedia.org/wiki/Avraham_Chaim_Naeh\">Rav Chaim Naeh</a> that the time to walk the\r\n   * distance of a <em>Mil</em> according to the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a>'s opinion\r\n   * is 2/5 of an hour (24 minutes) for a total of 120 minutes based on the opinion of <em>Ula</em> who calculated\r\n   * <em>tzais</em> as 5 <em>Mil</em> after sea level <em>shkiah</em> (sunset). A similar calculation {@link\r\n  * #getTzais26Degrees()} uses degree-based calculations based on this 120 minute calculation. Since the <em>zman</em>\r\n  * is extremely late and at a point that is long past the 18&deg; point where the darkest point is\r\n  * reached, it should only be used <em>lechumra</em>, such as delaying the start of nighttime <em>mitzvos</em>.\r\n  * \r\n  * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n  *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n  *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n  * \r\n  * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n  *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n  *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}.\r\n  *         documentation.\r\n  * @see #getTzais26Degrees()\r\n  * @see #getAlos120()\r\n  */\r\n  public getTzais120() {\r\n    return this.getElevationAdjustedSunset()!.add({ minutes: 120 })\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns <em>tzais</em> (dusk) calculated using 120 minutes\r\n   * <em>zmaniyos</em> after {@link #getSeaLevelSunset() sea level sunset}. Since the <em>zman</em>\r\n   * is extremely late and at a point when the it is long past the 18&deg; point where the darkest point is\r\n   * reached, it should only be used <em>lechumra</em>, such as delaying the start of nighttime <em>mitzvos</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos120Zmanis()\r\n   * @see #getTzais120()\r\n   * @see #getTzais26Degrees()\r\n   */\r\n  public getTzais120Zmanis(): Temporal.ZonedDateTime | null {\r\n    return this.getZmanisBasedOffset(2);\r\n  }\r\n\r\n  /**\r\n   * This calculates the time of <em>tzais</em> at the point when the sun is 16.1&deg; below the horizon. This is\r\n   * the sun's dip below the horizon 72 minutes after sunset according Rabbeinu Tam's calculation of <em>tzais</em>\r\n   * <a href=\r\n   * \"https://kosherjava.com/2022/01/12/equinox-vs-equilux-zmanim-calculations/\">around the equinox / equilux</a> in\r\n   * Jerusalem. The question of equinox VS equilux is complex, with Rabbi Meir Posen in the <a href=\r\n   * \"https://www.worldcat.org/oclc/956316270\">Ohr Meir</a> of the opinion that the equilux should be used. See\r\n   * Yisrael Vehazmanim vol I, 34:1:4. Rabbi Yedidya Manet in his <a href=\r\n   * \"https://www.nli.org.il/en/books/NNL_ALEPH002542826/NLI\">Zmanei Halacha Lema'aseh</a> (4th edition part 2, pages\r\n   * and 22 and 24) and Rabbi Yonah Metzbuch (in a letter published by Rabbi Manet) are of the opinion that the\r\n   * astronomical equinox should be used. The difference adds up to about 9 seconds, too trivial to make much of a\r\n   * difference. For information on how this is calculated see the comments on {@link #getAlos16Point1Degrees()}.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n   *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getTzais72()\r\n   * @see #getAlos16Point1Degrees() for more information on this calculation.\r\n   */\r\n  public getTzais16Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_1);\r\n  }\r\n\r\n  /**\r\n   * This method should be used <em>lechumra</em> only and returns <em>tzais</em> based on when the sun is 26&deg;\r\n   * below the horizon.For information on how this is calculated see the comments on {@link #getAlos26Degrees()}.\r\n   * Since the <em>zman</em> is extremely late and at a point when it is long past the 18&deg; point where the\r\n   * darkest point is reached, it should only be used <em>lechumra</em> such as delaying the start of nighttime\r\n   * <em>mitzvos</em>.\r\n   * \r\n   * @deprecated This method should be used <em>lechumra</em> only since it returns a very late time, and if used\r\n   *         <em>lekula</em> can result in <em>chillul Shabbos</em> etc. There is no current plan to remove this\r\n   *         method from the API, and this deprecation is intended to alert developers of the danger of using it.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n   *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getTzais120()\r\n   * @see #getAlos26Degrees()\r\n   */\r\n  public getTzais26Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_26_DEGREES);\r\n  }\r\n\r\n  /**\r\n   * For information on how this is calculated see the comments on {@link #getAlos18Degrees()}\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n   *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos18Degrees()\r\n   */\r\n  public getTzais18Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ASTRONOMICAL_ZENITH);\r\n  }\r\n\r\n  /**\r\n   * For information on how this is calculated see the comments on {@link #getAlos19Point8Degrees()}\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as northern and\r\n   *         southern locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may\r\n   *         not reach low enough below the horizon for this calculation, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getTzais90()\r\n   * @see #getAlos19Point8Degrees()\r\n   */\r\n  public getTzais19Point8Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_19_POINT_8);\r\n  }\r\n\r\n  /**\r\n   * A method to return <em>tzais</em> (dusk) calculated as 96 minutes after sea level sunset. For information on how\r\n   * this is calculated see the comments on {@link #getAlos96()}.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * @see #getAlos96()\r\n   */\r\n  public getTzais96() {\r\n    return this.getElevationAdjustedSunset()?.add({ minutes: 96 });\r\n  }\r\n\r\n  /**\r\n   * A method that returns the local time for fixed <em>chatzos</em>. This time is noon and midnight adjusted from\r\n   * standard time to account for the local latitude. The 360&deg; of the globe divided by 24 calculates to 15&deg;\r\n   * per hour with 4 minutes per degree, so at a longitude of 0 , 15, 30 etc... <em>Chatzos</em> is at exactly 12:00\r\n   * noon. This is the time of <em>chatzos</em> according to the <a href=\r\n   * \"https://en.wikipedia.org/wiki/Aruch_HaShulchan\">Aruch Hashulchan</a> in <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=7705&pgnum=426\">Orach Chaim 233:14</a> and <a href=\r\n   * \"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rabbi Moshe Feinstein</a> in Igros Moshe <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=916&st=&pgnum=67\">Orach Chaim 1:24</a> and <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=14675&pgnum=191\">2:20</a>.\r\n   * Lakewood, N.J., with a longitude of -74.2094, is 0.7906 away from the closest multiple of 15 at -75&deg;. This\r\n   * is multiplied by 4 to yield 3 minutes and 10 seconds for a <em>chatzos</em> of 11:56:50. This method is not tied\r\n   * to the theoretical 15&deg; timezones, but will adjust to the actual timezone and <a\r\n   * href=\"https://en.wikipedia.org/wiki/Daylight_saving_time\">Daylight saving time</a>.\r\n   * \r\n   * @return the Date representing the local <em>chatzos</em>\r\n   * @see GeoLocation#getLocalMeanTimeOffset()\r\n   */\r\n  public getFixedLocalChatzos() {\r\n    const geoLocation: GeoLocation = this.getGeoLocation();\r\n    const rawOffsetHours = TimeZone.getRawOffset(geoLocation.getTimeZone()) / ComplexZmanimCalendar.HOUR_MILLIS;\r\n    return this.getDateFromTime(12 - rawOffsetHours, true)?.subtract({ nanoseconds: geoLocation.getLocalMeanTimeOffset() })\r\n  }\r\n\r\n  /**\r\n   * A method that returns the latest <em>zman krias shema</em> (time to recite Shema in the morning) calculated as 3\r\n   * clock hours before {@link #getFixedLocalChatzos()}. Note that there are opinions brought down in Yisrael Vehazmanim\r\n   * <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=9765&st=&pgnum=85\">page 57</a> and Rav Yitzchak Silber's <a href=\r\n   * \"https://www.worldcat.org/oclc/811253716\">Sha'aos Shavos Balalacha</a> that this calculation is a mistake and regular\r\n   * <em>chatzos</em> shoud be used for clock-hour calculations as opposed to fixed local <em>chatzos</em>. According to\r\n   * these opinions it should be 3 clock hours before regular <em>chatzos</em> as calculated in {@link\r\n  * #getSofZmanShma3HoursBeforeChatzos()}.\r\n  * \r\n  * @return the <code>Date</code> of the latest <em>zman krias shema</em> calculated as 3 clock hours before\r\n  *         {@link #getFixedLocalChatzos()}.\r\n  * @see #getFixedLocalChatzos()\r\n  * @see #getSofZmanShma3HoursBeforeChatzos()\r\n  * @see #getSofZmanTfilaFixedLocal()\r\n  *         \r\n  * @deprecated This method of calculating <em>sof zman Shma</em> is considered a mistaken understanding of the proper\r\n  *         calculation of this <em>zman</em> in the opinion of Rav Yitzchak Silber's <a href=\r\n  *         \"https://www.worldcat.org/oclc/811253716\">Sha'aos Shavos Balalacha</a>. On pages 316-318 he discusses Rav Yisrael\r\n  *         Harfenes's calculations and points to his seeming agreement that using fixed local <em>chatzos</em> as the focal\r\n  *         point is problematic. See Yisrael Vehazmanim <a href=\r\n  *         \"https://hebrewbooks.org/pdfpager.aspx?req=9765&st=&pgnum=85\">page 57</a>. While the Yisrael Vehazmanim mentions\r\n  *         this issue in vol. 1, it was not corrected in the calculations in vol. 3 and other parts of the <em>sefer</em>.\r\n  *         A competent rabbinical authority should be consulted before using this <em>zman</em>. Instead, the use of {@link\r\n  *         #getSofZmanShma3HoursBeforeChatzos()} should be used to calculate <em>sof zman Tfila</em> using 3 fixed clock hours.\r\n  *         This will likely be removed in v3.0.\r\n  */\r\n  public getSofZmanShmaFixedLocal() {\r\n    return this.getFixedLocalChatzos()?.subtract({ minutes: 180 });\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfila</em> (time to recite the morning prayers) calculated as 2 hours\r\n   * before {@link #getFixedLocalChatzos()}. See the documentation on {@link #getSofZmanShmaFixedLocal()} showing\r\n   * differing opinions on how the <em>zman</em> is calculated. According to many opinions {@link\r\n  * #getSofZmanTfila2HoursBeforeChatzos()} should be used as opposed to this <em>zman</em>.\r\n  * \r\n  * @return the <code>Date</code> of the latest <em>zman tfila</em>.\r\n  * @see #getFixedLocalChatzos()\r\n  * @see #getSofZmanShmaFixedLocal()\r\n  * @see #getSofZmanTfila2HoursBeforeChatzos()\r\n  *         \r\n  * @deprecated This method of calculating <em>sof zman Tfila</em> is considered a mistaken understanding of the proper\r\n  *         calculation of this <em>zman</em> in the opinion of Rav Yitzchak Silber's <a href=\r\n  *         \"https://www.worldcat.org/oclc/811253716\">Sha'aos Shavos Balalacha</a>. On pages 316-318 he discusses Rav Yisrael\r\n  *         Harfenes's calculations and points to his seeming agreement that using fixed local <em>chatzos</em> as the focal\r\n  *         point is problematic. See Yisrael Vehazmanim <a href=\r\n  *         \"https://hebrewbooks.org/pdfpager.aspx?req=9765&st=&pgnum=85\">page 57</a>. While the Yisrael Vehazmanim mentions\r\n  *         this issue in vol. 1, it was not corrected in the calculations in vol. 3 and other parts of the <em>sefer</em>.\r\n  *         A competent rabbinical authority should be consulted before using this <em>zman</em>. Instead, the use of {@link\r\n  *         #getSofZmanTfila2HoursBeforeChatzos()} should be used to calculate <em>sof zman Tfila</em> using 2 fixed\r\n  *         clock hours. This will likely be removed in v3.0.\r\n  */\r\n  public getSofZmanTfilaFixedLocal() {\r\n    return this.getFixedLocalChatzos()?.subtract({ minutes: 120 });\r\n  }\r\n\r\n  /**\r\n   * Returns the latest time of <em>Kidush Levana</em> according to the <a\r\n   * href=\"https://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> opinion that it is calculated as\r\n   * halfway between <em>molad</em> and <em>molad</em>. This adds half the 29 days, 12 hours and 793 chalakim time\r\n   * between <em>molad</em> and <em>molad</em> (14 days, 18 hours, 22 minutes and 666 milliseconds) to the month's <em>molad</em>.\r\n   * If the time of <em>sof zman Kiddush Levana</em> occurs during the day (between the <em>alos</em> and <em>tzais</em> passed in\r\n   * as parameters), it returns the <em>alos</em> passed in. If a null <em>alos</em> or <em>tzais</em> are passed to this method,\r\n   * the non-daytime adjusted time will be returned.\r\n   * \r\n   * @param alos\r\n   *            the beginning of the Jewish day. If <em>Kidush Levana</em> occurs during the day (starting at <em>alos</em> and\r\n   *            ending at <em>tzais</em>), the time returned will be <em>alos</em>. If either the <em>alos</em> or <em>tzais</em>\r\n   *            parameters are null, no daytime adjustment will be made.\r\n   * @param tzais\r\n   *            the end of the Jewish day. If Kidush Levana occurs during the day (starting at <em>alos</em> and ending at\r\n   *            <em>tzais</em>), the time returned will be <em>alos</em>. If either the <em>alos</em> or <em>tzais</em> parameter\r\n   *            are null, no daytime adjustment will be made.\r\n   * @return the Date representing the moment halfway between molad and molad. If the time occurs between\r\n   *         <em>alos</em> and <em>tzais</em>, <em>alos</em> will be returned\r\n   * @see #getSofZmanKidushLevanaBetweenMoldos()\r\n   * @see #getSofZmanKidushLevana15Days(Date, Date)\r\n   * @see JewishCalendar#getSofZmanKidushLevanaBetweenMoldos()\r\n   */\r\n  public getSofZmanKidushLevanaBetweenMoldos(alos: Temporal.ZonedDateTime, tzais: Temporal.ZonedDateTime) : Temporal.ZonedDateTime | null {\r\n    const jewishCalendar: JewishCalendar = new JewishCalendar(this.getDate());\r\n    // Do not calculate for impossible dates, but account for extreme cases. In the extreme case of Rapa Iti in French\r\n    // Polynesia on Dec 2027 when kiddush Levana 3 days can be said on <em>Rosh Chodesh</em>, the sof zman Kiddush Levana\r\n    // will be on the 12th of the Teves. In the case of Anadyr, Russia on Jan, 2071, sof zman Kiddush Levana between the\r\n    // moldos will occur is on the night of 17th of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\r\n    if (jewishCalendar.getJewishDayOfMonth() < 11 || jewishCalendar.getJewishDayOfMonth() > 16) { \r\n      return null;\r\n    }\r\n    return this.getMoladBasedTime(jewishCalendar.getSofZmanKidushLevanaBetweenMoldos(), alos, tzais, false);\r\n  }\r\n\r\n  /**\r\n   * Returns the Date of the <em>molad</em> based time if it occurs on the current date. Since <em>Kiddush Levana</em>\r\n   * can only be said during the day, there are parameters to limit it to between <em>alos</em> and <em>tzais</em>. If\r\n   * the time occurs between <em>alos</em> and <em>tzais</em>, <em>tzais</em> will be returned.\r\n   * \r\n   * @param moladBasedTime\r\n   *            the <em>molad</em> based time such as <em>molad</em>, <em>tchilas</em> and <em>sof zman Kiddush Levana</em>\r\n   * @param alos\r\n   *            optional start of day to limit <em>molad</em> times to the end of the night before or beginning of the next night.\r\n   *            Ignored if either <em>alos</em> or <em>tzais</em> are null.\r\n   * @param tzais\r\n   *            optional end of day to limit <em>molad</em> times to the end of the night before or beginning of the next night.\r\n   *            Ignored if either <em>tzais</em> or <em>alos</em> are null\r\n   * @param techila\r\n   *            is it the start of <em>Kiddush Levana</em> time or the end? If it is start roll it to the next <em>tzais</em>, and\r\n   *            and if it is the end, return the end of the previous night (<em>alos</em> passed in). Ignored if either\r\n   *            <em>alos</em> or <em>tzais</em> are null.\r\n   * @return the <em>molad</em> based time. If the <em>zman</em> does not occur during the current date, null will be returned. \r\n   */\r\n  private getMoladBasedTime(moladBasedTime: Temporal.ZonedDateTime, alos: Temporal.ZonedDateTime | null, tzais: Temporal.ZonedDateTime | null, techila: boolean): Temporal.ZonedDateTime | null {\r\n    const lastMidnight: Temporal.ZonedDateTime = this.getMidnightLastNight();\r\n    const midnightTonight: Temporal.ZonedDateTime = this.getMidnightTonight();\r\n\r\n    if (!((moladBasedTime < lastMidnight) || (moladBasedTime > midnightTonight))) {\r\n      if (alos !== null || tzais !== null) {\r\n        return techila && !(moladBasedTime < tzais! || moladBasedTime > alos!)\r\n          ? tzais\r\n          : alos;\r\n      }\r\n      return moladBasedTime;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Returns the latest time of <em>Kiddush Levana</em> calculated as 15 days after the <em>molad</em>. This is the\r\n   * opinion brought down in the Shulchan Aruch (Orach Chaim 426). It should be noted that some opinions hold that the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Moses_Isserles\">Rema</a> who brings down the opinion of the <a\r\n   * href=\"https://en.wikipedia.org/wiki/Yaakov_ben_Moshe_Levi_Moelin\">Maharil's</a> of calculating\r\n   * {@link #getSofZmanKidushLevanaBetweenMoldos(Date, Date) half way between <em>molad</em> and <em>molad</em>} is of\r\n   * the opinion that the Mechaber agrees to his opinion. Also see the Aruch Hashulchan. For additional details on the subject,\r\n   * see Rabbi Dovid Heber's very detailed write-up in <em>Siman Daled</em> (chapter 4) of <a href=\r\n   * \"https://hebrewbooks.org/53000\">Shaarei Zmanim</a>. If the time of <em>sof zman Kiddush Levana</em> occurs during\r\n   * the day (between the <em>alos</em> and <em>tzais</em> passed in as parameters), it returns the <em>alos</em> passed in. If a\r\n   * null <em>alos</em> or <em>tzais</em> are passed to this method, the non-daytime adjusted time will be returned.\r\n   * \r\n   * @param alos\r\n   *            the beginning of the Jewish day. If <em>Kidush Levana</em> occurs during the day (starting at <em>alos</em> and\r\n   *            ending at <em>tzais</em>), the time returned will be <em>alos</em>. If either the <em>alos</em> or <em>tzais</em>\r\n   *            parameters are null, no daytime adjustment will be made.\r\n   * @param tzais\r\n   *            the end of the Jewish day. If <em>Kidush Levana</em> occurs during the day (starting at <em>alos</em> and ending at\r\n   *            <em>tzais</em>), the time returned will be <em>alos</em>. If either the <em>alos</em> or <em>tzais</em> parameters\r\n   *            are null, no daytime adjustment will be made.\r\n   *\r\n   * @return the Date representing the moment 15 days after the molad. If the time occurs between <em>alos</em> and\r\n   *         <em>tzais</em>, <em>alos</em> will be returned\r\n   * \r\n   * @see #getSofZmanKidushLevanaBetweenMoldos(Date, Date)\r\n   * @see JewishCalendar#getSofZmanKidushLevana15Days()\r\n   */\r\n  public getSofZmanKidushLevana15Days(alos: Temporal.ZonedDateTime | null = null, tzais: Temporal.ZonedDateTime | null = null): Temporal.ZonedDateTime | null {\r\n    const jewishCalendar: JewishCalendar = new JewishCalendar(this.getDate());\r\n\r\n    // Do not calculate for impossible dates, but account for extreme cases. In the extreme case of Rapa Iti in\r\n    // French Polynesia on Dec 2027 when kiddush Levana 3 days can be said on <em>Rosh Chodesh</em>, the sof zman Kiddush\r\n    // Levana will be on the 12th of the Teves. in the case of Anadyr, Russia on Jan, 2071, sof zman kiddush levana will\r\n    // occur after midnight on the 17th of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\r\n    if (jewishCalendar.getJewishDayOfMonth() < 11 || jewishCalendar.getJewishDayOfMonth() > 17) {\r\n      return null;\r\n    }\r\n    return this.getMoladBasedTime(jewishCalendar.getSofZmanKidushLevana15Days(), alos, tzais, false);\r\n  }\r\n\r\n  /**\r\n   * Returns the earliest time of <em>Kiddush Levana</em> according to <a href=\r\n   * \"https://en.wikipedia.org/wiki/Yonah_Gerondi\">Rabbeinu Yonah</a>'s opinion that it can be said 3 days after the <em>molad</em>.\r\n   * If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between <em>alos</em> and <em>tzais</em> passed to\r\n   * this method) it will return the following <em>tzais</em>. If null is passed for either <em>alos</em> or <em>tzais</em>, the actual\r\n   * <em>tchilas zman Kiddush Levana</em> will be returned, regardless of if it is during the day or not.\r\n   * \r\n   * @param alos\r\n   *            the beginning of the Jewish day. If Kidush Levana occurs during the day (starting at <em>alos</em> and ending\r\n   *            at <em>tzais</em>), the time returned will be <em>tzais</em>. If either the <em>alos</em> or <em>tzais</em> parameters\r\n   *            are null, no daytime adjustment will be made.\r\n   * @param tzais\r\n   *            the end of the Jewish day. If <em>Kidush Levana</em> occurs during the day (starting at <em>alos</em> and ending at\r\n   *            <em>tzais</em>), the time returned will be <em>tzais</em>. If either the <em>alos</em> or <em>tzais</em> parameters\r\n   *            are null, no daytime adjustment will be made.\r\n   *\r\n   * @return the Date representing the moment 3 days after the molad. If the time occurs between <em>alos</em> and\r\n   *         <em>tzais</em>, <em>tzais</em> will be returned\r\n   * @see #getTchilasZmanKidushLevana3Days()\r\n   * @see #getTchilasZmanKidushLevana7Days(Date, Date)\r\n   * @see JewishCalendar#getTchilasZmanKidushLevana3Days()\r\n   */\r\n  public getTchilasZmanKidushLevana3Days(alos: Temporal.ZonedDateTime | null = null, tzais: Temporal.ZonedDateTime | null = null): Temporal.ZonedDateTime | null {\r\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\r\n    jewishCalendar.setGregorianDate(this.getDate().year, this.getDate().month - 1, this.getDate().day);\r\n\r\n    // Do not calculate for impossible dates, but account for extreme cases. Tchilas zman kiddush Levana 3 days for\r\n    // the extreme case of Rapa Iti in French Polynesia on Dec 2027 when kiddush Levana 3 days can be said on the evening\r\n    // of the 30th, the second night of Rosh Chodesh. The 3rd day after the <em>molad</em> will be on the 4th of the month.\r\n    // In the case of Anadyr, Russia on Jan, 2071, when sof zman kiddush levana is on the 17th of the month, the 3rd day\r\n    // from the molad will be on the 5th day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\r\n    if (jewishCalendar.getJewishDayOfMonth() > 5 && jewishCalendar.getJewishDayOfMonth() < 30) {\r\n      return null;\r\n    }\r\n\r\n    let zman: Temporal.ZonedDateTime | null = this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana3Days(), alos, tzais, true);\r\n\r\n    // Get the following month's zman kiddush Levana for the extreme case of Rapa Iti in French Polynesia on Dec 2027 when\r\n    // kiddush Levana can be said on Rosh Chodesh (the evening of the 30th). See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (page 32)\r\n    if (zman === null && jewishCalendar.getJewishDayOfMonth() === 30) {\r\n      jewishCalendar.forward(Calendar.MONTH, 1);\r\n      zman = this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana3Days(), null, null, true);\r\n    }\r\n\r\n    return zman;\r\n  }\r\n\r\n  /**\r\n   * Returns the point in time of <em>Molad</em> as a <code>Date</code> Object. For the traditional day of week, hour,\r\n   * minute and chalakim, {@link JewishCalendar#getMoladAsDate()} and the not yet completed\r\n   * {@link HebrewDateFormatter} that will have formatting for this.\r\n   * \r\n   * @return the Date representing the moment of the molad. If the molad does not occur on this day, a null will be returned.\r\n   * \r\n   * @see #getTchilasZmanKidushLevana3Days()\r\n   * @see #getTchilasZmanKidushLevana7Days(Date, Date)\r\n   * @see JewishCalendar#getMoladAsDate()\r\n   */\r\n  public getZmanMolad(): Temporal.ZonedDateTime | null {\r\n    const jewishCalendar: JewishCalendar = new JewishCalendar();\r\n    jewishCalendar.setGregorianDate(this.getDate().year, this.getDate().month - 1, this.getDate().day);\r\n\r\n    // Optimize to not calculate for impossible dates, but account for extreme cases. The molad in the extreme case of Rapa\r\n    // Iti in French Polynesia on Dec 2027 occurs on the night of the 27th of Kislev. In the case of Anadyr, Russia on\r\n    // Jan 2071, the molad will be on the 2nd day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\r\n    if (jewishCalendar.getJewishDayOfMonth() > 2 && jewishCalendar.getJewishDayOfMonth() < 27) {\r\n      return null;\r\n    }\r\n\r\n    let molad: Temporal.ZonedDateTime | null = this.getMoladBasedTime(jewishCalendar.getMoladAsDate(), null, null, true);\r\n\r\n    // deal with molad that happens on the end of the previous month\r\n    if (molad === null && jewishCalendar.getJewishDayOfMonth() > 26) {\r\n      jewishCalendar.forward(Calendar.MONTH, 1);\r\n      molad = this.getMoladBasedTime(jewishCalendar.getMoladAsDate(), null, null, true);\r\n    }\r\n    return molad;\r\n  }\r\n\r\n  /**\r\n   * Used by Molad based <em>zmanim</em> to determine if <em>zmanim</em> occur during the current day.\r\n   * @see #getMoladBasedTime(Date, Date, Date, boolean)\r\n   * @return previous midnight\r\n   */\r\n  private getMidnightLastNight(): Temporal.ZonedDateTime {\r\n    // reset hour, minutes, seconds and millis\r\n    return this.getDate().toZonedDateTime(this.getGeoLocation().getTimeZone()).with({\r\n      hour: 0,\r\n      minute: 0,\r\n      second: 0,\r\n      millisecond: 0,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used by Molad based <em>zmanim</em> to determine if <em>zmanim</em> occur during the current day.\r\n   * @see #getMoladBasedTime(Date, Date, Date, boolean)\r\n   * @return following midnight\r\n   */\r\n  private getMidnightTonight(): Temporal.ZonedDateTime {\r\n    return this.getDate().toZonedDateTime(this.getGeoLocation().getTimeZone())\r\n      .add({ days: 1 })\r\n      .with({\r\n        hour: 0,\r\n        minute: 0,\r\n        second: 0,\r\n        millisecond: 0,\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Returns the earliest time of <em>Kiddush Levana</em> according to the opinions that it should not be said until 7\r\n   * days after the <em>molad</em>. If the time of <em>tchilas zman Kiddush Levana</em> occurs during the day (between\r\n   * {@link ZmanimCalendar#getAlos72() <em>alos</em>} and {@link ZmanimCalendar#getTzais72() <em>tzais</em>}) it\r\n   * return the next <em>tzais</em>.\r\n   * \r\n   * @param alos\r\n   *            the beginning of the Jewish day. If <em>Kidush Levana</em> occurs during the day (starting at <em>alos</em>\r\n   *            and ending at <em>tzais</em>), the time returned will be <em>tzais</em>. If either the <em>alos</em> or\r\n   *            <em>tzais</em> parameters are null, no daytime adjustment will be made.\r\n   * @param tzais\r\n   *            the end of the Jewish day. If <em>Kidush Levana</em> occurs during the day (starting at <em>alos</em> and\r\n   *            ending at <em>tzais</em>), the time returned will be <em>tzais</em>. If either the <em>alos</em> or\r\n   *            <em>tzais</em> parameters are null, no daytime adjustment will be made.\r\n   *\r\n   * @return the Date representing the moment 7 days after the molad. If the time occurs between <em>alos</em> and\r\n   *         <em>tzais</em>, <em>tzais</em> will be returned\r\n   * @see #getTchilasZmanKidushLevana3Days(Date, Date)\r\n   * @see #getTchilasZmanKidushLevana7Days()\r\n   * @see JewishCalendar#getTchilasZmanKidushLevana7Days()\r\n   */\r\n  public getTchilasZmanKidushLevana7Days(alos: Temporal.ZonedDateTime | null = null, tzais: Temporal.ZonedDateTime | null = null): Temporal.ZonedDateTime | null {\r\n    const jewishCalendar: JewishCalendar = new JewishCalendar(this.getDate());\r\n\r\n    // Optimize to not calculate for impossible dates, but account for extreme cases. Tchilas zman kiddush Levana 7 days for\r\n    // the extreme case of Rapa Iti in French Polynesia on Jan 2028 (when kiddush Levana 3 days can be said on the evening\r\n    // of the 30th, the second night of Rosh Chodesh), the 7th day after the molad will be on the 4th of the month.\r\n    // In the case of Anadyr, Russia on Jan, 2071, when sof zman kiddush levana is on the 17th of the month, the 7th day\r\n    // from the molad will be on the 9th day of Shevat. See Rabbi Dovid Heber's Shaarei Zmanim chapter 4 (pages 28 and 32).\r\n    if (jewishCalendar.getJewishDayOfMonth() < 4 || jewishCalendar.getJewishDayOfMonth() > 9) {\r\n      return null;\r\n    }\r\n\r\n    return this.getMoladBasedTime(jewishCalendar.getTchilasZmanKidushLevana7Days(), alos, tzais, true);\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest time one is allowed eating <em>chametz</em> on <em>Erev Pesach</em> according to\r\n   * the opinion of the<a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. This time is identical to the {@link\r\n   * #getSofZmanTfilaGRA() <em>Sof zman tfilah</em> GRA} and is provided as a convenience method for those who are\r\n   * unaware how this <em>zman</em> is calculated. This time is 4 hours into the day based on the opinion of the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that the day is calculated from sunrise to sunset.\r\n   * This returns the time 4 * {@link #getShaahZmanisGra()} after {@link #getSeaLevelSunrise() sea level sunrise}.\r\n   * \r\n   * @see ZmanimCalendar#getShaahZmanisGra()\r\n   * @see ZmanimCalendar#getSofZmanTfilaGRA()\r\n   * @return the <code>Date</code> one is allowed eating <em>chametz</em> on <em>Erev Pesach</em>. If the calculation\r\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\r\n   *         not rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getSofZmanAchilasChametzGRA(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfilaGRA();\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest time one is allowed eating <em>chametz</em> on <em>Erev Pesach</em> according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em>\r\n   * being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}. This time is identical to the\r\n   * {@link #getSofZmanTfilaMGA72Minutes() <em>Sof zman tfilah</em> MGA 72 minutes}. This time is 4 {@link #getShaahZmanisMGA()\r\n   * <em>shaos zmaniyos</em>} (temporal hours) after {@link #getAlos72() dawn} based on the opinion of the MGA that the day is\r\n   * calculated from a {@link #getAlos72() dawn} of 72 minutes before sunrise to {@link #getTzais72() nightfall} of 72 minutes\r\n   * after sunset. This returns the time of 4 * {@link #getShaahZmanisMGA()} after {@link #getAlos72() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest time of eating <em>chametz</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set), a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanisMGA()\r\n   * @see #getAlos72()\r\n   * @see #getSofZmanTfilaMGA72Minutes()\r\n   */\r\n  public getSofZmanAchilasChametzMGA72Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfilaMGA72Minutes();\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest time one is allowed eating <em>chametz</em> on <em>Erev Pesach</em> according to the\r\n   * opinion of the<a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em>\r\n   * being {@link #getAlos16Point1Degrees() 16.1&deg;} before {@link #getSunrise() sunrise}. This time is 4 {@link\r\n   * #getShaahZmanis16Point1Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos16Point1Degrees() dawn}\r\n   * based on the opinion of the MGA that the day is calculated from dawn to nightfall with both being 16.1&deg;\r\n   * below sunrise or sunset. This returns the time of 4 {@link #getShaahZmanis16Point1Degrees()} after\r\n   * {@link #getAlos16Point1Degrees() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest time of eating <em>chametz</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle where\r\n   *         the sun may not reach low enough below the horizon for this calculation, a null will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getSofZmanTfilaMGA16Point1Degrees()\r\n   */\r\n  public getSofZmanAchilasChametzMGA16Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfilaMGA16Point1Degrees();\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion\r\n   * of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>. This time is 5 hours into the day based on the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that the day is calculated from\r\n   * sunrise to sunset. This returns the time 5 * {@link #getShaahZmanisGra()} after {@link #getSeaLevelSunrise() sea\r\n   * level sunrise}.\r\n   * \r\n   * @see ZmanimCalendar#getShaahZmanisGra()\r\n   * @return the <code>Date</code> of the latest time for burning <em>chametz</em> on <em>Erev Pesach</em>. If the\r\n   *         calculation can't be computed such as in the Arctic Circle where there is at least one day a year where\r\n   *         the sun does not rise, and one where it does not set, a null will be returned. See detailed explanation on\r\n   *         top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getSofZmanBiurChametzGRA(): Temporal.ZonedDateTime | null {\r\n    return this.getShaahZmanisBasedZman(this.getElevationAdjustedSunrise(), this.getElevationAdjustedSunset(), 5);\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion of\r\n   * the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em>\r\n   * being {@link #getAlos72() 72} minutes before {@link #getSunrise() sunrise}. This time is 5 {@link\r\n   * #getShaahZmanisMGA() <em>shaos zmaniyos</em>} (temporal hours) after {@link #getAlos72() dawn} based on the opinion of\r\n   * the MGA that the day is calculated from a {@link #getAlos72() dawn} of 72 minutes before sunrise to {@link\r\n   * #getTzais72() nightfall} of 72 minutes after sunset. This returns the time of 5 * {@link #getShaahZmanisMGA()} after\r\n   * {@link #getAlos72() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest time for burning <em>chametz</em> on <em>Erev Pesach</em>. If the calculation\r\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n   *         and one where it does not set), a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * @see #getShaahZmanisMGA()\r\n   * @see #getAlos72()\r\n   */\r\n  public getSofZmanBiurChametzMGA72Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getShaahZmanisBasedZman(this.getAlos72()!, this.getTzais72()!, 5);\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion\r\n   * of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> based on <em>alos</em>\r\n   * being {@link #getAlos16Point1Degrees() 16.1&deg;} before {@link #getSunrise() sunrise}. This time is 5\r\n   * {@link #getShaahZmanis16Point1Degrees() <em>shaos zmaniyos</em>} (solar hours) after {@link #getAlos16Point1Degrees()\r\n   * dawn} based on the opinion of the MGA that the day is calculated from dawn to nightfall with both being 16.1&deg;\r\n   * below sunrise or sunset. This returns the time of 5 {@link #getShaahZmanis16Point1Degrees()} after\r\n   * {@link #getAlos16Point1Degrees() dawn}.\r\n   * \r\n   * @return the <code>Date</code> of the latest time for burning <em>chametz</em> on <em>Erev Pesach</em>. If the calculation\r\n   *         can't be computed such as northern and southern locations even south of the Arctic Circle and north of the\r\n   *         Antarctic Circle where the sun may not reach low enough below the horizon for this calculation, a null\r\n   *         will be returned. See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @see #getAlos16Point1Degrees()\r\n   */\r\n  public getSofZmanBiurChametzMGA16Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getShaahZmanisBasedZman(this.getAlos16Point1Degrees(), this.getTzais16Point1Degrees(), 5);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>'s\r\n   * <em>netz amiti</em> (sunrise) without {@link AstronomicalCalculator#getElevationAdjustment(double)\r\n   * elevation adjustment}. This forms the base for the Baal Hatanya's dawn-based calculations that are\r\n   * calculated as a dip below the horizon before sunrise.\r\n   *\r\n   * According to the Baal Hatanya, <em>netz amiti</em>, or true (halachic) sunrise, is when the top of the sun's\r\n   * disk is visible at an elevation similar to the mountains of Eretz Yisrael. The time is calculated as the point at which\r\n   * the center of the sun's disk is 1.583&deg; below the horizon. This degree-based calculation can be found in Rabbi Shalom\r\n   * DovBer Levine's commentary on The <a href=\"https://www.chabadlibrary.org/books/pdf/Seder-Hachnosas-Shabbos.pdf\">Baal\r\n   * Hatanya's Seder Hachnasas Shabbos</a>. From an elevation of 546 meters, the top of <a href=\r\n   * \"https://en.wikipedia.org/wiki/Mount_Carmel\">Har Hacarmel</a>, the sun disappears when it is 1&deg; 35' or 1.583&deg;\r\n   * below the sea level horizon. This in turn is based on the Gemara <a href=\r\n   * \"https://hebrewbooks.org/shas.aspx?mesechta=2&daf=35\">Shabbos 35a</a>. There are other opinions brought down by\r\n   * Rabbi Levine, including Rabbi Yosef Yitzchok Feigelstock who calculates it as the degrees below the horizon 4 minutes after\r\n   * sunset in Yerushalayim (on the equinox). That is brought down as 1.583&deg;. This is identical to the 1&deg; 35' <em>zman</em>\r\n   * and is probably a typo and should be 1.683&deg;. These calculations are used by most <a href=\r\n   * \"https://en.wikipedia.org/wiki/Chabad\">Chabad</a> calendars that use the Baal Hatanya's <em>zmanim</em>. See\r\n   * <a href=\"https://www.chabad.org/library/article_cdo/aid/3209349/jewish/About-Our-Zmanim-Calculations.htm\">About Our\r\n   * <em>Zmanim</em> Calculations @ Chabad.org</a>.\r\n   *\r\n   * Note: <em>netz amiti</em> is used only for calculating certain <em>zmanim</em>, and is intentionally unpublished. For\r\n   * practical purposes, daytime <em>mitzvos</em> like <em>shofar</em> and <em>lulav</em> should not be done until after the\r\n   * published time for <em>netz</em> / sunrise.\r\n   * \r\n   * @return the <code>Date</code> representing the exact sea-level <em>netz amiti</em> (sunrise) time. If the calculation can't be\r\n   *         computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise, and one\r\n   *         where it does not set, a null will be returned. See detailed explanation on top of the page.\r\n   * \r\n   * @see #getSunrise()\r\n   * @see #getSeaLevelSunrise()\r\n   * @see #getSunsetBaalHatanya()\r\n   * @see #ZENITH_1_POINT_583\r\n   */\r\n  private getSunriseBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_1_POINT_583);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>'s\r\n   * <em>shkiah amiti</em> (sunset) without {@link AstronomicalCalculator#getElevationAdjustment(double)\r\n   * elevation adjustment}. This forms the base for the Baal Hatanya's dusk-based calculations that are calculated\r\n   * as a dip below the horizon after sunset.\r\n   * \r\n   * According to the Baal Hatanya, <em>shkiah amiti</em>, true (<em>halachic</em>) sunset, is when the top of the \r\n   * sun's disk disappears from view at an elevation similar to the mountains of <em>Eretz Yisrael</em>.\r\n   * This time is calculated as the point at which the center of the sun's disk is 1.583 degrees below the horizon.\r\n   *\r\n   * Note: <em>shkiah amiti</em> is used only for calculating certain <em>zmanim</em>, and is intentionally unpublished. For\r\n   * practical purposes, all daytime mitzvos should be completed before the published time for <em>shkiah</em> / sunset.\r\n   *\r\n   * For further explanation of the calculations used for the Baal Hatanya's <em>zmanim</em> in this library, see\r\n   * <a href=\"https://www.chabad.org/library/article_cdo/aid/3209349/jewish/About-Our-Zmanim-Calculations.htm\">About Our\r\n   * <em>Zmanim</em> Calculations @ Chabad.org</a>.\r\n   * \r\n   * @return the <code>Date</code> representing the exact sea-level <em>shkiah amiti</em> (sunset) time. If the calculation\r\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does not\r\n   *         rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getSunset()\r\n   * @see #getSeaLevelSunset()\r\n   * @see #getSunriseBaalHatanya()\r\n   * @see #ZENITH_1_POINT_583\r\n   */\r\n  private getSunsetBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_1_POINT_583);\r\n  }\r\n\r\n  /**\r\n   * A method that returns the <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>'s\r\n   * a <em>shaah zmanis</em> ({@link #getTemporalHour(Date, Date) temporal hour}). This forms the base for the\r\n   * Baal Hatanya's  day  based calculations that are calculated as a 1.583&deg; dip below the horizon after sunset. \r\n   * According to the Baal Hatanya, <em>shkiah amiti</em>, true (halachic) sunset, is when the top of the \r\n   * sun's disk disappears from view at an elevation similar to the mountains of Eretz Yisrael.\r\n   * This time is calculated as the point at which the center of the sun's disk is 1.583 degrees below the horizon.\r\n   * A method that returns a <em>shaah zmanis</em> ({@link #getTemporalHour(Date, Date) temporal hour}) calculated \r\n   * based on the <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>'s <em>netz\r\n   * amiti</em> and <em>shkiah amiti</em> using a dip of 1.583&deg; below the sea level horizon. This calculation divides\r\n   * the day based on the opinion of the Baal Hatanya that the day runs from {@link #getSunriseBaalHatanya() netz amiti}\r\n   * to {@link #getSunsetBaalHatanya() <em>shkiah amiti</em>}. The calculations are based on a day from {@link\r\n   * #getSunriseBaalHatanya() sea level <em>netz amiti</em>} to {@link #getSunsetBaalHatanya() sea level <em>shkiah amiti</em>}.\r\n   * The day is split into 12 equal parts with each one being a <em>shaah zmanis</em>. This method is similar to {@link\r\n   * #getTemporalHour}, but all calculations are based on a sea level sunrise and sunset.\r\n   * @return the <code>long</code> millisecond length of a <em>shaah zmanis</em> calculated from\r\n   *         {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)} to {@link #getSunsetBaalHatanya() <em>shkiah amiti</em>\r\n   *         (\"real\" sunset)}. If the calculation can't be computed such as in the Arctic Circle where there is at least one day a\r\n   *         year where the sun does not rise, and one where it does not set, {@link Long#MIN_VALUE} will be returned. See\r\n   *         detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * \r\n   * @see #getTemporalHour(Date, Date)\r\n   * @see #getSunriseBaalHatanya()\r\n   * @see #getSunsetBaalHatanya()\r\n   * @see #ZENITH_1_POINT_583\r\n   */\r\n  public getShaahZmanisBaalHatanya() {\r\n    return this.getTemporalHour(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n  }\r\n\r\n  /**\r\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Shneur_Zalman_of_Liadi\">Baal Hatanya</a>'s <em>alos</em>\r\n   * (dawn) calculated as the time when the sun is 16.9&deg; below the eastern {@link #GEOMETRIC_ZENITH geometric horizon}\r\n   * before {@link #getSunrise sunrise}. For more information the source of 16.9&deg; see {@link #ZENITH_16_POINT_9}.\r\n   * \r\n   * @see #ZENITH_16_POINT_9\r\n   * @return The <code>Date</code> of dawn. If the calculation can't be computed such as northern and southern\r\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n   *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n   *         top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getAlosBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getSunriseOffsetByDegrees(ComplexZmanimCalendar.ZENITH_16_POINT_9);\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman krias shema</em> (time to recite Shema in the morning). This time is 3\r\n   * {@link #getShaahZmanisBaalHatanya() <em>shaos zmaniyos</em>} (solar hours) after {@link #getSunriseBaalHatanya() \r\n   * <em>netz amiti</em> (sunrise)} based on the opinion of the Baal Hatanya that the day is calculated from\r\n   * sunrise to sunset. This returns the time 3 * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya() \r\n   * <em>netz amiti</em> (sunrise)}.\r\n   * \r\n   * @see ZmanimCalendar#getSofZmanShma(Date, Date)\r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @return the <code>Date</code> of the latest <em>zman shema</em> according to the Baal Hatanya. If the calculation\r\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does\r\n   *         not rise, and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getSofZmanShmaBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanShma(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest <em>zman tfilah</em> (time to recite the morning prayers). This time is 4\r\n   * hours into the day based on the opinion of the Baal Hatanya that the day is\r\n   * calculated from sunrise to sunset. This returns the time 4 * {@link #getShaahZmanisBaalHatanya()} after\r\n   * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n   * \r\n   * @see ZmanimCalendar#getSofZmanTfila(Date, Date)\r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @return the <code>Date</code> of the latest <em>zman tfilah</em>. If the calculation can't be computed such as in\r\n   *         the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it does\r\n   *         not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getSofZmanTfilaBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfila(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest time one is allowed eating <em>chametz</em> on <em>Erev Pesach</em> according to the\r\n   * opinion of the Baal Hatanya. This time is identical to the {@link #getSofZmanTfilaBaalHatanya() <em>Sof zman tfilah</em>\r\n   * Baal Hatanya}. This time is 4 hours into the day based on the opinion of the Baal Hatanya that the day is calculated\r\n   * from sunrise to sunset. This returns the time 4 {@link #getShaahZmanisBaalHatanya()} after\r\n   * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n   * \r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @see #getSofZmanTfilaBaalHatanya()\r\n   * @return the <code>Date</code> one is allowed eating <em>chametz</em> on <em>Erev Pesach</em>. If the calculation can't\r\n   *         be computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n   *         and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getSofZmanAchilasChametzBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getSofZmanTfilaBaalHatanya();\r\n  }\r\n\r\n  /**\r\n   * This method returns the latest time for burning <em>chametz</em> on <em>Erev Pesach</em> according to the opinion of\r\n   * the Baal Hatanya. This time is 5 hours into the day based on the opinion of the Baal Hatanya that the day is calculated\r\n   * from sunrise to sunset. This returns the time 5 * {@link #getShaahZmanisBaalHatanya()} after\r\n   * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n   * \r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @return the <code>Date</code> of the latest time for burning <em>chametz</em> on <em>Erev Pesach</em>. If the calculation\r\n   *         can't be computed such as in the Arctic Circle where there is at least one day a year where the sun does not rise,\r\n   *         and one where it does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getSofZmanBiurChametzBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getShaahZmanisBasedZman(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya(), 5)\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>mincha gedola</em>. <em>Mincha gedola</em> is the earliest time one can pray\r\n   * <em>mincha</em>. The <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> is of the opinion that it is\r\n   * better to delay <em>mincha</em> until {@link #getMinchaKetanaBaalHatanya() <em>mincha ketana</em>} while the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Asher_ben_Jehiel\">Ra\"sh</a>,\r\n   * <a href=\"https://en.wikipedia.org/wiki/Jacob_ben_Asher\">Tur</a>, <a href=\r\n   * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> and others are of the opinion that <em>mincha</em> can be prayed\r\n   * <em>lechatchila</em> starting at <em>mincha gedola</em>. This is calculated as 6.5 {@link #getShaahZmanisBaalHatanya()\r\n   * sea level solar hours} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}. This calculation is based\r\n   * on the opinion of the Baal Hatanya that the day is calculated from sunrise to sunset. This returns the time 6.5\r\n   * * {@link #getShaahZmanisBaalHatanya()} after {@link #getSunriseBaalHatanya() <em>netz amiti</em> (\"real\" sunrise)}.\r\n   * \r\n   * @see #getMinchaGedola(Date, Date)\r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @see #getMinchaKetanaBaalHatanya()\r\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getMinchaGedolaBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getMinchaGedola(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n  }\r\n\r\n  /**\r\n   * This is a convenience method that returns the later of {@link #getMinchaGedolaBaalHatanya()} and\r\n   * {@link #getMinchaGedola30Minutes()}. In the winter when 1/2 of a {@link #getShaahZmanisBaalHatanya()\r\n   * <em>shaah zmanis</em>} is less than 30 minutes {@link #getMinchaGedola30Minutes()} will be returned, otherwise\r\n   * {@link #getMinchaGedolaBaalHatanya()} will be returned.\r\n   * \r\n   * @return the <code>Date</code> of the later of {@link #getMinchaGedolaBaalHatanya()} and {@link #getMinchaGedola30Minutes()}.\r\n   *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\r\n   *         where the sun does not rise, and one where it does not set, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getMinchaGedolaBaalHatanyaGreaterThan30(): Temporal.ZonedDateTime | null {\r\n    if (this.getMinchaGedola30Minutes() === null || this.getMinchaGedolaBaalHatanya() === null) {\r\n      return null;\r\n    }\r\n\r\n    return [\r\n      this.getMinchaGedola30Minutes()!,\r\n      this.getMinchaGedolaBaalHatanya()!\r\n    ].sort(Temporal.ZonedDateTime.compare).at(-1)!;\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>mincha ketana</em>. This is the preferred earliest time to pray\r\n   * <em>mincha</em> in the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others.\r\n   * For more information on this see the documentation on {@link #getMinchaGedolaBaalHatanya() <em>mincha gedola</em>}.\r\n   * This is calculated as 9.5 {@link #getShaahZmanisBaalHatanya()  sea level solar hours} after {@link #getSunriseBaalHatanya()\r\n   * <em>netz amiti</em> (sunrise)}. This calculation is calculated based on the opinion of the Baal Hatanya that the\r\n   * day is calculated from sunrise to sunset. This returns the time 9.5 * {@link #getShaahZmanisBaalHatanya()} after {@link\r\n   * #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n   * \r\n   * @see #getMinchaKetana(Date, Date)\r\n   * @see #getShaahZmanisBaalHatanya()\r\n   * @see #getMinchaGedolaBaalHatanya()\r\n   * @return the <code>Date</code> of the time of <em>mincha ketana</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getMinchaKetanaBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getMinchaKetana(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n  }\r\n\r\n  /**\r\n   * This method returns the time of <em>plag hamincha</em>. This is calculated as 10.75 hours after sunrise. This\r\n   * calculation is based on the opinion of the Baal Hatanya that the day is calculated\r\n   * from sunrise to sunset. This returns the time 10.75 * {@link #getShaahZmanisBaalHatanya()} after\r\n   * {@link #getSunriseBaalHatanya() <em>netz amiti</em> (sunrise)}.\r\n   * \r\n   * @see #getPlagHamincha(Date, Date)\r\n   * @return the <code>Date</code> of the time of <em>plag hamincha</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the\r\n   *         {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getPlagHaminchaBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getPlagHamincha(this.getSunriseBaalHatanya(), this.getSunsetBaalHatanya());\r\n  }\r\n\r\n  /**\r\n   * A method that returns <em>tzais</em> (nightfall) when the sun is 6&deg; below the western geometric horizon\r\n   * (90&deg;) after {@link #getSunset sunset}. For information on the source of this calculation see\r\n   * {@link #ZENITH_6_DEGREES}.\r\n   *\r\n   * @return The <code>Date</code> of nightfall. If the calculation can't be computed such as northern and southern\r\n   *         locations even south of the Arctic Circle and north of the Antarctic Circle where the sun may not reach\r\n   *         low enough below the horizon for this calculation, a null will be returned. See detailed explanation on\r\n   *         top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #ZENITH_6_DEGREES\r\n   */\r\n  public getTzaisBaalHatanya(): Temporal.ZonedDateTime | null {\r\n    return this.getSunsetOffsetByDegrees(ComplexZmanimCalendar.ZENITH_6_DEGREES);\r\n  }\r\n\r\n  /**\r\n   * A utility methos to calculate zmanim based on <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe\r\n   * Feinstein</a> as calculated in <a href=\"https://en.wikipedia.org/wiki/Mesivtha_Tifereth_Jerusalem\">MTJ</a>, <a href=\r\n   * \"https://en.wikipedia.org/wiki/Mesivtha_Tifereth_Jerusalem\">Yeshiva of Staten Island</a>, and Camp Yeshiva\r\n   * of Staten Island. The day is split in two, from <em>alos</em> / sunrise to fixed local <em>chatzos</em>, and the\r\n   * second half of the day, from fixed local <em>chatzos</em> to sunset / <em>tzais</em>. Morning based times are calculated\r\n   * based on the first 6 hours, and afternoon times based on the second half of the day.\r\n   * \r\n   * @param startOfHalfDay\r\n   *            The start of the half day. This would be <em>alos</em> or sunrise for morning based times and fixed\r\n   *            local <em>chatzos</em> for the second half of the day.\r\n   * @param endOfHalfDay\r\n   *            The end of the half day. This would be fixed local <em>chatzos</em> for morning based times and sunset\r\n   *            or <em>tzais</em> for afternoon based times.\r\n   * @param hours\r\n   *            the number of hours to offset the beginning of the first or second half of the day\r\n   * \r\n   * @return the <code>Date</code> of the later of {@link #getMinchaGedolaBaalHatanya()} and {@link #getMinchaGedola30Minutes()}.\r\n   *         If the calculation can't be computed such as in the Arctic Circle where there is at least one day a year\r\n   *         where the sun does not rise, and one where it does not set, a null will be returned. See detailed\r\n   *         explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   *\r\n   * @see ComplexZmanimCalendar#getFixedLocalChatzos()\r\n   */\r\n  public getFixedLocalChatzosBasedZmanim(startOfHalfDay: Temporal.ZonedDateTime, endOfHalfDay: Temporal.ZonedDateTime, hours: number): Temporal.ZonedDateTime | null {\r\n    if (startOfHalfDay == null || endOfHalfDay == null) {\r\n      return null;\r\n    }\r\n    const shaahZmanis = (endOfHalfDay.valueOf() - startOfHalfDay.valueOf()) / 6;\r\n    return startOfHalfDay.add({ milliseconds: shaahZmanis * hours });\r\n  }\r\n  \r\n  /**\r\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\r\n   * calculation of <em>sof zman krias shema</em> (latest time to recite <em>Shema</em> in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> that the\r\n   * day is calculated from dawn to nightfall, but calculated using the first half of the day only. The half a day starts\r\n   * at <em>alos</em> defined as {@link #getAlos18Degrees() 18&deg;} and ends at {@link #getFixedLocalChatzos() fixed local\r\n   * chatzos}. <em>Sof Zman Shema</em> is 3 <em>shaos zmaniyos</em> (solar hours) after <em>alos</em> or half of this half-day.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos18Degrees()\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getFixedLocalChatzosBasedZmanim(Date, Date, double)\r\n   */\r\n  public getSofZmanShmaMGA18DegreesToFixedLocalChatzos(): Temporal.ZonedDateTime | null {\r\n    return this.getFixedLocalChatzosBasedZmanim(this.getAlos18Degrees()!, this.getFixedLocalChatzos()!, 3);\r\n  }\r\n  \r\n  /**\r\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\r\n   * calculation of <em>sof zman krias shema</em> (latest time to recite <em>Shema</em> in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> that the\r\n   * day is calculated from dawn to nightfall, but calculated using the first half of the day only. The half a day starts\r\n   * at <em>alos</em> defined as {@link #getAlos16Point1Degrees() 16.1&deg;} and ends at {@link #getFixedLocalChatzos() fixed local\r\n   * chatzos}. <em>Sof Zman Shema</em> is 3 <em>shaos zmaniyos</em> (solar hours) after this <em>alos</em> or half of this half-day.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos16Point1Degrees()\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getFixedLocalChatzosBasedZmanim(Date, Date, double)\r\n   */\r\n  public getSofZmanShmaMGA16Point1DegreesToFixedLocalChatzos(): Temporal.ZonedDateTime | null {\r\n    return this.getFixedLocalChatzosBasedZmanim(this.getAlos16Point1Degrees()!, this.getFixedLocalChatzos()!, 3);\r\n  }\r\n  \r\n  /**\r\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\r\n   * calculation of <em>sof zman krias shema</em> (latest time to recite <em>Shema</em> in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> that the\r\n   * day is calculated from dawn to nightfall, but calculated using the first half of the day only. The half a day starts\r\n   * at <em>alos</em> defined as {@link #getAlos90() 90 minutes before sunrise} and ends at {@link #getFixedLocalChatzos()\r\n   * fixed local chatzos}. <em>Sof Zman Shema</em> is 3 <em>shaos zmaniyos</em> (solar hours) after this <em>alos</em> or\r\n   * half of this half-day.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos90()\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getFixedLocalChatzosBasedZmanim(Date, Date, double)\r\n   */\r\n  public getSofZmanShmaMGA90MinutesToFixedLocalChatzos(): Temporal.ZonedDateTime | null {\r\n    return this.getFixedLocalChatzosBasedZmanim(this.getAlos90()!, this.getFixedLocalChatzos()!, 3);\r\n  }\r\n  \r\n  /**\r\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\r\n   * calculation of <em>sof zman krias shema</em> (latest time to recite <em>Shema</em> in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Avraham_Gombinern\">Magen Avraham (MGA)</a> that the\r\n   * day is calculated from dawn to nightfall, but calculated using the first half of the day only. The half a day starts\r\n   * at <em>alos</em> defined as {@link #getAlos72() 72 minutes before sunrise} and ends at {@link #getFixedLocalChatzos()\r\n   * fixed local chatzos}. <em>Sof Zman Shema</em> is 3 <em>shaos zmaniyos</em> (solar hours) after this <em>alos</em> or\r\n   * half of this half-day.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getAlos72()\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getFixedLocalChatzosBasedZmanim(Date, Date, double)\r\n   */\r\n  public getSofZmanShmaMGA72MinutesToFixedLocalChatzos(): Temporal.ZonedDateTime | null {\r\n    return this.getFixedLocalChatzosBasedZmanim(this.getAlos72()!, this.getFixedLocalChatzos()!, 3);\r\n  }\r\n    \r\n  /**\r\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\r\n   * calculation of <em>sof zman krias shema</em> (latest time to recite <em>Shema</em> in the morning) according to the\r\n   * opinion of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that the day is calculated from\r\n   * sunrise to sunset, but calculated using the first half of the day only. The half a day starts at {@link #getSunrise()\r\n   * sunrise} and ends at {@link #getFixedLocalChatzos() fixed local chatzos}. <em>Sof zman Shema</em> is 3 <em>shaos\r\n   * zmaniyos</em> (solar hours) after sunrise or half of this half-day.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getSunrise()\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getFixedLocalChatzosBasedZmanim(Date, Date, double)\r\n   */\r\n  public getSofZmanShmaGRASunriseToFixedLocalChatzos(): Temporal.ZonedDateTime | null {\r\n    return this.getFixedLocalChatzosBasedZmanim(this.getSunrise()!, this.getFixedLocalChatzos()!, 3);\r\n  }\r\n  \r\n  /**\r\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of the\r\n   * calculation of <em>sof zman tfila</em> (<em>zman tfilah</em> (the latest time to recite the morning prayers))\r\n   * according to the opinion of the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that the day is\r\n   * calculated from sunrise to sunset, but calculated using the first half of the day only. The half a day starts at\r\n   * {@link #getSunrise() sunrise} and ends at {@link #getFixedLocalChatzos() fixed local chatzos}. <em>Sof zman tefila</em>\r\n   * is 4 <em>shaos zmaniyos</em> (solar hours) after sunrise or 2/3 of this half-day.\r\n   * \r\n   * @return the <code>Date</code> of the latest <em>zman krias shema</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   * @see #getSunrise()\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getFixedLocalChatzosBasedZmanim(Date, Date, double)\r\n   */\r\n  public getSofZmanTfilaGRASunriseToFixedLocalChatzos(): Temporal.ZonedDateTime | null {\r\n    return this.getFixedLocalChatzosBasedZmanim(this.getSunrise()!, this.getFixedLocalChatzos()!, 4);\r\n  }\r\n  \r\n  /**\r\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion of\r\n   * the calculation of <em>mincha gedola</em>, the earliest time one can pray <em>mincha</em> <a href=\r\n   * \"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a>that is 30 minutes after {@link #getFixedLocalChatzos() fixed\r\n   * local chatzos}.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   * \r\n   * @see #getMinchaGedola()\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getMinchaKetanaGRAFixedLocalChatzosToSunset\r\n   */\r\n  public getMinchaGedolaGRAFixedLocalChatzos30Minutes() {\r\n    return this.getFixedLocalChatzos()?.add({ minutes: 30 });\r\n  }\r\n  \r\n  /**\r\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion\r\n   * of the calculation of <em>mincha ketana</em> (the preferred time to recite the <em>mincha prayers</em> according to\r\n   * the opinion of the <a href=\"https://en.wikipedia.org/wiki/Maimonides\">Rambam</a> and others) calculated according\r\n   * to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that is 3.5 <em>shaos zmaniyos</em> (solar\r\n   * hours) after {@link #getFixedLocalChatzos() fixed local chatzos}.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   *         \r\n   * @see #getMinchaGedola()\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getMinchaGedolaGRAFixedLocalChatzos30Minutes\r\n   */\r\n  public getMinchaKetanaGRAFixedLocalChatzosToSunset(): Temporal.ZonedDateTime | null {\r\n    return this.getFixedLocalChatzosBasedZmanim(this.getFixedLocalChatzos()!, this.getSunset()!, 3.5);\r\n  }\r\n  \r\n  /**\r\n   * This method returns <a href=\"https://en.wikipedia.org/wiki/Moshe_Feinstein\">Rav Moshe Feinstein's</a> opinion\r\n   * of the calculation of <em>plag hamincha</em>. This method returns <em>plag hamincha</em> calculated according to the\r\n   * <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> that the day ends at sunset and is 4.75 <em>shaos\r\n   * zmaniyos</em> (solar hours) after {@link #getFixedLocalChatzos() fixed local chatzos}.\r\n   * \r\n   * @return the <code>Date</code> of the time of <em>mincha gedola</em>. If the calculation can't be computed such as\r\n   *         in the Arctic Circle where there is at least one day a year where the sun does not rise, and one where it\r\n   *         does not set, a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   *         \r\n   * @see #getPlagHamincha()\r\n   * @see #getFixedLocalChatzos()\r\n   * @see #getMinchaKetanaGRAFixedLocalChatzosToSunset\r\n   * @see #getMinchaGedolaGRAFixedLocalChatzos30Minutes\r\n   */\r\n  public getPlagHaminchaGRAFixedLocalChatzosToSunset(): Temporal.ZonedDateTime | null {\r\n    return this.getFixedLocalChatzosBasedZmanim(this.getFixedLocalChatzos()!, this.getSunset()!, 4.75);\r\n  }\r\n  \r\n  /**\r\n   * Method to return <em>tzais</em> (dusk) calculated as 50 minutes after sea level sunset. This method returns\r\n   * <em>tzais</em> (nightfall) based on the opinion of Rabbi Moshe Feinstein for the New York area. This time should\r\n   * not be used for latitudes different than the NY area.\r\n   * \r\n   * @return the <code>Date</code> representing the time. If the calculation can't be computed such as in the Arctic\r\n   *         Circle where there is at least one day a year where the sun does not rise, and one where it does not set,\r\n   *         a null will be returned. See detailed explanation on top of the {@link AstronomicalCalendar}\r\n   *         documentation.\r\n   */\r\n  public getTzais50() {\r\n    return this.getElevationAdjustedSunset()?.add({ minutes: 50 });\r\n  }\r\n  \r\n  /**\r\n   * A method for calculating <em>samuch lemincha ketana</em>, / near <em>mincha ketana</em> time that is half an hour before\r\n   * {@link #getMinchaKetana()} or is 9 * {@link #getShaahZmanisGra() <em>shaos zmaniyos</em>} (solar hours) after {@link\r\n   * #getSunrise() sunrise} or {@link #getSeaLevelSunrise() sea level sunrise} (depending on the {@link #isUseElevation()}\r\n   * setting), calculated according to the <a href=\"https://en.wikipedia.org/wiki/Vilna_Gaon\">GRA</a> using a day starting at\r\n   * sunrise and ending at sunset. This is the time that eating or other activity can't begin prior to praying <em>mincha</em>.\r\n   * The calculation used is 9 * {@link #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() <em>alos</em>\r\n   * 16.1&deg;}. See the <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=60387&st=&pgnum=294\">Mechaber and Mishna Berurah\r\n   * 232</a> for details.\r\n   * \r\n   * @see #getShaahZmanisGra()\r\n   * @see #getSamuchLeMinchaKetana16Point1Degrees()\r\n   * @return the <code>Date</code> of the time of <em>samuch lemincha ketana</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getSamuchLeMinchaKetanaGRA(): Temporal.ZonedDateTime | null {\r\n    return this.getSamuchLeMinchaKetana(this.getElevationAdjustedSunrise()!, this.getElevationAdjustedSunset()!);\r\n  }\r\n  \r\n  /**\r\n   * A method for calculating <em>samuch lemincha ketana</em>, / near <em>mincha ketana</em> time that is half an hour before\r\n   * {@link #getMinchaGedola16Point1Degrees()}  or 9 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day,\r\n   * calculated using a day starting and ending 16.1&deg; below the horizon. This is the time that eating or other activity\r\n   * can't begin prior to praying <em>mincha</em>. The calculation used is 9 * {@link #getShaahZmanis16Point1Degrees()} after\r\n   * {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;}. See the <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=60387&st=&pgnum=294\">Mechaber and Mishna Berurah 232</a>.\r\n   * \r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @return the <code>Date</code> of the time of <em>samuch lemincha ketana</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getSamuchLeMinchaKetana16Point1Degrees(): Temporal.ZonedDateTime | null {\r\n    return this.getSamuchLeMinchaKetana(this.getAlos16Point1Degrees()!, this.getTzais16Point1Degrees()!);\r\n  }\r\n  \r\n  /**\r\n   * A method for calculating <em>samuch lemincha ketana</em>, / near <em>mincha ketana</em> time that is half an hour before\r\n   * {@link #getMinchaKetana72Minutes()}  or 9 * <em>shaos zmaniyos</em> (temporal hours) after the start of the day,\r\n   * calculated using a day starting 72 minutes before sunrise and ending 72 minutes after sunset. This is the time that eating\r\n   * or other activity can't begin prior to praying <em>mincha</em>. The calculation used is 9 * {@link\r\n   * #getShaahZmanis16Point1Degrees()} after {@link #getAlos16Point1Degrees() <em>alos</em> 16.1&deg;}. See the <a href=\r\n   * \"https://hebrewbooks.org/pdfpager.aspx?req=60387&st=&pgnum=294\">Mechaber and Mishna Berurah 232</a>.\r\n   * \r\n   * @see #getShaahZmanis16Point1Degrees()\r\n   * @return the <code>Date</code> of the time of <em>samuch lemincha ketana</em>. If the calculation can't be computed such\r\n   *         as northern and southern locations even south of the Arctic Circle and north of the Antarctic Circle\r\n   *         where the sun may not reach low enough below the horizon for this calculation, a null will be returned.\r\n   *         See detailed explanation on top of the {@link AstronomicalCalendar} documentation.\r\n   */\r\n  public getSamuchLeMinchaKetana72Minutes(): Temporal.ZonedDateTime | null {\r\n    return this.getSamuchLeMinchaKetana(this.getAlos72()!, this.getTzais72()!);\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public getClassName() {\r\n    return 'com.kosherjava.zmanim.ComplexZmanimCalendar';\r\n  }\r\n}\r\n","import { UnsupportedError } from '../polyfills/errors';\r\n\r\n/**\r\n * A class that represents a numeric time. Times that represent a time of day are stored as {@link java.util.Date}s in\r\n * this API. The time class is used to represent numeric time such as the time in hours, minutes, seconds and\r\n * milliseconds of a {@link AstronomicalCalendar#getTemporalHour() temporal hour}.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2011\r\n * @version 0.9.0\r\n */\r\n\r\nexport class Time {\r\n  /** milliseconds in a second. */\r\n  private static readonly SECOND_MILLIS: number = 1000;\r\n\r\n  /** milliseconds in a minute. */\r\n  private static readonly MINUTE_MILLIS: number = Time.SECOND_MILLIS * 60;\r\n\r\n  /** milliseconds in an hour. */\r\n  private static readonly HOUR_MILLIS: number = Time.MINUTE_MILLIS * 60;\r\n\r\n  /**\r\n   * @see #getHours()\r\n   */\r\n  private hours: number = 0;\r\n\r\n  /**\r\n   * @see #getMinutes()\r\n   */\r\n  private minutes: number = 0;\r\n\r\n  /**\r\n   * @see #getSeconds()\r\n   */\r\n  private seconds: number = 0;\r\n\r\n  /**\r\n   * @see #getMilliseconds()\r\n   */\r\n  private milliseconds: number = 0;\r\n\r\n  /**\r\n   * @see #isNegative()\r\n   * @see #setIsNegative(boolean)\r\n   */\r\n  private negative: boolean = false;\r\n\r\n  /**\r\n   * Constructor with parameters for the hours, minutes, seconds and millisecods.\r\n   *\r\n   * @param hours the hours to set\r\n   * @param minutes the minutes to set\r\n   * @param seconds the seconds to set\r\n   * @param milliseconds the milliseconds to set\r\n   */\r\n  constructor(hours: number, minutes: number, seconds: number, milliseconds: number);\r\n  /**\r\n   * A constructor that sets the time by milliseconds. The milliseconds are converted to hours, minutes, seconds\r\n   * and milliseconds. If the milliseconds are negative it will call {@link #setIsNegative(boolean)}.\r\n   * @param millis the milliseconds to set.\r\n   */\r\n  constructor(millis: number);\r\n  /**\r\n   * A constructor with 2 overloads:\r\n   * - A constructor that sets the time by milliseconds.\r\n   *   The milliseconds are converted to hours, minutes, seconds and milliseconds. If the\r\n   *   milliseconds are negative it will call {@link #setIsNegative(boolean)}.\r\n   * - A constructor with parameters for the hours, minutes, seconds and millisecods.\r\n   * @param hoursOrMillis\r\n   * @param minutes\r\n   * @param seconds\r\n   * @param milliseconds\r\n   */\r\n  constructor(hoursOrMillis: number, minutes?: number, seconds: number = 0, milliseconds: number = 0) {\r\n    if (minutes) {\r\n      this.hours = hoursOrMillis;\r\n      this.minutes = minutes;\r\n      this.seconds = seconds;\r\n      this.milliseconds = milliseconds;\r\n    } else {\r\n      let adjustedMillis: number = hoursOrMillis;\r\n      if (adjustedMillis < 0) {\r\n        this.negative = true;\r\n        adjustedMillis = Math.abs(adjustedMillis);\r\n      }\r\n      this.hours = Math.trunc(adjustedMillis / Time.HOUR_MILLIS);\r\n      adjustedMillis = adjustedMillis - this.hours * Time.HOUR_MILLIS;\r\n\r\n      this.minutes = Math.trunc(adjustedMillis / Time.MINUTE_MILLIS);\r\n      adjustedMillis = adjustedMillis - this.minutes * Time.MINUTE_MILLIS;\r\n\r\n      this.seconds = Math.trunc(adjustedMillis / Time.SECOND_MILLIS);\r\n      adjustedMillis = adjustedMillis - this.seconds * Time.SECOND_MILLIS;\r\n\r\n      this.milliseconds = adjustedMillis;\r\n    }\r\n  }\r\n\r\n  /*\r\n      public Time(millis: number) {\r\n          this((int) millis);\r\n      }\r\n\r\n      public Time(millis: number) {\r\n          adjustedMillis: number = millis;\r\n          if (adjustedMillis < 0) {\r\n              this.isNegative = true;\r\n              adjustedMillis = Math.abs(adjustedMillis);\r\n          }\r\n          this.hours = adjustedMillis / HOUR_MILLIS;\r\n          adjustedMillis = adjustedMillis - this.hours * HOUR_MILLIS;\r\n\r\n          this.minutes = adjustedMillis / MINUTE_MILLIS;\r\n          adjustedMillis = adjustedMillis - this.minutes * MINUTE_MILLIS;\r\n\r\n          this.seconds = adjustedMillis / SECOND_MILLIS;\r\n          adjustedMillis = adjustedMillis - this.seconds * SECOND_MILLIS;\r\n\r\n          this.milliseconds = adjustedMillis;\r\n      }\r\n  */\r\n\r\n  /**\r\n   * Does the time represent a negative time 9such as using this to subtract time from another Time.\r\n   * @return if the time is negative.\r\n   */\r\n  public isNegative(): boolean {\r\n    return this.negative;\r\n  }\r\n\r\n  /**\r\n   * Set this to represent a negative time.\r\n   * @param isNegative that the Time represents negative time\r\n   */\r\n  public setIsNegative(isNegative: boolean): void {\r\n    this.negative = isNegative;\r\n  }\r\n\r\n  /**\r\n   * @return Returns the hour.\r\n   */\r\n  public getHours(): number {\r\n    return this.hours;\r\n  }\r\n\r\n  /**\r\n   * @param hours\r\n   *            The hours to set.\r\n   */\r\n  public setHours(hours: number): void {\r\n    this.hours = hours;\r\n  }\r\n\r\n  /**\r\n   * @return Returns the minutes.\r\n   */\r\n  public getMinutes(): number {\r\n    return this.minutes;\r\n  }\r\n\r\n  /**\r\n   * @param minutes\r\n   *            The minutes to set.\r\n   */\r\n  public setMinutes(minutes: number): void {\r\n    this.minutes = minutes;\r\n  }\r\n\r\n  /**\r\n   * @return Returns the seconds.\r\n   */\r\n  public getSeconds(): number {\r\n    return this.seconds;\r\n  }\r\n\r\n  /**\r\n   * @param seconds\r\n   *            The seconds to set.\r\n   */\r\n  public setSeconds(seconds: number): void {\r\n    this.seconds = seconds;\r\n  }\r\n\r\n  /**\r\n   * @return Returns the milliseconds.\r\n   */\r\n  public getMilliseconds(): number {\r\n    return this.milliseconds;\r\n  }\r\n\r\n  /**\r\n   * @param milliseconds\r\n   *            The milliseconds to set.\r\n   */\r\n  public setMilliseconds(milliseconds: number): void {\r\n    this.milliseconds = milliseconds;\r\n  }\r\n\r\n  /**\r\n   * Returns the time in milliseconds by converting hours, minutes and seconds into milliseconds.\r\n   * @return the time in milliseconds\r\n   */\r\n  public getTime(): number {\r\n    return this.hours * Time.HOUR_MILLIS + this.minutes * Time.MINUTE_MILLIS + this.seconds * Time.SECOND_MILLIS\r\n      + this.milliseconds;\r\n  }\r\n\r\n  /**\r\n   * @deprecated This depends on a circular dependency. Use <pre>new ZmanimFormatter(TimeZone.getTimeZone(\"UTC\")).format(time)</pre> instead.\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public toString(): string {\r\n    throw new UnsupportedError('This method is deprecated, due to the fact that it depends on a circular dependency. '\r\n      + 'Use `new ZmanimFormatter(TimeZone.getTimeZone(\\'UTC\\')).format(time)` instead');\r\n  }\r\n}\r\n","import { Temporal } from 'temporal-polyfill'\r\n\r\nimport { IntegerUtils, StringUtils } from '../polyfills/Utils';\r\n\r\n/**\r\n * A wrapper class for a astronomical times / <em>zmanim</em> that is mostly intended to allow sorting collections of astronomical times.\r\n * It has fields for both date/time and duration based <em>zmanim</em>, name / labels as well as a longer description or explanation of a\r\n * <em>zman</em>.\r\n *\r\n * Here is an example of various ways of sorting <em>zmanim</em>.\r\n * <p>First create the Calendar for the location you would like to calculate:\r\n *\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * String locationName = &quot;Lakewood, NJ&quot;;\r\n * double latitude = 40.0828; // Lakewood, NJ\r\n * double longitude = -74.2094; // Lakewood, NJ\r\n * double elevation = 20; // optional elevation correction in Meters\r\n * // the String parameter in getTimeZone() has to be a valid timezone listed in {@link java.util.TimeZone#getAvailableIDs()}\r\n * TimeZone timeZone = TimeZone.getTimeZone(&quot;America/New_York&quot;);\r\n * GeoLocation location = new GeoLocation(locationName, latitude, longitude, elevation, timeZone);\r\n * ComplexZmanimCalendar czc = new ComplexZmanimCalendar(location);\r\n * Zman sunset = new Zman(czc.getSunset(), \"Sunset\");\r\n * Zman shaah16 = new Zman(czc.getShaahZmanis16Point1Degrees(), \"Shaah zmanis 16.1\");\r\n * Zman sunrise = new Zman(czc.getSunrise(), \"Sunrise\");\r\n * Zman shaah = new Zman(czc.getShaahZmanisGra(), \"Shaah zmanis GRA\");\r\n * ArrayList&lt;Zman&gt; zl = new ArrayList&lt;Zman&gt;();\r\n * zl.add(sunset);\r\n * zl.add(shaah16);\r\n * zl.add(sunrise);\r\n * zl.add(shaah);\r\n * //will sort sunset, shaah 1.6, sunrise, shaah GRA\r\n * System.out.println(zl);\r\n * Collections.sort(zl, Zman.DATE_ORDER);\r\n * // will sort sunrise, sunset, shaah, shaah 1.6 (the last 2 are not in any specific order)\r\n * Collections.sort(zl, Zman.DURATION_ORDER);\r\n * // will sort sunrise, sunset (the first 2 are not in any specific order), shaah GRA, shaah 1.6\r\n * Collections.sort(zl, Zman.NAME_ORDER);\r\n * // will sort shaah 1.6, shaah GRA, sunrise, sunset\r\n * </pre>\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2007-2020\r\n * @todo Add secondary sorting. As of now the {@code Comparator}s in this class do not sort by secondary order. This means that when sorting a\r\n * {@link java.util.Collection} of <em>zmanim</em> and using the {@link #DATE_ORDER} {@code Comparator} will have the duration based <em>zmanim</em>\r\n * at the end, but they will not be sorted by duration. This should be N/A for label based sorting.\r\n */\r\nexport class Zman {\r\n  /**\r\n   * The name / label of the <em>zman</em>.\r\n   */\r\n  label: string | null;\r\n\r\n  /**\r\n   * The {@link Date} of the <em>zman</em>\r\n   */\r\n  zman?: Temporal.ZonedDateTime;\r\n\r\n  /**\r\n   * The duration if the <em>zman</em> is  a {@link AstronomicalCalendar#getTemporalHour() temporal hour} (or the various\r\n   * <em>shaah zmanis</em> base times such as {@link ZmanimCalendar#getShaahZmanisGra()  <em>shaah Zmanis GRA</em>} or\r\n   * {@link ComplexZmanimCalendar#getShaahZmanis16Point1Degrees() <em>shaah Zmanis 16.1&deg;</em>}).\r\n   */\r\n  duration?: number;\r\n\r\n  /**\r\n   * A longer description or explanation of a <em>zman</em>.\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n   * The constructor setting a {@link Date} based <em>zman</em> and a label.\r\n   * @param date the Date of the <em>zman</em>.\r\n   * @param label the label of the  <em>zman</em> such as \"<em>Sof Zman Krias Shema GRA</em>\".\r\n   * @see #Zman(long, String)\r\n   */\r\n  constructor(date: Temporal.ZonedDateTime, label: string | null);\r\n  /**\r\n   * The constructor setting a duration based <em>zman</em> such as\r\n   * {@link AstronomicalCalendar#getTemporalHour() temporal hour} (or the various <em>shaah zmanis</em> times such as\r\n   * {@link ZmanimCalendar#getShaahZmanisGra() <em>shaah zmanis GRA</em>} or\r\n   * {@link ComplexZmanimCalendar#getShaahZmanis16Point1Degrees() <em>shaah Zmanis 16.1&deg;</em>}) and label.\r\n   * @param duration a duration based <em>zman</em> such as ({@link AstronomicalCalendar#getTemporalHour()}\r\n   * @param label the label of the  <em>zman</em> such as \"<em>Shaah Zmanis GRA</em>\".\r\n   * @see #Zman(Date, String)\r\n   */\r\n  constructor(duration: number, label: string | null);\r\n  constructor(dateOrDuration: number | Temporal.ZonedDateTime, label: string | null) {\r\n    this.label = label;\r\n    if (dateOrDuration instanceof Temporal.ZonedDateTime) {\r\n      this.zman = dateOrDuration;\r\n    } else if (typeof dateOrDuration === 'number') {\r\n      this.duration = dateOrDuration;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A {@link Comparator} that will compare and sort <em>zmanim</em> by date/time order. Compares its two arguments by the zman's date/time\r\n   * order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater\r\n   * than the second.\r\n   * Please note that this class will handle cases where either the {@code Zman} is a null or {@link #getZman()} returns a null.\r\n   */\r\n  static compareDateOrder(zman1: Zman, zman2: Zman): number {\r\n    const times = [zman1, zman2].map(zman => zman.zman) as [Temporal.ZonedDateTime, Temporal.ZonedDateTime];\r\n    return Temporal.ZonedDateTime.compare(...times)\r\n  }\r\n\r\n  /**\r\n   * A {@link Comparator} that will compare and sort zmanim by zmanim label order. Compares its two arguments by the zmanim label\r\n   * name order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater\r\n   * than the second.\r\n   * Please note that this class will will sort cases where either the {@code Zman} is a null or {@link #label} returns a null\r\n   * as empty {@code String}s.\r\n   */\r\n  static compareNameOrder(zman1: Zman, zman2: Zman): number {\r\n    return StringUtils.compareTo(zman1.label || '', zman2.label || '');\r\n  }\r\n\r\n  /**\r\n   * A {@link Comparator} that will compare and sort duration based <em>zmanim</em>  such as\r\n   * {@link AstronomicalCalendar#getTemporalHour() temporal hour} (or the various <em>shaah zmanis</em> times\r\n   * such as <em>{@link ZmanimCalendar#getShaahZmanisGra() shaah zmanis GRA}</em> or\r\n   * {@link ComplexZmanimCalendar#getShaahZmanis16Point1Degrees() <em>shaah zmanis 16.1&deg;</em>}). Returns a negative\r\n   * integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.\r\n   * Please note that this class will will sort cases where {@code Zman} is a null.\r\n   */\r\n  static compareDurationOrder(zman1: Zman, zman2: Zman): number {\r\n    return IntegerUtils.compare(zman1.duration || 0, zman2.duration || 0);\r\n  }\r\n\r\n  toString(): string {\r\n    return (`\\nLabel:\\t\\t\\t${this.label}`)\r\n      .concat(`\\nZman:\\t\\t\\t${this.zman}`)\r\n      .concat(`\\nDuration:\\t\\t\\t${this.duration}`)\r\n      .concat(`\\nDescription:\\t\\t\\t${this.description}`);\r\n  }\r\n}\r\n\r\nexport type ZmanWithZmanDate = Zman & { zman: Temporal.ZonedDateTime };\r\nexport type ZmanWithDuration = Zman & { duration: number };\r\n","import { Temporal } from 'temporal-polyfill'\r\n\r\nimport { TimeZone, Utils, padZeros } from '../polyfills/Utils';\r\nimport { Time } from './Time';\r\nimport { AstronomicalCalendar } from '../AstronomicalCalendar';\r\nimport { ZmanimCalendar } from '../ZmanimCalendar';\r\nimport { ComplexZmanimCalendar } from '../ComplexZmanimCalendar';\r\nimport { Zman, ZmanWithDuration, ZmanWithZmanDate } from './Zman';\r\nimport { UnsupportedError } from '../polyfills/errors';\r\n\r\nconst methodBlacklist = <const>[\r\n  'getAdjustedDate',\r\n  'getDate',\r\n  'getElevationAdjustedSunrise',\r\n  'getElevationAdjustedSunset',\r\n  'getMidnightLastNight',\r\n  'getMidnightTonight',\r\n  'getSunriseBaalHatanya',\r\n  'getSunsetBaalHatanya',\r\n];\r\n\r\nconst methodWhitelist = <const>[\r\n  // These methods have parameters, but have default values.\r\n  'getMinchaGedola',\r\n  'getMinchaKetana',\r\n  'getPlagHamincha',\r\n  'getSofZmanKidushLevana15Days',\r\n  'getSofZmanKidushLevanaBetweenMoldos',\r\n  'getSunTransit',\r\n  'getTchilasZmanKidushLevana3Days',\r\n  'getTchilasZmanKidushLevana7Days',\r\n  'getTemporalHour',\r\n];\r\n\r\nenum timeFormats {\r\n  SEXAGESIMAL_XSD_FORMAT,\r\n  DECIMAL_FORMAT,\r\n  SEXAGESIMAL_FORMAT,\r\n  SEXAGESIMAL_SECONDS_FORMAT,\r\n  SEXAGESIMAL_MILLIS_FORMAT,\r\n}\r\n\r\n/**\r\n * A class used to format both non {@link java.util.Date} times generated by the Zmanim package as well as Dates. For\r\n * example the {@link AstronomicalCalendar#getTemporalHour()} returns the length of the hour in\r\n * milliseconds. This class can format this time.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2019\r\n * @version 1.2\r\n */\r\nexport class ZmanimFormatter {\r\n  /**\r\n   * Setting to prepent a zero to single digit hours.\r\n   * @see #setSettings(boolean, boolean, boolean)\r\n   */\r\n  private prependZeroHours: boolean = false;\r\n\r\n  /**\r\n   * @see #setSettings(boolean, boolean, boolean)\r\n   */\r\n  private useSeconds: boolean = false;\r\n\r\n  /**\r\n   * @see #setSettings(boolean, boolean, boolean)\r\n   */\r\n  private useMillis: boolean = false;\r\n\r\n  /**\r\n   * the formatter for minutes as seconds.\r\n   */\r\n  private static readonly minuteSecondNF: number = 2;\r\n\r\n  /**\r\n   * the formatter for hours.\r\n   */\r\n  private hourNF!: number;\r\n\r\n  /**\r\n   * the formatter for minutes as milliseconds.\r\n   */\r\n  private static readonly milliNF: number = 3;\r\n\r\n  /**\r\n   * @see #setDateFormat(SimpleDateFormat)\r\n   */\r\n  private dateFormat!: Parameters<Date[\"toLocaleString\"]>;\r\n\r\n  /**\r\n   * @see #setTimeZone(TimeZone)\r\n   */\r\n  private timeZoneId!: string; // TimeZone.getTimeZone(\"UTC\");\r\n\r\n  /**\r\n   * @return the timeZone\r\n   */\r\n  public getTimeZone(): string {\r\n    return this.timeZoneId;\r\n  }\r\n\r\n  /**\r\n   * @param timeZoneId\r\n   *            the timeZone to set\r\n   */\r\n  public setTimeZone(timeZoneId: string): void {\r\n    this.timeZoneId = timeZoneId;\r\n  }\r\n\r\n  /**\r\n   * Format using hours, minutes, seconds and milliseconds using the xsd:time format. This format will return\r\n   * 00.00.00.0 when formatting 0.\r\n   */\r\n  public static readonly SEXAGESIMAL_XSD_FORMAT: number = timeFormats.SEXAGESIMAL_XSD_FORMAT;\r\n\r\n  /**\r\n   * Defaults to {@link #SEXAGESIMAL_XSD_FORMAT}.\r\n   * @see #setTimeFormat(int)\r\n   */\r\n  private timeFormat: number = ZmanimFormatter.SEXAGESIMAL_XSD_FORMAT;\r\n\r\n  /**\r\n   * Format using standard decimal format with 5 positions after the decimal.\r\n   */\r\n  public static readonly DECIMAL_FORMAT: number = timeFormats.DECIMAL_FORMAT;\r\n\r\n  /** Format using hours and minutes. */\r\n  public static readonly SEXAGESIMAL_FORMAT: number = timeFormats.SEXAGESIMAL_FORMAT;\r\n\r\n  /** Format using hours, minutes and seconds. */\r\n  public static readonly SEXAGESIMAL_SECONDS_FORMAT: number = timeFormats.SEXAGESIMAL_SECONDS_FORMAT;\r\n\r\n  /** Format using hours, minutes, seconds and milliseconds. */\r\n  public static readonly SEXAGESIMAL_MILLIS_FORMAT: number = timeFormats.SEXAGESIMAL_MILLIS_FORMAT;\r\n\r\n  /** constant for milliseconds in a minute (60,000) */\r\n  public static readonly MINUTE_MILLIS: number = 60 * 1000;\r\n\r\n  /** constant for milliseconds in an hour (3,600,000) */\r\n  public static readonly HOUR_MILLIS: number = ZmanimFormatter.MINUTE_MILLIS * 60;\r\n\r\n  /**\r\n   * Format using the XSD Duration format. This is in the format of PT1H6M7.869S (P for period (duration), T for time,\r\n   * H, M and S indicate hours, minutes and seconds.\r\n   */\r\n  public static readonly XSD_DURATION_FORMAT: number = 5;\r\n\r\n  public static readonly XSD_DATE_FORMAT: Parameters<Date[\"toLocaleString\"]> = ['toISODate']//'yyyy-LL-dd\\'T\\'HH:mm:ss';\r\n\r\n  /**\r\n   * constructor that defaults to this will use the format \"h:mm:ss\" for dates and 00.00.00.0 for {@link Time}.\r\n   * @param timeZone the TimeZone Object\r\n   */\r\n  /*\r\n      public ZmanimFormatter(timeZone: TimeZone) {\r\n          this(0, new SimpleDateFormat(\"h:mm:ss\"), timeZone);\r\n      }\r\n  */\r\n\r\n  // public ZmanimFormatter() {\r\n  // this(0, new SimpleDateFormat(\"h:mm:ss\"), TimeZone.getTimeZone(\"UTC\"));\r\n  // }\r\n\r\n  /**\r\n   * ZmanimFormatter constructor using a formatter\r\n   *\r\n   * @param format\r\n   *            int The formatting style to use. Using ZmanimFormatter.SEXAGESIMAL_SECONDS_FORMAT will format the time\r\n   *            time of 90*60*1000 + 1 as 1:30:00\r\n   * @param dateFormat the SimpleDateFormat Object\r\n   * @param timeZone the TimeZone Object\r\n   */\r\n  constructor(timeZoneId: string);\r\n  constructor(format: number, dateFormat: Parameters<Date[\"toLocaleString\"]>, timeZoneId: string);\r\n  constructor(formatOrTimeZone: number | string, dateFormat?: Parameters<Date[\"toLocaleString\"]>, timeZoneId?: string) {\r\n    let format: number;\r\n    if (dateFormat) {\r\n      format = formatOrTimeZone as number;\r\n    } else {\r\n      format = 0;\r\n      dateFormat = ['', { hour: this.prependZeroHours ? '2-digit' : 'numeric', minute: '2-digit', second: '2-digit'}];\r\n      timeZoneId = formatOrTimeZone as string;\r\n    }\r\n\r\n    this.setTimeZone(timeZoneId!);\r\n\r\n    this.setTimeFormat(format);\r\n    this.setDateFormat(dateFormat);\r\n  }\r\n\r\n  /**\r\n   * Sets the format to use for formatting.\r\n   *\r\n   * @param format\r\n   *            int the format constant to use.\r\n   */\r\n  public setTimeFormat(format: timeFormats): void {\r\n    this.timeFormat = format;\r\n    switch (format) {\r\n      case ZmanimFormatter.SEXAGESIMAL_XSD_FORMAT:\r\n        this.setSettings(true, true, true);\r\n        break;\r\n      case ZmanimFormatter.SEXAGESIMAL_FORMAT:\r\n        this.setSettings(false, false, false);\r\n        break;\r\n      case ZmanimFormatter.SEXAGESIMAL_SECONDS_FORMAT:\r\n        this.setSettings(false, true, false);\r\n        break;\r\n      case ZmanimFormatter.SEXAGESIMAL_MILLIS_FORMAT:\r\n        this.setSettings(false, true, true);\r\n        break;\r\n      // case DECIMAL_FORMAT:\r\n      // default:\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the SimpleDateFormat Object\r\n   * @param dateFormat the SimpleDateFormat Object to set\r\n   */\r\n  public setDateFormat(dateFormat: Parameters<Date[\"toLocaleString\"]>): void {\r\n    this.dateFormat = dateFormat;\r\n  }\r\n\r\n  /**\r\n   * returns the SimpleDateFormat Object\r\n   * @return the SimpleDateFormat Object\r\n   */\r\n  public getDateFormat(): Parameters<Date[\"toLocaleString\"]> {\r\n    return this.dateFormat;\r\n  }\r\n\r\n  /**\r\n   * Sets various format settings.\r\n   * @param prependZeroHours  if to prepend a zero for single digit hours (so that 1 'oclock is displayed as 01)\r\n   * @param useSeconds should seconds be used in the time format\r\n   * @param useMillis should milliseconds be used informatting time.\r\n   */\r\n  private setSettings(prependZeroHours: boolean, useSeconds: boolean, useMillis: boolean): void {\r\n    this.prependZeroHours = prependZeroHours;\r\n    this.useSeconds = useSeconds;\r\n    this.useMillis = useMillis;\r\n  }\r\n\r\n  /**\r\n   * A method that formats milliseconds into a time format.\r\n   *\r\n   * @param milliseconds\r\n   *            The time in milliseconds.\r\n   * @return String The formatted <code>String</code>\r\n   */\r\n  /*\r\n      public format(milliseconds: number): string {\r\n          return this.format(milliseconds);\r\n      }\r\n  */\r\n\r\n  /**\r\n   * A method that formats milliseconds into a time format.\r\n   *\r\n   * @param millis\r\n   *            The time in milliseconds.\r\n   * @return String The formatted <code>String</code>\r\n   */\r\n\r\n  /*\r\n      public format(millis: number): string {\r\n          return format(new Time(millis));\r\n      }\r\n  */\r\n\r\n  /**\r\n   * A method that formats {@link Time}objects.\r\n   *\r\n   * @param time\r\n   *            The time <code>Object</code> to be formatted.\r\n   * @return String The formatted <code>String</code>\r\n   */\r\n  public format(timeOrMillis: Time | number): string {\r\n    let time: Time;\r\n    if (timeOrMillis instanceof Time) {\r\n      time = timeOrMillis as Time;\r\n    } else {\r\n      time = new Time(timeOrMillis as number);\r\n    }\r\n\r\n    if (this.timeFormat === ZmanimFormatter.XSD_DURATION_FORMAT) {\r\n      return ZmanimFormatter.formatXSDDurationTime(time);\r\n    }\r\n    let sb: string = padZeros(time.getHours(), this.hourNF)\r\n      .concat(':')\r\n      .concat(padZeros(time.getMinutes(), ZmanimFormatter.minuteSecondNF));\r\n    if (this.useSeconds) {\r\n      sb = sb.concat(':')\r\n        .concat(padZeros(time.getSeconds(), ZmanimFormatter.minuteSecondNF));\r\n    }\r\n    if (this.useMillis) {\r\n      sb = sb.concat('.')\r\n        .concat(padZeros(time.getMilliseconds(), ZmanimFormatter.milliNF));\r\n    }\r\n    return sb;\r\n  }\r\n\r\n  /**\r\n   * Formats a date using this class's {@link #getDateFormat() date format}.\r\n   *\r\n   * @param dateTime - the date to format\r\n   * @return the formatted String\r\n   */\r\n  public formatDateTime(dateTime: Temporal.ZonedDateTime): string {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const _dateTime = dateTime.with({ timeZone: this.getTimeZone() });\r\n\r\n    // @ts-ignore\r\n    return _dateTime.toLocaleString(...this.dateFormat);\r\n  }\r\n\r\n  /**\r\n   * The date:date-time function returns the current date and time as a date/time string. The date/time string that's\r\n   * returned must be a string in the format defined as the lexical representation of xs:dateTime in <a\r\n   * href=\"http://www.w3.org/TR/xmlschema11-2/#dateTime\">[3.3.8 dateTime]</a> of <a\r\n   * href=\"http://www.w3.org/TR/xmlschema11-2/\">[XML Schema 1.1 Part 2: Datatypes]</a>. The date/time format is\r\n   * basically CCYY-MM-DDThh:mm:ss, although implementers should consult <a\r\n   * href=\"http://www.w3.org/TR/xmlschema11-2/\">[XML Schema 1.1 Part 2: Datatypes]</a> and <a\r\n   * href=\"http://www.iso.ch/markete/8601.pdf\">[ISO 8601]</a> for details. The date/time string format must include a\r\n   * time zone, either a Z to indicate Coordinated Universal Time or a + or - followed by the difference between the\r\n   * difference from UTC represented as hh:mm.\r\n   * @param dateTime - the UTC Date Object\r\n   * @return the XSD dateTime\r\n   */\r\n  public getXSDateTime(dateTime: Temporal.ZonedDateTime): string {\r\n    return dateTime.with({ timeZone: this.getTimeZone() }).toString();\r\n  }\r\n\r\n  /**\r\n   * Represent the hours and minutes with two-digit strings.\r\n   *\r\n   * @param digits\r\n   *            hours or minutes.\r\n   * @return two-digit String representation of hrs or minutes.\r\n   */\r\n  private static formatDigits(digits: number): string {\r\n    const dd: string = Math.abs(digits).toString();\r\n    return dd.length === 1 ? `0${dd}` : dd;\r\n  }\r\n\r\n  /**\r\n   * This returns the xml representation of an xsd:duration object.\r\n   *\r\n   * @param millis\r\n   *            the duration in milliseconds\r\n   * @return the xsd:duration formatted String\r\n   */\r\n\r\n  /*\r\n      public formatXSDDurationTime(millis: number): string {\r\n          return formatXSDDurationTime(new Time(millis));\r\n      }\r\n  */\r\n\r\n  /**\r\n   * This returns the xml representation of an xsd:duration object.\r\n   *\r\n   * @param time\r\n   *            the duration as a Time object\r\n   * @return the xsd:duration formatted String\r\n   */\r\n  public static formatXSDDurationTime(timeOrMillis: Time | number): string {\r\n    let time: Time;\r\n    if (timeOrMillis instanceof Time) {\r\n      time = timeOrMillis as Time;\r\n    } else {\r\n      time = new Time(timeOrMillis as number);\r\n    }\r\n\r\n    let duration: string;\r\n    if (time.getHours() !== 0 || time.getMinutes() !== 0 || time.getSeconds() !== 0 || time.getMilliseconds() !== 0) {\r\n      duration = 'P'.concat('T');\r\n\r\n      if (time.getHours() !== 0) duration = duration.concat(`${time.getHours()}H`);\r\n\r\n      if (time.getMinutes() !== 0) duration = duration.concat(`${time.getMinutes()}M`);\r\n\r\n      if (time.getSeconds() !== 0 || time.getMilliseconds() !== 0) {\r\n        duration = duration.concat(`${time.getSeconds()}.${padZeros(time.getMilliseconds(), ZmanimFormatter.milliNF)}`);\r\n        duration = duration.concat('S');\r\n      }\r\n\r\n      if (duration.length === 1) duration.concat('T0S'); // zero seconds\r\n\r\n      if (time.isNegative()) {\r\n        duration = '-' + duration;\r\n      }\r\n    }\r\n    return duration!.toString();\r\n  }\r\n\r\n  public static formatDecimal(num: number): string {\r\n    const hasDecimal = num - Math.trunc(num) > 0;\r\n    return hasDecimal ? num.toString() : num.toFixed(1);\r\n  }\r\n\r\n  /**\r\n   * A method that returns an XML formatted <code>String</code> representing the serialized <code>Object</code>. The\r\n   * format used is:\r\n   *\r\n   * <pre>\r\n   *  &lt;AstronomicalTimes date=&quot;1969-02-08&quot; type=&quot;AstronomicalCalendar algorithm=&quot;US Naval Almanac Algorithm&quot; location=&quot;Lakewood, NJ&quot; latitude=&quot;40.095965&quot; longitude=&quot;-74.22213&quot; elevation=&quot;31.0&quot; timeZoneName=&quot;Eastern Standard Time&quot; timeZoneID=&quot;America/New_York&quot; timeZoneOffset=&quot;-5&quot;&gt;\r\n   *     &lt;Sunrise&gt;2007-02-18T06:45:27-05:00&lt;/Sunrise&gt;\r\n   *     &lt;TemporalHour&gt;PT54M17.529S&lt;/TemporalHour&gt;\r\n   *     ...\r\n   *   &lt;/AstronomicalTimes&gt;\r\n   * </pre>\r\n   *\r\n   * Note that the output uses the <a href=\"http://www.w3.org/TR/xmlschema11-2/#dateTime\">xsd:dateTime</a> format for\r\n   * times such as sunrise, and <a href=\"http://www.w3.org/TR/xmlschema11-2/#duration\">xsd:duration</a> format for\r\n   * times that are a duration such as the length of a\r\n   * {@link AstronomicalCalendar#getTemporalHour() temporal hour}. The output of this method is\r\n   * returned by the {@link #toString() toString}.\r\n   *\r\n   * @param astronomicalCalendar the AstronomicalCalendar Object\r\n   *\r\n   * @return The XML formatted <code>String</code>. The format will be:\r\n   *\r\n   *         <pre>\r\n   *  &lt;AstronomicalTimes date=&quot;1969-02-08&quot; type=&quot;AstronomicalCalendar algorithm=&quot;US Naval Almanac Algorithm&quot; location=&quot;Lakewood, NJ&quot; latitude=&quot;40.095965&quot; longitude=&quot;-74.22213&quot; elevation=&quot;31.0&quot; timeZoneName=&quot;Eastern Standard Time&quot; timeZoneID=&quot;America/New_York&quot; timeZoneOffset=&quot;-5&quot;&gt;\r\n   *     &lt;Sunrise&gt;2007-02-18T06:45:27-05:00&lt;/Sunrise&gt;\r\n   *     &lt;TemporalHour&gt;PT54M17.529S&lt;/TemporalHour&gt;\r\n   *     ...\r\n   *  &lt;/AstronomicalTimes&gt;\r\n   * </pre>\r\n   *\r\n   *         TODO: add proper schema, and support for nulls. XSD duration (for solar hours), should probably return\r\n   *         nil and not P\r\n   * @deprecated\r\n   */\r\n  public static toXML(): void {\r\n    throw new UnsupportedError('This method is not supported.');\r\n  }\r\n\r\n  /**\r\n   * A method that returns a JSON formatted <code>String</code> representing the serialized <code>Object</code>. The\r\n   * format used is:\r\n   * <pre>\r\n   * {\r\n   *    &quot;metadata&quot;:{\r\n   *      &quot;date&quot;:&quot;1969-02-08&quot;,\r\n   *      &quot;type&quot;:&quot;AstronomicalCalendar&quot;,\r\n   *      &quot;algorithm&quot;:&quot;US Naval Almanac Algorithm&quot;,\r\n   *      &quot;location&quot;:&quot;Lakewood, NJ&quot;,\r\n   *      &quot;latitude&quot;:&quot;40.095965&quot;,\r\n   *      &quot;longitude&quot;:&quot;-74.22213&quot;,\r\n   *      &quot;elevation:&quot;31.0&quot;,\r\n   *      &quot;timeZoneName&quot;:&quot;Eastern Standard Time&quot;,\r\n   *      &quot;timeZoneID&quot;:&quot;America/New_York&quot;,\r\n   *      &quot;timeZoneOffset&quot;:&quot;-5&quot;},\r\n   *    &quot;AstronomicalTimes&quot;:{\r\n   *     &quot;Sunrise&quot;:&quot;2007-02-18T06:45:27-05:00&quot;,\r\n   *     &quot;TemporalHour&quot;:&quot;PT54M17.529S&quot;\r\n   *     ...\r\n   *     }\r\n   * }\r\n   * </pre>\r\n   *\r\n   * Note that the output uses the <a href=\"http://www.w3.org/TR/xmlschema11-2/#dateTime\">xsd:dateTime</a> format for\r\n   * times such as sunrise, and <a href=\"http://www.w3.org/TR/xmlschema11-2/#duration\">xsd:duration</a> format for\r\n   * times that are a duration such as the length of a\r\n   * {@link AstronomicalCalendar#getTemporalHour() temporal hour}.\r\n   *\r\n   * @param astronomicalCalendar the AstronomicalCalendar Object\r\n   *\r\n   * @return The JSON formatted <code>String</code>. The format will be:\r\n   * <pre>\r\n   * {\r\n   *    &quot;metadata&quot;:{\r\n   *      &quot;date&quot;:&quot;1969-02-08&quot;,\r\n   *      &quot;type&quot;:&quot;AstronomicalCalendar&quot;,\r\n   *      &quot;algorithm&quot;:&quot;US Naval Almanac Algorithm&quot;,\r\n   *      &quot;location&quot;:&quot;Lakewood, NJ&quot;,\r\n   *      &quot;latitude&quot;:&quot;40.095965&quot;,\r\n   *      &quot;longitude&quot;:&quot;-74.22213&quot;,\r\n   *      &quot;elevation:&quot;31.0&quot;,\r\n   *      &quot;timeZoneName&quot;:&quot;Eastern Standard Time&quot;,\r\n   *      &quot;timeZoneID&quot;:&quot;America/New_York&quot;,\r\n   *      &quot;timeZoneOffset&quot;:&quot;-5&quot;},\r\n   *    &quot;AstronomicalTimes&quot;:{\r\n   *     &quot;Sunrise&quot;:&quot;2007-02-18T06:45:27-05:00&quot;,\r\n   *     &quot;TemporalHour&quot;:&quot;PT54M17.529S&quot;\r\n   *     ...\r\n   *     }\r\n   * }\r\n   * </pre>\r\n   */\r\n  public static toJSON(astronomicalCalendar: AstronomicalCalendar): JsonOutput {\r\n    const json: JsonOutput = {\r\n      metadata: ZmanimFormatter.getOutputMetadata(astronomicalCalendar),\r\n    };\r\n    const key: string = ZmanimFormatter.getOutputKey(astronomicalCalendar);\r\n    json[key] = ZmanimFormatter.getZmanimOutput(astronomicalCalendar);\r\n\r\n    return json;\r\n  }\r\n\r\n  private static getOutputKey(astronomicalCalendar: AstronomicalCalendar) {\r\n    switch (true) {\r\n      case astronomicalCalendar instanceof ComplexZmanimCalendar:\r\n        return 'Zmanim';\r\n      case astronomicalCalendar instanceof ZmanimCalendar:\r\n        return 'BasicZmanim';\r\n      case astronomicalCalendar instanceof AstronomicalCalendar:\r\n      default:\r\n        return 'AstronomicalTimes';\r\n    }\r\n  }\r\n\r\n  private static getOutputMetadata(astronomicalCalendar: AstronomicalCalendar): OutputMetadata {\r\n    return {\r\n      date: astronomicalCalendar.getDate().toString(),\r\n      type: astronomicalCalendar.getClassName(),\r\n      algorithm: astronomicalCalendar.getAstronomicalCalculator().getCalculatorName(),\r\n      location: astronomicalCalendar.getGeoLocation().getLocationName(),\r\n      latitude: astronomicalCalendar.getGeoLocation().getLatitude().toString(),\r\n      longitude: astronomicalCalendar.getGeoLocation().getLongitude().toString(),\r\n      elevation: ZmanimFormatter.formatDecimal(astronomicalCalendar.getGeoLocation().getElevation()),\r\n      timeZoneName: TimeZone.getDisplayName(astronomicalCalendar.getGeoLocation().getTimeZone())!,\r\n      timeZoneID: astronomicalCalendar.getGeoLocation().getTimeZone(),\r\n      timeZoneOffset: ZmanimFormatter.formatDecimal(TimeZone.getOffset(astronomicalCalendar.getGeoLocation().getTimeZone(),\r\n        astronomicalCalendar.getDate().toZonedDateTime(astronomicalCalendar.getGeoLocation().getTimeZone()).epochMilliseconds) / ZmanimFormatter.HOUR_MILLIS),\r\n    };\r\n  }\r\n\r\n  private static getZmanimOutput(astronomicalCalendar: AstronomicalCalendar) {\r\n    const formatter: ZmanimFormatter = new ZmanimFormatter(ZmanimFormatter.XSD_DURATION_FORMAT, ZmanimFormatter.XSD_DATE_FORMAT,\r\n      astronomicalCalendar.getGeoLocation().getTimeZone());\r\n\r\n    /*\r\n        let dateList: Set<Date> = new Set();\r\n        let durationList: Set<number> = new Set();\r\n    */\r\n    const dateList: ZmanWithZmanDate[] = [];\r\n    let durationList: ZmanWithDuration[] = [];\r\n    const otherList: string[] = [];\r\n\r\n    // Get all the methods in the calendar\r\n    Utils.getAllMethodNames(astronomicalCalendar, true)\r\n      // Filter out methods that we don't want\r\n      .filter(method => includeMethod(method, astronomicalCalendar))\r\n      // Call each method and get the return values\r\n      .map(method => ({\r\n        methodName: method,\r\n        value: astronomicalCalendar[method as keyof AstronomicalCalendar],\r\n      }))\r\n      // Filter for return values of type Date or number\r\n      .filter(methodObj => methodObj.value instanceof Temporal.ZonedDateTime || typeof methodObj.value === 'number' || methodObj.value === null)\r\n      // Separate the Dates and numbers\r\n      .forEach(methodObj => {\r\n        const tagName: string = methodObj.methodName.substring(3);\r\n        if (methodObj.value instanceof Temporal.ZonedDateTime) {\r\n          // dateList.add(new KosherZmanim.Zman(methodObj.value, tagName));\r\n          const zman: ZmanWithZmanDate = {\r\n            zman: methodObj.value,\r\n            label: tagName,\r\n          };\r\n          dateList.push(zman);\r\n        } else if (typeof methodObj.value === 'number') {\r\n          // durationList.add(new KosherZmanim.Zman(methodObj.value, tagName));\r\n          const zman: ZmanWithDuration = {\r\n            duration: methodObj.value,\r\n            label: tagName,\r\n          };\r\n          durationList.push(zman);\r\n        } else {\r\n          otherList.push(tagName);\r\n        }\r\n      });\r\n\r\n    dateList.sort(Zman.compareDateOrder);\r\n    // Filter for values in milliseconds, and not values in minutes\r\n    durationList = durationList.filter((zman: ZmanWithDuration) => zman.duration > 1000)\r\n      .sort(Zman.compareDurationOrder);\r\n\r\n    const timesData = {\r\n      ...Object.fromEntries(dateList.map(zman => [zman.label, formatter.formatDateTime(zman.zman)])),\r\n      ...Object.fromEntries(durationList.map(zman => [zman.label, formatter.format(Math.trunc(zman.duration))])),\r\n      ...Object.fromEntries(otherList.map(tagName => [tagName, 'N/A'])),\r\n    };\r\n\r\n    return timesData;\r\n  }\r\n}\r\n\r\n/**\r\n * Determines if a method should be output by the {@link #toJSON(AstronomicalCalendar)}\r\n *\r\n * @param {string} method - the method in question\r\n * @param {AstronomicalCalendar} astronomicalCalendar - The astronomical calendar, to be able to\r\n * check the parameterlist\r\n * @return if the method should be included in serialization\r\n */\r\nfunction includeMethod(method: string, astronomicalCalendar: AstronomicalCalendar): boolean {\r\n  if (method in methodWhitelist) return true;\r\n\r\n  // Filter out excluded methods\r\n  return !(method in methodBlacklist)\r\n    // Filter out methods with parameters since we don't know what value(s) to pass\r\n    && (astronomicalCalendar as any as Record<string, Function>)[method].length === 0\r\n    // Filter out methods that don't start with 'get'\r\n    && method.startsWith('get');\r\n}\r\n\r\nexport interface JsonOutput {\r\n  metadata: OutputMetadata\r\n\r\n  [key: string]: object;\r\n}\r\n\r\nexport interface OutputMetadata {\r\n  date: string;\r\n  type: string;\r\n  algorithm: string;\r\n  location: string | null;\r\n  latitude: string;\r\n  longitude: string;\r\n  elevation: string;\r\n  timeZoneName: string;\r\n  timeZoneID: string;\r\n  timeZoneOffset: string;\r\n}\r\n","import { GeoLocation } from './GeoLocation';\r\nimport { MathUtils } from '../polyfills/Utils';\r\n\r\n/**\r\n * A class for various location calculations\r\n * Most of the code in this class is ported from <a href=\"http://www.movable-type.co.uk/\">Chris Veness'</a>\r\n * <a href=\"http://www.fsf.org/licensing/licenses/lgpl.html\">LGPL</a> Javascript Implementation\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2009 - 2020\r\n * @deprecated All methods in this class are available in the {@link GeoLocation} class, and this class that duplicates that\r\n * code will be removed in a future release.\r\n */\r\nexport class GeoLocationUtils {\r\n  /**\r\n   * Constant for a distance type calculation.\r\n   * @see #getGeodesicDistance(GeoLocation, GeoLocation)\r\n   */\r\n  private static readonly DISTANCE: number = 0;\r\n\r\n  /**\r\n   * Constant for a initial bearing type calculation.\r\n   * @see #getGeodesicInitialBearing(GeoLocation, GeoLocation)\r\n   */\r\n  private static readonly INITIAL_BEARING: number = 1;\r\n\r\n  /**\r\n   * Constant for a final bearing type calculation.\r\n   * @see #getGeodesicFinalBearing(GeoLocation, GeoLocation)\r\n   */\r\n  private static readonly FINAL_BEARING: number = 2;\r\n\r\n  /**\r\n   * Calculate the <a href=\"https://en.wikipedia.org/wiki/Great_circle\">geodesic</a> initial bearing between this Object and\r\n   * a second Object passed to this method using <a href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus\r\n   * Vincenty's</a> inverse formula See T Vincenty, \"<a href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and\r\n   * Inverse Solutions of Geodesics on the Ellipsoid with application of nested equations</a>\", Survey Review, vol XXII\r\n   * no 176, 1975.\r\n   *\r\n   * @param location\r\n   *            the initial location\r\n   * @param destination\r\n   *            the destination location\r\n   * @return the geodesic bearing\r\n   */\r\n  public static getGeodesicInitialBearing(location: GeoLocation, destination: GeoLocation): number {\r\n    return GeoLocationUtils.vincentyFormula(location, destination, GeoLocationUtils.INITIAL_BEARING);\r\n  }\r\n\r\n  /**\r\n   * Calculate the <a href=\"https://en.wikipedia.org/wiki/Great_circle\">geodesic</a> final bearing between this Object\r\n   * and a second Object passed to this method using <a href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a>\r\n   * inverse formula See T Vincenty, \"<a href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics\r\n   * on the Ellipsoid with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975.\r\n   *\r\n   * @param location\r\n   *            the initial location\r\n   * @param destination\r\n   *            the destination location\r\n   * @return the geodesic bearing\r\n   */\r\n  public static getGeodesicFinalBearing(location: GeoLocation, destination: GeoLocation): number {\r\n    return GeoLocationUtils.vincentyFormula(location, destination, GeoLocationUtils.FINAL_BEARING);\r\n  }\r\n\r\n  /**\r\n   * Calculate <a href=\"https://en.wikipedia.org/wiki/Great-circle_distance\">geodesic distance</a> in Meters\r\n   * between this Object and a second Object passed to this method using <a\r\n   * href=\"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a> inverse formula See T Vincenty,\r\n   * \"<a href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics on the\r\n   * Ellipsoid with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975. This uses the\r\n   * WGS-84 geodetic model.\r\n   * @param location\r\n   *            the initial location\r\n   * @param destination\r\n   *            the destination location\r\n   * @return the geodesic distance in Meters\r\n   */\r\n  public static getGeodesicDistance(location: GeoLocation, destination: GeoLocation): number {\r\n    return GeoLocationUtils.vincentyFormula(location, destination, GeoLocationUtils.DISTANCE);\r\n  }\r\n\r\n  /**\r\n   * Calculates the initial <a href=\"https://en.wikipedia.org/wiki/Great_circle\">geodesic</a> bearing, final bearing or\r\n   * <a href=\"https://en.wikipedia.org/wiki/Great-circle_distance\">geodesic distance</a> using <a href=\r\n   * \"https://en.wikipedia.org/wiki/Thaddeus_Vincenty\">Thaddeus Vincenty's</a> inverse formula See T Vincenty, \"<a\r\n   * href=\"http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf\">Direct and Inverse Solutions of Geodesics on the Ellipsoid\r\n   * with application of nested equations</a>\", Survey Review, vol XXII no 176, 1975.\r\n   *\r\n   * @param location\r\n   *            the initial location\r\n   * @param destination\r\n   *            the destination location\r\n   * @param formula\r\n   *            This formula calculates initial bearing ({@link #INITIAL_BEARING}),\r\n   *            final bearing ({@link #FINAL_BEARING}) and distance ({@link #DISTANCE}).\r\n   * @return\r\n   *            the geodesic distance, initial or final bearing (based on the formula passed in) between the location\r\n   *            and destination in Meters\r\n   * @see #getGeodesicDistance(GeoLocation, GeoLocation)\r\n   * @see #getGeodesicInitialBearing(GeoLocation, GeoLocation)\r\n   * @see #getGeodesicFinalBearing(GeoLocation, GeoLocation)\r\n   */\r\n  private static vincentyFormula(location: GeoLocation, destination: GeoLocation, formula: number): number {\r\n    const a: number = 6378137; // length of semi-major axis of the ellipsoid (radius at equator) in metres based on WGS-84\r\n    const b: number = 6356752.3142; // length of semi-minor axis of the ellipsoid (radius at the poles) in meters based on WGS-84\r\n    const f: number = 1 / 298.257223563; // flattening of the ellipsoid based on WGS-84\r\n    const L: number = MathUtils.degreesToRadians(destination.getLongitude() - location.getLongitude()); // difference in longitude of two points;\r\n    const U1: number = Math.atan((1 - f) * Math.tan(MathUtils.degreesToRadians(location.getLatitude()))); // reduced latitude (latitude on the auxiliary sphere)\r\n    const U2: number = Math.atan((1 - f) * Math.tan(MathUtils.degreesToRadians(destination.getLatitude()))); // reduced latitude (latitude on the auxiliary sphere)\r\n\r\n    const sinU1: number = Math.sin(U1);\r\n    const cosU1: number = Math.cos(U1);\r\n    const sinU2: number = Math.sin(U2);\r\n    const cosU2: number = Math.cos(U2);\r\n\r\n    let lambda: number = L;\r\n    let lambdaP: number = 2 * Math.PI;\r\n    let iterLimit: number = 20;\r\n    let sinLambda: number = 0;\r\n    let cosLambda: number = 0;\r\n    let sinSigma: number = 0;\r\n    let cosSigma: number = 0;\r\n    let sigma: number = 0;\r\n    let sinAlpha: number = 0;\r\n    let cosSqAlpha: number = 0;\r\n    let cos2SigmaM: number = 0;\r\n    let C: number;\r\n\r\n    while (Math.abs(lambda - lambdaP) > 1e-12 && --iterLimit > 0) {\r\n      sinLambda = Math.sin(lambda);\r\n      cosLambda = Math.cos(lambda);\r\n      sinSigma = Math.sqrt((cosU2 * sinLambda) * (cosU2 * sinLambda)\r\n        + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda)\r\n        * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));\r\n      if (sinSigma === 0) return 0; // co-incident points\r\n      cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;\r\n      sigma = Math.atan2(sinSigma, cosSigma);\r\n      sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;\r\n      cosSqAlpha = 1 - sinAlpha * sinAlpha;\r\n      cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;\r\n      if (Number.isNaN(cos2SigmaM)) cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (§6)\r\n      C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));\r\n      lambdaP = lambda;\r\n      lambda = L + (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));\r\n    }\r\n    if (iterLimit === 0) return Number.NaN; // formula failed to converge\r\n\r\n    const uSq: number = cosSqAlpha * (a * a - b * b) / (b * b);\r\n    const A: number = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\r\n    const B: number = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\r\n    const deltaSigma: number = B * sinSigma * (cos2SigmaM + B / 4\r\n        * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM\r\n          * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\r\n    const distance: number = b * A * (sigma - deltaSigma);\r\n\r\n    // initial bearing\r\n    const fwdAz: number = MathUtils.radiansToDegrees(Math.atan2(cosU2 * sinLambda, cosU1\r\n      * sinU2 - sinU1 * cosU2 * cosLambda));\r\n    // final bearing\r\n    const revAz: number = MathUtils.radiansToDegrees(Math.atan2(cosU1 * sinLambda, -sinU1\r\n      * cosU2 + cosU1 * sinU2 * cosLambda));\r\n    if (formula === GeoLocationUtils.DISTANCE) {\r\n      return distance;\r\n    } else if (formula === GeoLocationUtils.INITIAL_BEARING) {\r\n      return fwdAz;\r\n    } else if (formula === GeoLocationUtils.FINAL_BEARING) {\r\n      return revAz;\r\n    }\r\n    // should never happen\r\n    return Number.NaN;\r\n  }\r\n\r\n  /**\r\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Rhumb_line\">rhumb line</a>\r\n   * bearing from the current location to the GeoLocation passed in.\r\n   *\r\n   * @param location\r\n   *            the initial location\r\n   * @param destination\r\n   *            the destination location\r\n   * @return the bearing in degrees\r\n   */\r\n  public static getRhumbLineBearing(location: GeoLocation, destination: GeoLocation): number {\r\n    let dLon: number = MathUtils.degreesToRadians(destination.getLongitude() - location.getLongitude());\r\n    const dPhi: number = Math.log(Math.tan(MathUtils.degreesToRadians(destination.getLatitude())\r\n      / 2 + Math.PI / 4)\r\n      / Math.tan(MathUtils.degreesToRadians(location.getLatitude()) / 2 + Math.PI / 4));\r\n    if (Math.abs(dLon) > Math.PI) dLon = dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);\r\n    return MathUtils.radiansToDegrees(Math.atan2(dLon, dPhi));\r\n  }\r\n\r\n  /**\r\n   * Returns the <a href=\"https://en.wikipedia.org/wiki/Rhumb_line\">rhumb line</a> distance from the current\r\n   * location to the GeoLocation passed in. Ported from <a href=\"http://www.movable-type.co.uk/\">Chris Veness'</a>\r\n   * Javascript Implementation.\r\n   *\r\n   * @param location\r\n   *            the initial location\r\n   * @param destination\r\n   *            the destination location\r\n   * @return the distance in Meters\r\n   */\r\n  public static getRhumbLineDistance(location: GeoLocation, destination: GeoLocation): number {\r\n    const earthRadius: number = 6378137; // earth's mean radius in km\r\n    const dLat: number = MathUtils.degreesToRadians(location.getLatitude())\r\n      - MathUtils.degreesToRadians(destination.getLatitude());\r\n    let dLon: number = Math.abs(MathUtils.degreesToRadians(location.getLongitude())\r\n      - MathUtils.degreesToRadians(destination.getLongitude()));\r\n    const dPhi: number = Math.log(Math.tan(MathUtils.degreesToRadians(location.getLatitude()) / 2 + Math.PI / 4)\r\n      / Math.tan(MathUtils.degreesToRadians(destination.getLatitude()) / 2 + Math.PI / 4));\r\n\r\n    let q: number = dLat / dPhi;\r\n    if (!Number.isFinite(q)) {\r\n      q = Math.cos(MathUtils.degreesToRadians(destination.getLatitude()));\r\n    }\r\n\r\n    // if dLon over 180° take shorter rhumb across 180° meridian:\r\n    if (dLon > Math.PI) {\r\n      dLon = 2 * Math.PI - dLon;\r\n    }\r\n    const d: number = Math.sqrt(dLat * dLat + q * q * dLon * dLon);\r\n    return d * earthRadius;\r\n  }\r\n}\r\n","import { GeoLocation } from './GeoLocation';\r\nimport { AstronomicalCalculator } from './AstronomicalCalculator';\r\nimport { MathUtils } from '../polyfills/Utils';\r\nimport { Temporal } from 'temporal-polyfill'\r\n\r\n/**\r\n * Implementation of sunrise and sunset methods to calculate astronomical times. This calculator uses the Java algorithm\r\n * written by <a href=\"http://web.archive.org/web/20090531215353/http://www.kevinboone.com/suntimes.html\">Kevin\r\n * Boone</a> that is based on the <a href = \"http://aa.usno.navy.mil/\">US Naval Observatory's</a><a\r\n * href=\"http://aa.usno.navy.mil/publications/docs/asa.php\">Almanac</a> for Computer algorithm ( <a\r\n * href=\"http://www.amazon.com/exec/obidos/tg/detail/-/0160515106/\">Amazon</a>, <a\r\n * href=\"http://search.barnesandnoble.com/booksearch/isbnInquiry.asp?isbn=0160515106\">Barnes &amp; Noble</a>) and is\r\n * used with his permission. Added to Kevin's code is adjustment of the zenith to account for elevation.\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2004 - 2019\r\n * @author &copy; Kevin Boone 2000\r\n * @version 1.1\r\n */\r\nexport class SunTimesCalculator extends AstronomicalCalculator {\r\n  /**\r\n   * @see AstronomicalCalculator#getCalculatorName()\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public getCalculatorName(): string {\r\n    return 'US Naval Almanac Algorithm';\r\n  }\r\n\r\n  /**\r\n   * @see AstronomicalCalculator#getUTCSunrise(Calendar, GeoLocation, double, boolean)\r\n   */\r\n  public getUTCSunrise(date: Temporal.PlainDate, geoLocation: GeoLocation, zenith: number, adjustForElevation: boolean): number {\r\n    const elevation: number = adjustForElevation ? geoLocation.getElevation() : 0;\r\n    const adjustedZenith: number = this.adjustZenith(zenith, elevation);\r\n\r\n    const doubleTime: number = SunTimesCalculator.getTimeUTC(date, geoLocation.getLongitude(), geoLocation.getLatitude(),\r\n      adjustedZenith, true);\r\n    return doubleTime;\r\n  }\r\n\r\n  /**\r\n   * @see AstronomicalCalculator#getUTCSunset(Calendar, GeoLocation, double, boolean)\r\n   */\r\n  public getUTCSunset(date: Temporal.PlainDate, geoLocation: GeoLocation, zenith: number, adjustForElevation: boolean): number {\r\n    const elevation: number = adjustForElevation ? geoLocation.getElevation() : 0;\r\n    const adjustedZenith: number = this.adjustZenith(zenith, elevation);\r\n\r\n    const doubleTime: number = SunTimesCalculator.getTimeUTC(date, geoLocation.getLongitude(), geoLocation.getLatitude(),\r\n      adjustedZenith, false);\r\n    return doubleTime;\r\n  }\r\n\r\n  /**\r\n   * The number of degrees of longitude that corresponds to one hour time difference.\r\n   */\r\n  private static readonly DEG_PER_HOUR: number = 360 / 24;\r\n\r\n  /**\r\n   * sin of an angle in degrees\r\n   */\r\n  private static sinDeg(deg: number): number {\r\n    // return Math.sin(deg * 2 * Math.PI / 360);\r\n    return Math.sin(MathUtils.degreesToRadians(deg));\r\n  }\r\n\r\n  /**\r\n   * acos of an angle, result in degrees\r\n   */\r\n  private static acosDeg(x: number): number {\r\n    // return Math.acos(x) * 360 / (2 * Math.PI);\r\n    return MathUtils.radiansToDegrees(Math.acos(x));\r\n  }\r\n\r\n  /**\r\n   * asin of an angle, result in degrees\r\n   */\r\n  private static asinDeg(x: number): number {\r\n    // return Math.asin(x) * 360 / (2 * Math.PI);\r\n    return MathUtils.radiansToDegrees(Math.asin(x));\r\n  }\r\n\r\n  /**\r\n   * tan of an angle in degrees\r\n   */\r\n  private static tanDeg(deg: number): number {\r\n    // return Math.tan(deg * 2 * Math.PI / 360);\r\n    return Math.tan(MathUtils.degreesToRadians(deg));\r\n  }\r\n\r\n  /**\r\n   * Calculate cosine of the angle in degrees\r\n   *\r\n   * @param deg degrees\r\n   * @return cosine of the angle in degrees\r\n   */\r\n  private static cosDeg(deg: number): number {\r\n    // return Math.cos(deg * 2 * Math.PI / 360);\r\n    return Math.cos(MathUtils.degreesToRadians(deg));\r\n  }\r\n\r\n  /**\r\n   * Get time difference between location's longitude and the Meridian, in hours. West of Meridian has a negative time\r\n   * difference\r\n   */\r\n  private static getHoursFromMeridian(longitude: number): number {\r\n    return longitude / SunTimesCalculator.DEG_PER_HOUR;\r\n  }\r\n\r\n  /**\r\n   * Calculate the approximate time of sunset or sunrise in days since midnight Jan 1st, assuming 6am and 6pm events. We\r\n   * need this figure to derive the Sun's mean anomaly.\r\n   *\r\n   * @param dayOfYear the day of year\r\n   * @param hoursFromMeridian hours from the meridian\r\n   * @param isSunrise true for sunrise and false for sunset\r\n   *\r\n   * @return the approximate time of sunset or sunrise in days since midnight Jan 1st, assuming 6am and 6pm events. We\r\n   * need this figure to derive the Sun's mean anomaly.\r\n   */\r\n  private static getApproxTimeDays(dayOfYear: number, hoursFromMeridian: number, isSunrise: boolean): number {\r\n    if (isSunrise) {\r\n      return dayOfYear + ((6 - hoursFromMeridian) / 24);\r\n    }\r\n    // sunset\r\n    return dayOfYear + ((18 - hoursFromMeridian) / 24);\r\n  }\r\n\r\n  /**\r\n   * Calculate the Sun's mean anomaly in degrees, at sunrise or sunset, given the longitude in degrees\r\n   *\r\n   * @param dayOfYear the day of the year\r\n   * @param longitude longitude\r\n   * @param isSunrise true for sunrise and false for sunset\r\n   * @return the Sun's mean anomaly in degrees\r\n   */\r\n  private static getMeanAnomaly(dayOfYear: number, longitude: number, isSunrise: boolean): number {\r\n    return (0.9856 * SunTimesCalculator.getApproxTimeDays(dayOfYear, SunTimesCalculator.getHoursFromMeridian(longitude), isSunrise)) - 3.289;\r\n  }\r\n\r\n  /**\r\n   * Calculates the Sun's true longitude in degrees. The result is an angle gte 0 and lt 360. Requires the Sun's mean\r\n   * anomaly, also in degrees\r\n   */\r\n  private static getSunTrueLongitude(sunMeanAnomaly: number): number {\r\n    let l: number = sunMeanAnomaly + (1.916 * SunTimesCalculator.sinDeg(sunMeanAnomaly)) + (0.020 * SunTimesCalculator.sinDeg(2 * sunMeanAnomaly)) + 282.634;\r\n\r\n    // get longitude into 0-360 degree range\r\n    if (l >= 360) {\r\n      l = l - 360;\r\n    }\r\n    if (l < 0) {\r\n      l = l + 360;\r\n    }\r\n    return l;\r\n  }\r\n\r\n  /**\r\n   * Calculates the Sun's right ascension in hours, given the Sun's true longitude in degrees. Input and output are\r\n   * angles gte 0 and lt 360.\r\n   */\r\n  private static getSunRightAscensionHours(sunTrueLongitude: number): number {\r\n    const a: number = 0.91764 * SunTimesCalculator.tanDeg(sunTrueLongitude);\r\n    let ra: number = 360 / (2 * Math.PI) * Math.atan(a);\r\n\r\n    const lQuadrant: number = Math.floor(sunTrueLongitude / 90) * 90;\r\n    const raQuadrant: number = Math.floor(ra / 90) * 90;\r\n    ra += (lQuadrant - raQuadrant);\r\n\r\n    return ra / SunTimesCalculator.DEG_PER_HOUR; // convert to hours\r\n  }\r\n\r\n  /**\r\n   * Calculate the cosine of the Sun's local hour angle\r\n   *\r\n   * @param sunTrueLongitude the sun's true longitude\r\n   * @param latitude the latitude\r\n   * @param zenith the zenith\r\n   * @return the cosine of the Sun's local hour angle\r\n   */\r\n  private static getCosLocalHourAngle(sunTrueLongitude: number, latitude: number, zenith: number): number {\r\n    const sinDec: number = 0.39782 * SunTimesCalculator.sinDeg(sunTrueLongitude);\r\n    const cosDec: number = SunTimesCalculator.cosDeg(SunTimesCalculator.asinDeg(sinDec));\r\n    return (SunTimesCalculator.cosDeg(zenith) - (sinDec * SunTimesCalculator.sinDeg(latitude))) / (cosDec * SunTimesCalculator.cosDeg(latitude));\r\n  }\r\n\r\n  /**\r\n   * Calculate local mean time of rising or setting. By `local' is meant the exact time at the location, assuming that\r\n   * there were no time zone. That is, the time difference between the location and the Meridian depended entirely on\r\n   * the longitude. We can't do anything with this time directly; we must convert it to UTC and then to a local time.\r\n   * The result is expressed as a fractional number of hours since midnight\r\n   *\r\n   * @param localHour the local hour\r\n   * @param sunRightAscensionHours the sun's right ascention in hours\r\n   * @param approxTimeDays approximate time days\r\n   *\r\n   * @return the fractional number of hours since midnight as a double\r\n   */\r\n  private static getLocalMeanTime(localHour: number, sunRightAscensionHours: number, approxTimeDays: number): number {\r\n    return localHour + sunRightAscensionHours - (0.06571 * approxTimeDays) - 6.622;\r\n  }\r\n\r\n  /**\r\n   * Get sunrise or sunset time in UTC, according to flag.\r\n   *\r\n   * @param year\r\n   *            4-digit year\r\n   * @param month\r\n   *            month, 1-12 (not the zero based Java month\r\n   * @param day\r\n   *            day of month, 1-31\r\n   * @param longitude\r\n   *            in degrees, longitudes west of Meridian are negative\r\n   * @param latitude\r\n   *            in degrees, latitudes south of equator are negative\r\n   * @param zenith\r\n   *            Sun's zenith, in degrees\r\n   * @param type\r\n   *            type of calculation to carry out {@link #TYPE_SUNRISE} or {@link #TYPE_SUNRISE}.\r\n   *\r\n   * @return the time as a double. If an error was encountered in the calculation (expected behavior for some\r\n   *         locations such as near the poles, {@link Double.NaN} will be returned.\r\n   */\r\n  private static getTimeUTC(date: Temporal.PlainDate, longitude: number, latitude: number, zenith: number,\r\n      isSunrise: boolean): number {\r\n    const dayOfYear: number = date.dayOfYear;\r\n    const sunMeanAnomaly: number = SunTimesCalculator.getMeanAnomaly(dayOfYear, longitude, isSunrise);\r\n    const sunTrueLong: number = SunTimesCalculator.getSunTrueLongitude(sunMeanAnomaly);\r\n    const sunRightAscensionHours: number = SunTimesCalculator.getSunRightAscensionHours(sunTrueLong);\r\n    const cosLocalHourAngle: number = SunTimesCalculator.getCosLocalHourAngle(sunTrueLong, latitude, zenith);\r\n\r\n    let localHourAngle: number;\r\n    if (isSunrise) {\r\n      localHourAngle = 360 - SunTimesCalculator.acosDeg(cosLocalHourAngle);\r\n    } else { // sunset\r\n      localHourAngle = SunTimesCalculator.acosDeg(cosLocalHourAngle);\r\n    }\r\n    const localHour: number = localHourAngle / SunTimesCalculator.DEG_PER_HOUR;\r\n\r\n    const localMeanTime: number = SunTimesCalculator.getLocalMeanTime(localHour, sunRightAscensionHours,\r\n      SunTimesCalculator.getApproxTimeDays(dayOfYear, SunTimesCalculator.getHoursFromMeridian(longitude), isSunrise));\r\n    let processedTime: number = localMeanTime - SunTimesCalculator.getHoursFromMeridian(longitude);\r\n    while (processedTime < 0) {\r\n      processedTime += 24;\r\n    }\r\n    while (processedTime >= 24) {\r\n      processedTime -= 24;\r\n    }\r\n    return processedTime;\r\n  }\r\n\r\n  /**\r\n\t * Return the <a href=\"https://en.wikipedia.org/wiki/Universal_Coordinated_Time\">Universal Coordinated Time</a> (UTC)\r\n\t * of <a href=\"https://en.wikipedia.org/wiki/Noon#Solar_noon\">solar noon</a> for the given day at the given location\r\n\t * on earth. This implementation returns solar noon as the time halfway between sunrise and sunset.\r\n\t * Other calculators may return true solar noon. See <a href=\r\n\t * \"https://kosherjava.com/2020/07/02/definition-of-chatzos/\">The Definition of Chatzos</a> for details on solar\r\n\t * noon calculations.\r\n\t * @see com.kosherjava.zmanim.util.AstronomicalCalculator#getUTCNoon(Calendar, GeoLocation)\r\n\t * @see NOAACalculator\r\n\t * \r\n\t * @param calendar\r\n\t *            The Calendar representing the date to calculate solar noon for\r\n\t * @param geoLocation\r\n\t *            The location information used for astronomical calculating sun times.\r\n\t * @return the time in minutes from zero UTC\r\n\t */\r\n  public getUTCNoon(calendar: Temporal.PlainDate, geoLocation: GeoLocation) {\r\n    const sunrise = this.getUTCSunrise(calendar, geoLocation, 90, false);\r\n    const sunset = this.getUTCSunset(calendar, geoLocation, 90, false);\r\n    let noon = (sunrise + ((sunset - sunrise) / 2));\r\n    if(noon < 0) {\r\n\t\t\tnoon += 12;\r\n\t\t}\r\n\t\tif(noon < sunrise) {\r\n\t\t\tnoon -= 12;\r\n\t\t} \r\n\t\treturn noon;\r\n  }\r\n}\r\n","/*\r\n * Zmanim Java API\r\n * Copyright (C) 2019 - 2022 Eliyahu Hershfeld\r\n * Copyright (C) 2019 - 2021 Y Paritcher\r\n *\r\n * This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\r\n * Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option)\r\n * any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied\r\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more\r\n * details.\r\n * You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to\r\n * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA,\r\n * or connect to: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html\r\n */\r\n\r\nimport { Calendar } from '../polyfills/Utils';\r\nimport { JewishCalendar } from './JewishCalendar';\r\nimport { JewishDate } from './JewishDate';\r\nconst { SUNDAY, FRIDAY, SATURDAY } = Calendar;\r\n\r\n/**\r\n * Tefila Rules is a utility class that covers the various <em>halachos</em> and <em>minhagim</em> regarding\r\n * changes to daily <em>tefila</em> / prayers, based on the Jewish calendar. This is mostly useful for use in\r\n * developing <em>siddur</em> type applications, but it is also valuable for <em>shul</em> calendars that set\r\n * <em>tefila</em> times based on if <a href=\"https://en.wikipedia.org/wiki/Tachanun\"><em>tachanun</em></a> is\r\n * recited that day. There are many settings in this class to cover the vast majority of <em>minhagim</em>, but\r\n * there are likely some not covered here. The source for many of the <em>chasidishe minhagim</em> can be found\r\n * in the <a href=\"https://www.nli.org.il/he/books/NNL_ALEPH001141272/NLI\">Minhag Yisrael Torah</a> on Orach\r\n * Chaim 131.\r\n * Dates used in specific communities such as specific <em>yahrzeits</em> or a holidays like Purim Mezhbizh\r\n * (Medzhybizh) celebrated on 11 {@link JewishDate#TEVES <em>Teves</em>} or <a href=\r\n * \"https://en.wikipedia.org/wiki/Second_Purim#Purim_Saragossa_(18_Shevat)\">Purim Saragossa</a> celebrated on\r\n * the (17th or) 18th of {@link JewishDate#SHEVAT <em>Shevat</em>} are not (and likely will not be) supported by\r\n * this class.\r\n * <p>Sample code:\r\n * <pre style=\"background: #FEF0C9; display: inline-block;\">\r\n * TefilaRules tr = new TefilaRules();\r\n * JewishCalendar jewishCalendar = new JewishCalendar();\r\n * HebrewDateFormatter hdf = new HebrewDateFormatter();\r\n * jewishCalendar.setJewishDate(5783, JewishDate.TISHREI, 1); // Rosh Hashana\r\n * System.out.println(hdf.format(jewishCalendar) + \": \" + tr.isTachanunRecitedShacharis(jd));\r\n * jewishCalendar.setJewishDate(5783, JewishDate.ADAR, 17);\r\n * System.out.println(hdf.format(jewishCalendar) + \": \" + tr.isTachanunRecitedShacharis(jewishCalendar));\r\n * tr.setTachanunRecitedWeekOfPurim(false);\r\n * System.out.println(hdf.format(jewishCalendar) + \": \" + tr.isTachanunRecitedShacharis(jewishCalendar));</pre>\r\n * \r\n * @author &copy; Y. Paritcher 2019 - 2021\r\n * @author &copy; Eliyahu Hershfeld 2019 - 2022\r\n * \r\n * @todo The following items may be added at a future date.\r\n * <ol>\r\n * <li><em>Lamnatzaiach</em></li>\r\n * <li><em>Mizmor Lesoda</em></li>\r\n * <li><em>Behab</em></li>\r\n * <li><em>Selichos</em></li>\r\n * <li>...</li>\r\n * </ol>\r\n */\r\nexport class TefilaRules {\r\n  /**\r\n\t * The default value is <code>true</code>.\r\n\t * @see #isTachanunRecitedEndOfTishrei()\r\n\t * @see #setTachanunRecitedEndOfTishrei(boolean)\r\n\t */\r\n  private tachanunRecitedEndOfTishrei:boolean = true;\r\n\r\n  /**\r\n\t * The default value is <code>false</code>.\r\n\t * @see #isTachanunRecitedWeekAfterShavuos()\r\n\t * @see #setTachanunRecitedWeekAfterShavuos(boolean)\r\n\t */\r\n  private tachanunRecitedWeekAfterShavuos:boolean = false;\r\n\r\n  /**\r\n\t * The default value is <code>true</code>.\r\n\t * @see #isTachanunRecited13SivanOutOfIsrael()\r\n\t * @see #setTachanunRecited13SivanOutOfIsrael(boolean)\r\n\t */\r\n  private tachanunRecited13SivanOutOfIsrael:boolean = true;\r\n\r\n  /**\r\n\t * The default value is <code>false</code>.\r\n\t * @see #isTachanunRecitedPesachSheni()\r\n\t * @see #setTachanunRecitedPesachSheni(boolean)\r\n\t */\r\n  private tachanunRecitedPesachSheni:boolean = false;\r\n\r\n  /**\r\n\t * The default value is <code>true</code>.\r\n\t * @see #isTachanunRecited15IyarOutOfIsrael()\r\n\t * @see #setTachanunRecited15IyarOutOfIsrael(boolean)\r\n\t */\r\n  private tachanunRecited15IyarOutOfIsrael:boolean = true;\r\n\r\n  /**\r\n\t * The default value is <code>false</code>.\r\n\t * @see #isTachanunRecitedMinchaErevLagBaomer()\r\n\t * @see #setTachanunRecitedMinchaErevLagBaomer(boolean)\r\n\t */\r\n  private tachanunRecitedMinchaErevLagBaomer:boolean = false;\r\n\r\n  /**\r\n\t * The default value is <code>true</code>.\r\n\t * @see #isTachanunRecitedShivasYemeiHamiluim()\r\n\t * @see #setTachanunRecitedShivasYemeiHamiluim(boolean)\r\n\t */\r\n  private tachanunRecitedShivasYemeiHamiluim:boolean = true;\r\n\r\n  /**\r\n\t * The default value is <code>true</code>.\r\n\t * @see #isTachanunRecitedWeekOfHod()\r\n\t * @see #setTachanunRecitedWeekOfHod(boolean)\r\n\t */\r\n  private tachanunRecitedWeekOfHod:boolean = true;\r\n\r\n  /**\r\n\t * The default value is <code>true</code>.\r\n\t * @see #isTachanunRecitedWeekOfPurim()\r\n\t * @see #setTachanunRecitedWeekOfPurim(boolean)\r\n\t */\r\n  private tachanunRecitedWeekOfPurim:boolean = true;\r\n\r\n  /**\r\n\t * The default value is <code>true</code>.\r\n\t * @see #isTachanunRecitedFridays()\r\n\t * @see #setTachanunRecitedFridays(boolean)\r\n\t */\r\n  private tachanunRecitedFridays:boolean = true;\r\n\r\n  /**\r\n\t * The default value is <code>true</code>.\r\n\t * @see #isTachanunRecitedSundays()\r\n\t * @see #setTachanunRecitedSundays(boolean)\r\n\t */\r\n  private tachanunRecitedSundays:boolean = true;\r\n\r\n  /**\r\n\t * The default value is <code>true</code>.\r\n\t * @see #isTachanunRecitedMinchaAllYear()\r\n\t * @see #setTachanunRecitedMinchaAllYear(boolean)\r\n\t */\r\n  private tachanunRecitedMinchaAllYear:boolean = true;\r\n\r\n  /**\r\n\t * Returns if <em>tachanun</em> is recited during <em>shacharis</em> on the day in question. See the many\r\n\t * <em>minhag</em> based settings that are available in this class.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * @return if <em>tachanun</em> is recited during <em>shacharis</em>.\r\n\t * @see #isTachanunRecitedMincha(JewishCalendar)\r\n\t */\r\n  public isTachanunRecitedShacharis(jewishCalendar: JewishCalendar):boolean {\r\n    const holidayIndex:number = jewishCalendar.getYomTovIndex();\r\n    const day:number = jewishCalendar.getJewishDayOfMonth();\r\n    const month:number = jewishCalendar.getJewishMonth();\r\n\r\n    if (jewishCalendar.getDayOfWeek() == SATURDAY\r\n\t\t|| (!this.tachanunRecitedSundays && jewishCalendar.getDayOfWeek() == SUNDAY)\r\n\t\t|| (!this.tachanunRecitedFridays && jewishCalendar.getDayOfWeek() == FRIDAY)\r\n\t\t\t\t|| month == JewishDate.NISSAN\r\n\t\t\t\t|| (month == JewishDate.TISHREI && ((!this.tachanunRecitedEndOfTishrei && day > 8)\r\n\t\t\t\t|| (this.tachanunRecitedEndOfTishrei && (day > 8 && day < 22))))\r\n\t\t\t\t|| (month == JewishDate.SIVAN && (this.tachanunRecitedWeekAfterShavuos && day < 7\r\n\t\t\t\t\t\t|| !this.tachanunRecitedWeekAfterShavuos && day < (!jewishCalendar.getInIsrael()\r\n\t\t\t\t\t\t\t\t&& !this.tachanunRecited13SivanOutOfIsrael ? 14 : 13)))\r\n\t\t\t\t|| (jewishCalendar.isYomTov() && (!jewishCalendar.isTaanis()\r\n\t\t\t\t\t\t|| (!this.tachanunRecitedPesachSheni && holidayIndex == JewishCalendar.PESACH_SHENI))) // Erev YT is included in isYomTov()\r\n\t\t\t\t|| (!jewishCalendar.getInIsrael() && !this.tachanunRecitedPesachSheni && !this.tachanunRecited15IyarOutOfIsrael\r\n\t\t\t\t\t\t&& jewishCalendar.getJewishMonth() == JewishDate.IYAR && day == 15)\r\n\t\t\t\t|| holidayIndex == JewishCalendar.TISHA_BEAV || jewishCalendar.isIsruChag()\r\n\t\t\t\t|| jewishCalendar.isRoshChodesh()\r\n\t\t\t\t|| (!this.tachanunRecitedShivasYemeiHamiluim &&\r\n\t\t\t\t\t\t((!jewishCalendar.isJewishLeapYear() && month == JewishDate.ADAR)\r\n\t\t\t\t\t\t\t\t|| (jewishCalendar.isJewishLeapYear() && month == JewishDate.ADAR_II)) && day > 22)\r\n\t\t\t\t|| (!this.tachanunRecitedWeekOfPurim &&\r\n\t\t\t\t\t\t((!jewishCalendar.isJewishLeapYear() && month == JewishDate.ADAR)\r\n\t\t\t\t\t\t\t\t|| (jewishCalendar.isJewishLeapYear() && month == JewishDate.ADAR_II)) && day > 10 && day < 18)\r\n\t\t\t\t|| (jewishCalendar.isUseModernHolidays()\r\n\t\t\t\t\t\t&& (holidayIndex == JewishCalendar.YOM_HAATZMAUT || holidayIndex == JewishCalendar.YOM_YERUSHALAYIM))\r\n\t\t\t\t|| (!this.tachanunRecitedWeekOfHod && month == JewishDate.IYAR && day > 13 && day < 21)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n\t * Returns if <em>tachanun</em> is recited during <em>mincha</em> on the day in question.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * @return if <em>tachanun</em> is recited during <em>mincha</em>.\r\n\t * @see #isTachanunRecitedShacharis(JewishCalendar)\r\n\t */\r\n  public isTachanunRecitedMincha(jewishCalendar: JewishCalendar):boolean {\r\n    let tomorrow:JewishCalendar = new JewishCalendar();\r\n    tomorrow = jewishCalendar.clone() as JewishCalendar;\r\n    tomorrow.forward(Calendar.DATE, 1);\r\n\t\t\r\n    if (!this.tachanunRecitedMinchaAllYear\r\n\t\t\t\t\t|| jewishCalendar.getDayOfWeek() == Calendar.FRIDAY\r\n\t\t\t\t\t|| !this.isTachanunRecitedShacharis(jewishCalendar) \r\n\t\t\t\t\t|| (!this.isTachanunRecitedShacharis(tomorrow) && \r\n\t\t\t\t\t\t\t!(tomorrow.getYomTovIndex() == JewishCalendar.EREV_ROSH_HASHANA) &&\r\n\t\t\t\t\t\t\t!(tomorrow.getYomTovIndex() == JewishCalendar.EREV_YOM_KIPPUR) &&\r\n\t\t\t\t\t\t\t!(tomorrow.getYomTovIndex() == JewishCalendar.PESACH_SHENI))\r\n\t\t\t\t\t|| !this.tachanunRecitedMinchaErevLagBaomer && tomorrow.getYomTovIndex() == JewishCalendar.LAG_BAOMER) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\t\r\n  /**\r\n\t * Returns if it is the Jewish day (starting the evening before) to start reciting <em>Vesein Tal Umatar Livracha</em>\r\n\t * (<em>Sheailas Geshamim</em>). In Israel this is the 7th day of {@link JewishDate#CHESHVAN <em>Marcheshvan</em>}.\r\n\t * Outside Israel recitation starts on the evening of December 4th (or 5th if it is the year before a civil leap year)\r\n\t * in the 21st century and shifts a day forward every century not evenly divisible by 400. This method will return true\r\n\t * if <em>vesein tal umatar</em> on the current Jewish date that starts on the previous night, so Dec 5/6 will be\r\n\t * returned by this method in the 21st century. <em>vesein tal umatar</em> is not recited on <em>Shabbos</em> and the\r\n\t * start date will be delayed a day when the start day is on a <em>Shabbos</em> (this can only occur out of Israel).\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * \r\n\t * @return true if it is the first Jewish day (starting the prior evening of reciting <em>Vesein Tal Umatar Livracha</em>\r\n\t *         (<em>Sheailas Geshamim</em>).\r\n\t * \r\n\t * @see #isVeseinTalUmatarStartingTonight(JewishCalendar)\r\n\t * @see #isVeseinTalUmatarRecited(JewishCalendar)\r\n\t */\r\n  public isVeseinTalUmatarStartDate(jewishCalendar: JewishCalendar):boolean {\r\n    if (jewishCalendar.getInIsrael()) {\r\n\t\t\t // The 7th Cheshvan can't occur on Shabbos, so always return true for 7 Cheshvan\r\n      if (jewishCalendar.getJewishMonth() == JewishDate.CHESHVAN && jewishCalendar.getJewishDayOfMonth() == 7) {\r\n        return true;\r\n      }\r\n    } else {\r\n      if (jewishCalendar.getDayOfWeek() == SATURDAY) { //Not recited on Friday night\r\n        return false;\r\n      }\r\n      if (jewishCalendar.getDayOfWeek() == Calendar.SUNDAY) { // When starting on Sunday, it can be the start date or delayed from Shabbos\r\n        return jewishCalendar.getTekufasTishreiElapsedDays() == 48 || jewishCalendar.getTekufasTishreiElapsedDays() == 47;\r\n      } \r\n      return jewishCalendar.getTekufasTishreiElapsedDays() == 47;\r\n\t\t\t\r\n    }\r\n    return false; // keep the compiler happy\r\n  }\r\n\t\r\n  /**\r\n\t * Returns if true if tonight is the first night to start reciting <em>Vesein Tal Umatar Livracha</em> (\r\n\t * <em>Sheailas Geshamim</em>). In Israel this is the 7th day of {@link JewishDate#CHESHVAN\r\n\t * <em>Marcheshvan</em>} (so the 6th will return true). Outside Israel recitation starts on the evening\r\n\t * of December 4th (or 5th if it is the year before a civil leap year) in the 21st century and shifts a\r\n\t * day forward every century not evenly divisible by 400. <em>Vesein tal umatar</em> is not recited on\r\n\t * <em>Shabbos</em> and the start date will be delayed a day when the start day is on a <em>Shabbos</em>\r\n\t * (this can only occur out of Israel).\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * \r\n\t * @return true if it is the first Jewish day (starting the prior evening of reciting <em>Vesein Tal Umatar\r\n\t *         Livracha</em> (<em>Sheailas Geshamim</em>).\r\n\t * \r\n\t * @see #isVeseinTalUmatarStartDate(JewishCalendar)\r\n\t * @see #isVeseinTalUmatarRecited(JewishCalendar)\r\n\t */\r\n  public isVeseinTalUmatarStartingTonight(jewishCalendar: JewishCalendar):boolean {\r\n    if (jewishCalendar.getInIsrael()) {\r\n      // The 7th Cheshvan can't occur on Shabbos, so always return true for 6 Cheshvan\r\n      if (jewishCalendar.getJewishMonth() == JewishDate.CHESHVAN && jewishCalendar.getJewishDayOfMonth() == 6) {\r\n        return true;\r\n      }\r\n    } else {\r\n      if (jewishCalendar.getDayOfWeek() == Calendar.FRIDAY) { //Not recited on Friday night\r\n        return false;\r\n      }\r\n      if (jewishCalendar.getDayOfWeek() == Calendar.SATURDAY) { // When starting on motzai Shabbos, it can be the start date or delayed from Friday night\r\n        return jewishCalendar.getTekufasTishreiElapsedDays() == 47 || jewishCalendar.getTekufasTishreiElapsedDays() == 46;\r\n      } \r\n      return jewishCalendar.getTekufasTishreiElapsedDays() == 46;\r\n\t\t\t\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n\t * Returns if <em>Vesein Tal Umatar Livracha</em> (<em>Sheailas Geshamim</em>) is recited. This will return\r\n\t * true for the entire season, even on <em>Shabbos</em> when it is not recited.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * \r\n\t * @return true if <em>Vesein Tal Umatar Livracha</em> (<em>Sheailas Geshamim</em>) is recited.\r\n\t * \r\n\t * @see #isVeseinTalUmatarStartDate(JewishCalendar)\r\n\t * @see #isVeseinTalUmatarStartingTonight(JewishCalendar)\r\n\t */\r\n  public isVeseinTalUmatarRecited(jewishCalendar:JewishCalendar):boolean {\r\n    if (jewishCalendar.getJewishMonth() == JewishDate.NISSAN && jewishCalendar.getJewishDayOfMonth() < 15) {\r\n      return true;\r\n    }\r\n    if (jewishCalendar.getJewishMonth() < JewishDate.CHESHVAN) {\r\n      return false;\r\n    }\r\n    if (jewishCalendar.getInIsrael()) {\r\n      return jewishCalendar.getJewishMonth() != JewishDate.CHESHVAN || jewishCalendar.getJewishDayOfMonth() >= 7;\r\n    } \r\n    return jewishCalendar.getTekufasTishreiElapsedDays() >= 47;\r\n\t\t\r\n  }\r\n\t\r\n  /**\r\n\t * Returns if <em>Vesein Beracha</em> is recited. It is recited from 15 {@link JewishDate#NISSAN <em>Nissan</em>} to the\r\n\t * point that {@link #isVeseinTalUmatarRecited(JewishCalendar) <em>vesein tal umatar</em> is recited}.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * @return true if <em>Vesein Beracha</em> is recited.\r\n\t * @see #isVeseinTalUmatarRecited(JewishCalendar)\r\n\t */\r\n  public isVeseinBerachaRecited(jewishCalendar: JewishCalendar):boolean {\r\n    return !this.isVeseinTalUmatarRecited(jewishCalendar);\r\n  }\r\n\r\n  /**\r\n\t * Returns if the date is the start date for reciting <em>Mashiv Haruach Umorid Hageshem</em>. The date is 22\r\n\t * {@link JewishDate#TISHREI <em>Tishrei</em>}.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * @return true if the date is the start date for reciting <em>Mashiv Haruach Umorid Hageshem</em>.\r\n\t * @see #isMashivHaruachEndDate(JewishCalendar)\r\n\t * @see #isMashivHaruachRecited(JewishCalendar)\r\n\t */\r\n  public isMashivHaruachStartDate(jewishCalendar:JewishCalendar):boolean {\r\n    return jewishCalendar.getJewishMonth() == JewishDate.TISHREI && jewishCalendar.getJewishDayOfMonth() == 22;\r\n  }\r\n\r\n  /**\r\n\t * Returns if the date is the end date for reciting <em>Mashiv Haruach Umorid Hageshem</em>. The date is 15\r\n\t * {@link JewishDate#NISSAN <em>Nissan</em>}.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * @return true if the date is the end date for reciting <em>Mashiv Haruach Umorid Hageshem</em>.\r\n\t * @see #isMashivHaruachStartDate(JewishCalendar)\r\n\t * @see #isMashivHaruachRecited(JewishCalendar)\r\n\t */\r\n  public isMashivHaruachEndDate(jewishCalendar:JewishCalendar):boolean {\r\n    return jewishCalendar.getJewishMonth() == JewishDate.NISSAN && jewishCalendar.getJewishDayOfMonth() == 15;\r\n  }\r\n\r\n  /**\r\n\t * Returns if <em>Mashiv Haruach Umorid Hageshem</em> is recited. This period starts on 22 {@link\r\n\t * JewishDate#TISHREI <em>Tishrei</em>} and ends on the 15th day of {@link JewishDate#NISSAN <em>Nissan</em>}.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * @return true if <em>Mashiv Haruach Umorid Hageshem</em> is recited.\r\n\t * @see #isMashivHaruachStartDate(JewishCalendar)\r\n\t * @see #isMashivHaruachEndDate(JewishCalendar)\r\n\t */\r\n  public isMashivHaruachRecited(jewishCalendar:JewishCalendar):boolean {\r\n    const startDate:JewishDate = new JewishDate(jewishCalendar.getJewishYear(), JewishDate.TISHREI, 22);\r\n    const endDate:JewishDate = new JewishDate(jewishCalendar.getJewishYear(), JewishDate.NISSAN, 15);\r\n    return jewishCalendar.compareTo(startDate) > 0 && jewishCalendar.compareTo(endDate) < 0;\r\n  }\r\n\r\n  /**\r\n\t * Returns if <em>Morid Hatal</em> (or the lack of reciting <em>Mashiv Haruach</em> following <em>nussach Ashkenaz</em>) is\r\n\t * recited. This period starts on the 15th day of {@link JewishDate#NISSAN <em>Nissan</em>} and ends on 22 {@link\r\n\t * JewishDate#TISHREI <em>Tishrei</em>}.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * \r\n\t * @return true if <em>Morid Hatal</em> (or the lack of reciting <em>Mashiv Haruach</em> following <em>nussach Ashkenaz</em>) is recited.\r\n\t */\r\n  public isMoridHatalRecited(jewishCalendar:JewishCalendar):boolean {\r\n    return !this.isMashivHaruachRecited(jewishCalendar) || this.isMashivHaruachStartDate(jewishCalendar) || this.isMashivHaruachEndDate(jewishCalendar);\r\n  }\r\n\t\r\n  /**\r\n\t * Returns if <em>Hallel</em> is recited on the day in question. This will return true for both <em>Hallel shalem</em>\r\n\t * and <em>Chatzi Hallel</em>. See {@link #isHallelShalemRecited(JewishCalendar)} to know if the complete <em>Hallel</em>\r\n\t * is recited.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * @return if <em>Hallel</em> is recited.\r\n\t * @see #isHallelShalemRecited(JewishCalendar)\r\n\t */\r\n  public isHallelRecited(jewishCalendar:JewishCalendar):boolean {\r\n    const day:number = jewishCalendar.getJewishDayOfMonth();\r\n    const month:number = jewishCalendar.getJewishMonth();\r\n    const holidayIndex:number = jewishCalendar.getYomTovIndex();\r\n    const inIsrael:boolean = jewishCalendar.getInIsrael();\r\n\t\t\r\n    if (jewishCalendar.isRoshChodesh()) { //RH returns false for RC\r\n      return true;\r\n    }\r\n    if (jewishCalendar.isChanukah()) {\r\n      return true;\r\n    }\r\n    switch (month) {\r\n      case JewishDate.NISSAN:\r\n        if (day >= 15 && ((inIsrael && day <= 21) || (!inIsrael && day <= 22))) {\r\n          return true;\r\n        }\r\n        break;\r\n      case JewishDate.IYAR: // modern holidays\r\n        if (jewishCalendar.isUseModernHolidays()  && (holidayIndex == JewishCalendar.YOM_HAATZMAUT\r\n\t\t\t\t\t\t|| holidayIndex == JewishCalendar.YOM_YERUSHALAYIM)) {\r\n          return true;\r\n        }\r\n        break;\r\n      case JewishDate.SIVAN:\r\n        if (day == 6 || (!inIsrael && (day == 7))) {\r\n          return true;\r\n        }\r\n        break;\r\n      case JewishDate.TISHREI:\r\n        if (day >= 15 && (day <= 22 || (!inIsrael && (day <= 23)))) {\r\n          return true;\r\n        }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n\t * Returns if <em>hallel shalem</em> is recited on the day in question. This will always return false if {@link\r\n\t * #isHallelRecited(JewishCalendar)} returns false.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * @return if <em>hallel shalem</em> is recited.\r\n\t * @see #isHallelRecited(JewishCalendar)\r\n\t */\r\n  public isHallelShalemRecited(jewishCalendar:JewishCalendar):boolean {\r\n    const day:number = jewishCalendar.getJewishDayOfMonth();\r\n    const month:number = jewishCalendar.getJewishMonth();\r\n    const inIsrael:boolean = jewishCalendar.getInIsrael();\r\n    if (this.isHallelRecited(jewishCalendar)) {\r\n      if ((jewishCalendar.isRoshChodesh() && ! jewishCalendar.isChanukah())\r\n\t\t\t\t\t|| (month == JewishDate.NISSAN && ((inIsrael && day > 15) || (!inIsrael && day > 16)))) {\r\n        return false;\r\n      } \r\n      return true;\r\n\t\t\t\r\n    } \r\n    return false;\r\n  }\r\n\t\r\n  /**\r\n\t * Returns if <a href=\"https://en.wikipedia.org/wiki/Al_HaNissim\"><em>Al HaNissim</em></a> is recited on the day in question.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * @return if <em>al hanissim</em> is recited.\r\n\t * @see JewishCalendar#isChanukah()\r\n\t * @see JewishCalendar#isPurim()\r\n\t * @see JewishCalendar#getIsMukafChoma()\r\n\t */\r\n  public isAlHanissimRecited(jewishCalendar:JewishCalendar): boolean {\r\n\t    return jewishCalendar.isPurim() || jewishCalendar.isChanukah();\r\n  }\r\n\t\r\n  /**\r\n\t * Returns if <em>Yaaleh Veyavo</em> is recited on the day in question.\r\n\t * \r\n\t * @param jewishCalendar the Jewish calendar day.\r\n\t * @return if <em>Yaaleh Veyavo</em> is recited.\r\n\t * @see JewishCalendar#isPesach()\r\n\t * @see JewishCalendar#isShavuos()\r\n\t * @see JewishCalendar#isRoshHashana()\r\n\t * @see JewishCalendar#isYomKippur()\r\n\t * @see JewishCalendar#isSuccos()\r\n\t * @see JewishCalendar#isShminiAtzeres()\r\n\t * @see JewishCalendar#isSimchasTorah()\r\n\t * @see JewishCalendar#isRoshChodesh()\r\n\t */\r\n  public isYaalehVeyavoRecited(jewishCalendar:JewishCalendar):boolean {\r\n\t    return jewishCalendar.isPesach() || jewishCalendar.isShavuos() || jewishCalendar.isRoshHashana() || jewishCalendar.isYomKippur()\r\n\t    \t\t|| jewishCalendar.isSuccos() || jewishCalendar.isShminiAtzeres() || jewishCalendar.isSimchasTorah()\r\n\t    \t\t|| jewishCalendar.isRoshChodesh();\r\n  }\r\n\t\r\n  /**\r\n\t * Is <em>tachanun</em> recited during the week of Purim, from the 11th through the 17th of {@link\r\n\t * JewishDate#ADAR <em>Adar</em>} (on a non-leap year, or {@link JewishDate#ADAR_II <em>Adar II</em>} on a leap year). Some\r\n\t * <em>chasidishe</em> communities do not recite <em>tachanun</em> during this period. See the <a href=\r\n\t * \"https://www.nli.org.il/he/books/NNL_ALEPH001141272/NLI\">Minhag Yisrael Torah</a> 131 and <a href=\r\n\t * \"https://hebrewbooks.org/pdfpager.aspx?req=4692&st=&pgnum=70\">Darkei Chaim Veshalom 191</a>who discuss the\r\n\t * <em>minhag</em> not to recite <em>tachanun</em>. Also see the <a href=\r\n\t * \"https://hebrewbooks.org/pdfpager.aspx?req=8944&st=&pgnum=160\">Mishmeres Shalom (Hadras Shalom)</a> who discusses the\r\n\t * <em>minhag</em> of not reciting it on the 16th and 17th.\r\n\t * @return If <em>tachanun</em> is set to be recited during the week of Purim from the 11th through the 17th of {@link\r\n\t *         JewishDate#ADAR <em>Adar</em>} (on a non-leap year, or {@link JewishDate#ADAR_II <em>Adar II</em>} on a leap year).\r\n\t * @see #setTachanunRecitedWeekOfPurim(boolean)\r\n\t */\r\n  public isTachanunRecitedWeekOfPurim():boolean {\r\n    return this.tachanunRecitedWeekOfPurim;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited during the week of Purim from the 11th through the 17th of {@link\r\n\t * JewishDate#ADAR <em>Adar</em>} (on a non-leap year), or {@link JewishDate#ADAR_II <em>Adar II</em>} (on a leap year).\r\n\t * @param tachanunRecitedWeekOfPurim Sets if <em>tachanun</em> is to recited during the week of Purim from the 11th\r\n\t *         through the 17th of {@link JewishDate#ADAR <em>Adar</em>} (on a non-leap year), or {@link JewishDate#ADAR_II\r\n\t *         <em>Adar II</em>} (on a leap year). Some <em>chasidishe</em> communities do not recite <em>tachanun</em>\r\n\t *         during this period.\r\n\t * @see #isTachanunRecitedWeekOfPurim()\r\n\t */\r\n  public setTachanunRecitedWeekOfPurim(tachanunRecitedWeekOfPurim:boolean):void {\r\n    this.tachanunRecitedWeekOfPurim = tachanunRecitedWeekOfPurim;\r\n  }\r\n\r\n  /**\r\n\t * Is <em>tachanun</em> recited during the <em>sefira</em> week of <em>Hod</em> (14 - 20 {@link JewishDate#IYAR <em>Iyar</em>},\r\n\t * or the 29th - 35th of the {@link JewishCalendar#getDayOfOmer() <em>Omer</em>}). Some <em>chasidishe</em> communities\r\n\t * do not recite <em>tachanun</em> during this week. See Minhag Yisrael Torah 131:Iyar.\r\n\t * @return If <em>tachanun</em> is set to be recited during the <em>sefira</em> week of <em>Hod</em> (14 - 20 {@link\r\n\t *         JewishDate#IYAR <em>Iyar</em>}, or the 29th - 35th of the {@link JewishCalendar#getDayOfOmer() <em>Omer</em>}).\r\n\t * @see #setTachanunRecitedWeekOfHod(boolean)\r\n\t */\r\n  public isTachanunRecitedWeekOfHod():boolean {\r\n    return this.tachanunRecitedWeekOfHod;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited during the <em>sefira</em> week of <em>Hod</em> (14 - 20 {@link JewishDate#IYAR\r\n\t * <em>Iyar</em>}, or the 29th - 35th of the {@link JewishCalendar#getDayOfOmer() <em>Omer</em>}).\r\n\t * @param tachanunRecitedWeekOfHod Sets if <em>tachanun</em> should be recited during the <em>sefira</em> week of\r\n\t * <em>Hod</em>.\r\n\t * @see #isTachanunRecitedWeekOfHod()\r\n\t */\r\n  public setTachanunRecitedWeekOfHod(tachanunRecitedWeekOfHod:boolean):void {\r\n    this.tachanunRecitedWeekOfHod = tachanunRecitedWeekOfHod;\r\n  }\r\n\r\n  /**\r\n\t * Is <em>tachanun</em> recited at the end Of {@link JewishDate#TISHREI <em>Tishrei</em>}.The Magen Avraham 669:1 and the Pri\r\n\t * Chadash 131:7 state that some places to not recite <em>tachanun</em> during this period. The Sh\"UT Chasam Sofer on Choshen\r\n\t * Mishpat 77 writes that this is the <em>minhag</em> in Ashkenaz. The Shaarei Teshuva 131:19 quotes the Sheyarie Kneses\r\n\t * Hagdola who also states that it should not be recited. The Aderes wanted to institute saying <em>tachanun</em> during this\r\n\t * period, but was dissuaded from this by Rav Shmuel Salant who did not want to change the <em>minhag</em> in Yerushalayim.\r\n\t * The Aruch Hashulchan is of the opinion that that this <em>minhag</em> is incorrect, and it should be recited, and The Chazon\r\n\t * Ish also recited <em>tachanun</em> during this period. See the Dirshu edition of the Mishna Berurah for details.\r\n\t * @return If <em>tachanun</em> is set to be recited at the end of {@link JewishDate#TISHREI <em>Tishrei</em>}.\r\n\t * @see #setTachanunRecitedEndOfTishrei(tachanunRecitedEndOfTishrei)\r\n\t */\r\n  public isTachanunRecitedEndOfTishrei():boolean {\r\n    return this.tachanunRecitedEndOfTishrei;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited at the end of {@link JewishDate#TISHREI <em>Tishrei</em>}.\r\n\t * @param tachanunRecitedEndOfTishrei is <em>tachanun</em> recited at the end of {@link JewishDate#TISHREI <em>Tishrei</em>}.\r\n\t * @see #isTachanunRecitedEndOfTishrei()\r\n\t */\r\n  public setTachanunRecitedEndOfTishrei(tachanunRecitedEndOfTishrei:boolean):void {\r\n    this.tachanunRecitedEndOfTishrei = tachanunRecitedEndOfTishrei;\r\n  }\r\n\t\r\n  /**\r\n\t * Is <em>tachanun</em> recited during the week after <em>Shavuos</em>. This is the opinion of the Pri Megadim\r\n\t * quoted by the Mishna Berurah. This is since <em>karbanos</em> of <em>Shavuos</em> have <em>tashlumim</em> for\r\n\t * 7 days, it is still considered like a Yom Tov. The Chazon Ish quoted in the Orchos Rabainu vol. 1 page 68\r\n\t * recited <em>tachanun</em> during this week.\r\n\t * \r\n\t * @return If <em>tachanun</em> is set to be recited during the week after Shavuos.\r\n\t * @see #setTachanunRecitedWeekAfterShavuos(boolean)\r\n\t */\r\n  public isTachanunRecitedWeekAfterShavuos():boolean {\r\n    return this.tachanunRecitedWeekAfterShavuos;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited during the week after <em>Shavuos</em>.\r\n\t * @param tachanunRecitedWeekAfterShavuos is <em>tachanun</em> recited during the week after Shavuos.\r\n\t * @see #isTachanunRecitedWeekAfterShavuos()\r\n\t */\r\n  public setTachanunRecitedWeekAfterShavuos(tachanunRecitedWeekAfterShavuos:boolean):void {\r\n    this.tachanunRecitedWeekAfterShavuos = tachanunRecitedWeekAfterShavuos;\r\n  }\r\n\t\r\n  /**\r\n\t * Is <em>tachanun</em> is recited on the 13th of {@link JewishDate#SIVAN <em>Sivan</em>} (<a href=\r\n\t * \"https://en.wikipedia.org/wiki/Yom_tov_sheni_shel_galuyot\"><em>Yom Tov Sheni shel Galuyos</em></a> of the 7th\r\n\t * day) outside Israel. This is brought down by the Shaarie Teshuva 131:19 quoting the <a href=\r\n\t * \"https://hebrewbooks.org/pdfpager.aspx?req=41295&st=&pgnum=39\">Sheyarei Kneses Hagedola 131:12</a>that\r\n\t * <em>tachanun</em> should not be recited on this day. Rav Shlomo Zalman Orbach in Halichos Shlomo on\r\n\t * Shavuos 12:16:25 is of the opinion that even in <em>chutz laaretz</em> it should be recited since the <em>yemei\r\n\t * Tashlumin</em> are counted based on Israel since that is where the <em>karbanos</em> are brought. Both\r\n\t * {@link #isTachanunRecitedShacharis(JewishCalendar)} and {@link #isTachanunRecitedMincha(JewishCalendar)}\r\n\t * only return false if the location is not set to {@link JewishCalendar#getInIsrael() Israel} and both\r\n\t * {@link #tachanunRecitedWeekAfterShavuos} and {@link #setTachanunRecited13SivanOutOfIsrael} are set to false.\r\n\t * \r\n\t * @return If <em>tachanun</em> is set to be recited on the 13th of {@link JewishDate#SIVAN <em>Sivan</em>} out of Israel.\r\n\t * @see #setTachanunRecited13SivanOutOfIsrael(isTachanunRecitedThirteenSivanOutOfIsrael)\r\n\t * @see #isTachanunRecitedWeekAfterShavuos()\r\n\t */\r\n  public isTachanunRecited13SivanOutOfIsrael():boolean {\r\n    return this.tachanunRecited13SivanOutOfIsrael;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited on the 13th of {@link JewishDate#SIVAN <em>Sivan</em>} (<a href=\r\n\t * \"https://en.wikipedia.org/wiki/Yom_tov_sheni_shel_galuyot\"><em>Yom Tov Sheni shel Galuyos</em></a> of the 7th\r\n\t * day) outside Israel. \r\n\t * @param tachanunRecitedThirteenSivanOutOfIsrael sets if <em>tachanun</em> should be recited on the 13th of {@link\r\n\t *          JewishDate#SIVAN <em>Sivan</em>} out of Israel. Both {@link #isTachanunRecitedShacharis(JewishCalendar)} and\r\n\t *          {@link #isTachanunRecitedMincha(JewishCalendar)} only return false if the location is not set to {@link\r\n\t *          JewishCalendar#getInIsrael() Israel} and both {@link #tachanunRecitedWeekAfterShavuos} and\r\n\t *          {@link #setTachanunRecited13SivanOutOfIsrael} are set to false.\r\n\t * @see #isTachanunRecited13SivanOutOfIsrael()\r\n\t */\r\n  public setTachanunRecited13SivanOutOfIsrael(tachanunRecitedThirteenSivanOutOfIsrael:boolean):void {\r\n    this.tachanunRecited13SivanOutOfIsrael = tachanunRecitedThirteenSivanOutOfIsrael;\r\n  }\r\n\t\r\n  /**\r\n\t * Is <em>tachanun</em> recited on {@link JewishCalendar#PESACH_SHENI <em>Pesach Sheni</em>}. The Pri Chadash 131:7 states\r\n\t * that <em>tachanun</em> should not be recited. The Aruch Hashulchan states that this is the minhag of the <em>sephardim</em>.\r\n\t * the Shaarei Efraim 10:27 also mentions that it is not recited, as does the Siddur Yaavetz (Shaar Hayesod, Chodesh Iyar).\r\n\t * The Pri Megadim (Mishbetzes Hazahav 131:15) and the Chazon Ish (Erev Pesahc Shchal Beshabos, page 203 in <a href=\r\n\t * \"https://he.wikipedia.org/wiki/%D7%A9%D7%A8%D7%99%D7%94_%D7%93%D7%91%D7%9C%D7%99%D7%A6%D7%A7%D7%99\">Rav Sheraya\r\n\t * Devlitzky's</a> comments).\r\n\t * \r\n\t * @return If <em>tachanun</em> is recited on {@link JewishCalendar#PESACH_SHENI <em>Pesach Sheni</em>}.\r\n\t * @see #setTachanunRecitedPesachSheni(boolean)\r\n\t */\r\n  public isTachanunRecitedPesachSheni():boolean {\r\n    return this.tachanunRecitedPesachSheni;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited on {@link JewishCalendar#PESACH_SHENI <em>Pesach Sheni</em>}.\r\n\t * @param tachanunRecitedPesachSheni sets if <em>tachanun</em> should be recited on <em>Pesach Sheni</em>.\r\n\t * @see #isTachanunRecitedPesachSheni()\r\n\t */\r\n  public setTachanunRecitedPesachSheni(tachanunRecitedPesachSheni:boolean):void {\r\n    this.tachanunRecitedPesachSheni = tachanunRecitedPesachSheni;\r\n  }\r\n\t\r\n  /**\r\n\t * Is <em>tachanun</em> recited on 15 {@link JewishDate#IYAR <em>Iyar</em>} (<em>sfaika deyoma</em> of {@link JewishCalendar#PESACH_SHENI\r\n\t * <em>Pesach Sheni</em>}) out of Israel. If {@link #isTachanunRecitedPesachSheni()} is <code>true</code> this will be\r\n\t * ignored even if <code>false</code>.\r\n\t * \r\n\t * @return if <em>tachanun</em> is recited on 15 {@link JewishDate#IYAR <em>Iyar</em>}  (<em>sfaika deyoma</em> of {@link\r\n\t *          JewishCalendar#PESACH_SHENI <em>Pesach Sheni</em>} out of Israel. If {@link #isTachanunRecitedPesachSheni()}\r\n\t *          is <code>true</code> this will be ignored even if <code>false</code>.\r\n\t * @see #setTachanunRecited15IyarOutOfIsrael(boolean)\r\n\t * @see #setTachanunRecitedPesachSheni(boolean)\r\n\t * @see #isTachanunRecitedPesachSheni()\r\n\t */\r\n  public isTachanunRecited15IyarOutOfIsrael():boolean {\r\n    return this.tachanunRecited15IyarOutOfIsrael;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited on the 15th of {@link JewishDate#IYAR <em>Iyar</em>}  (<a href=\r\n\t * \"https://en.wikipedia.org/wiki/Yom_tov_sheni_shel_galuyot\"><em>Yom Tov Sheni shel Galuyos</em></a> of\r\n\t * {@link JewishCalendar#PESACH_SHENI <em>Pesach Sheni</em>}) out of Israel. Ignored if {@link\r\n\t * #isTachanunRecitedPesachSheni()} is <code>true</code>.\r\n\t * \r\n\t * @param tachanunRecited15IyarOutOfIsrael if <em>tachanun</em> should be recited on the 15th of {@link JewishDate#IYAR\r\n\t *          <em>Iyar</em>} (<em>sfaika deyoma</em> of {@link JewishCalendar#PESACH_SHENI <em>Pesach Sheni</em>}) out of Israel.\r\n\t * @see #isTachanunRecited15IyarOutOfIsrael()\r\n\t */\r\n  public setTachanunRecited15IyarOutOfIsrael(tachanunRecited15IyarOutOfIsrael: boolean): void {\r\n    this.tachanunRecited15IyarOutOfIsrael = tachanunRecited15IyarOutOfIsrael;\r\n  }\r\n\t\r\n  /**\r\n\t * Is <em>tachanun</em> recited on <em>mincha</em> on <em>erev {@link JewishCalendar#LAG_BAOMER Lag Baomer}</em>.\r\n\t * @return if <em>tachanun</em> is recited in <em>mincha</em> on <em>erev</em>\r\n\t *          {@link JewishCalendar#LAG_BAOMER <em>Lag Baomer</em>}.\r\n\t * @see #setTachanunRecitedMinchaErevLagBaomer(boolean)\r\n\t */\r\n  public isTachanunRecitedMinchaErevLagBaomer():boolean {\r\n    return this.tachanunRecitedMinchaErevLagBaomer;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited on <em>erev {@link JewishCalendar#LAG_BAOMER Lag Baomer}</em>.\r\n\t * @param tachanunRecitedMinchaErevLagBaomer sets if <em>tachanun</em> should be recited on <em>mincha</em>\r\n\t *          of <em>erev {@link JewishCalendar#LAG_BAOMER Lag Baomer}</em>.\r\n\t * @see #isTachanunRecitedMinchaErevLagBaomer()\r\n\t */\r\n  public setTachanunRecitedMinchaErevLagBaomer(tachanunRecitedMinchaErevLagBaomer:boolean): void {\r\n    this.tachanunRecitedMinchaErevLagBaomer = tachanunRecitedMinchaErevLagBaomer;\r\n  }\r\n\t\r\n  /**\r\n\t * Is <em>tachanun</em> recited during the <em>Shivas Yemei Hamiluim</em>, from the 23 of {@link\r\n\t * JewishDate#ADAR <em>Adar</em>} on a non-leap-year or {@link JewishDate#ADAR_II <em>Adar II</em>} on a\r\n\t * leap year to the end of the month. Some <em>chasidishe</em> communities do not say <em>tachanun</em>\r\n\t * during this week. See <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=4692&st=&pgnum=70\">Darkei\r\n\t * Chaim Veshalom 191</a>.\r\n\t * @return if <em>tachanun</em> is recited during the <em>Shivas Yemei Hamiluim</em>, from the 23 of {@link\r\n\t *          JewishDate#ADAR <em>Adar</em>} on a non-leap-year or {@link JewishDate#ADAR_II <em>Adar II</em>}\r\n\t *          on a leap year to the end of the month.\r\n\t * @see #setTachanunRecitedShivasYemeiHamiluim(boolean)\r\n\t */\r\n  public isTachanunRecitedShivasYemeiHamiluim():boolean {\r\n    return this.tachanunRecitedShivasYemeiHamiluim;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited during the <em>Shivas Yemei Hamiluim</em>, from the 23 of\r\n\t * {@link JewishDate#ADAR <em>Adar</em>} on a non-leap-year or {@link JewishDate#ADAR_II <em>Adar II</em>}\r\n\t * on a leap year to the end of the month.\r\n\t * @param tachanunRecitedShivasYemeiHamiluim sets if <em>tachanun</em> should be recited during the\r\n\t *          <em>Shivas Yemei Hamiluim</em>.\r\n\t * @see #isTachanunRecitedShivasYemeiHamiluim()\r\n\t */\r\n  public setTachanunRecitedShivasYemeiHamiluim(tachanunRecitedShivasYemeiHamiluim:boolean):void {\r\n    this.tachanunRecitedShivasYemeiHamiluim = tachanunRecitedShivasYemeiHamiluim;\r\n  }\r\n\r\n  /**\r\n\t * Is <em>tachanun</em> recited on Fridays. Some <em>chasidishe</em> communities do not recite\r\n\t * <em>tachanun</em> on Fridays. See <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=41190&st=&pgnum=10\">Likutei\r\n\t * Maharich Vol 2 Seder Hanhagos Erev Shabbos</a>. This is also the <em>minhag</em> in Satmar.\r\n\t * @return if <em>tachanun</em> is recited on Fridays.\r\n\t * @see #setTachanunRecitedFridays(boolean)\r\n\t */\r\n  public isTachanunRecitedFridays():boolean {\r\n    return this.tachanunRecitedFridays;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited on Fridays. \r\n\t * @param tachanunRecitedFridays sets if <em>tachanun</em> should be recited on Fridays. Some <em>chasidishe</em>\r\n\t *          communities do not recite <em>tachanun</em> on Fridays.\r\n\t * @see #isTachanunRecitedFridays()\r\n\t */\r\n  public setTachanunRecitedFridays(tachanunRecitedFridays:boolean):void {\r\n    this.tachanunRecitedFridays = tachanunRecitedFridays;\r\n  }\r\n\r\n  /**\r\n\t * Is <em>tachanun</em> recited on Sundays. Some <em>chasidishe</em> communities do not recite\r\n\t * <em>tachanun</em> on Sundays. See <a href=\"https://hebrewbooks.org/pdfpager.aspx?req=41190&st=&pgnum=10\">Likutei\r\n\t * Maharich Vol 2 Seder Hanhagos Erev Shabbos</a>. \r\n\t * @return if <em>tachanun</em> is recited on Sundays.\r\n\t * @see #setTachanunRecitedSundays(boolean)\r\n\t */\r\n  public isTachanunRecitedSundays():boolean {\r\n    return this.tachanunRecitedSundays;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited on Sundays. \r\n\t * @param tachanunRecitedSundays sets if <em>tachanun</em> should be recited on Sundays. Some <em>chasidishe</em>\r\n\t *          communities do not recite <em>tachanun</em> on Sundays.\r\n\t * @see #isTachanunRecitedSundays()\r\n\t */\r\n  public setTachanunRecitedSundays(tachanunRecitedSundays:boolean):void {\r\n    this.tachanunRecitedSundays = tachanunRecitedSundays;\r\n  }\r\n\t\r\n  /**\r\n\t * Is <em>tachanun</em> recited in <em>Mincha</em> the entire year. Some <em>chasidishe</em> communities do not recite\r\n\t * <em>tachanun</em> by <em>Mincha</em> all year round. See<a href=\r\n\t * \"https://hebrewbooks.org/pdfpager.aspx?req=4751&st=&pgnum=105\">Nemukei Orach Chaim 131:3</a>.\r\n\t * @return if <em>tachanun</em> is recited in <em>Mincha</em> the entire year.\r\n\t * @see #setTachanunRecitedMinchaAllYear(boolean)\r\n\t */\r\n  public isTachanunRecitedMinchaAllYear():boolean {\r\n    return this.tachanunRecitedMinchaAllYear;\r\n  }\r\n\r\n  /**\r\n\t * Sets if <em>tachanun</em> should be recited in <em>Mincha</em> the entire year.\r\n\t * @param tachanunRecitedMinchaAllYear sets if <em>tachanun</em> should be recited by <em>mincha</em> all year. If set\r\n\t *          to false, {@link #isTachanunRecitedMincha(JewishCalendar)} will always return false. If set to true (the\r\n\t *          default), it will use the regular rules.\r\n\t * @see #isTachanunRecitedMinchaAllYear()\r\n\t */\r\n  public setTachanunRecitedMinchaAllYear(tachanunRecitedMinchaAllYear:boolean):void {\r\n    this.tachanunRecitedMinchaAllYear = tachanunRecitedMinchaAllYear;\r\n  }\r\n}","import { Daf } from './Daf';\r\nimport { JewishDate } from './JewishDate';\r\nimport { JewishCalendar, Parsha } from './JewishCalendar';\r\nimport { IllegalArgumentException } from '../polyfills/errors';\r\n\r\n/**\r\n * The HebrewDateFormatter class formats a {@link JewishDate}.\r\n *\r\n * The class formats Jewish dates, numbers, <em>Daf Yomi</em> (<em>Bavli</em> and <em>Yerushalmi</em>), the <em>Omer</em>,\r\n * <em>Parshas Hashavua</em> (including the special <em>parshiyos</em> of <em>Shekalim</em>, <em>Zachor</em>, <em>Parah</em>\r\n * and <em>Hachodesh</em>), Yomim Tovim and the Molad (experimental) in Hebrew or Latin chars, and has various settings.\r\n * Sample full date output includes (using various options):\r\n * <ul>\r\n * <li>21 Shevat, 5729</li>\r\n * <li>&#x5DB;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB;&#x5D8;</li>\r\n * <li>&#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5D4;&#x5F3;&#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;</li>\r\n * <li>&#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x05E4; or\r\n * &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x05E3;</li>\r\n * <li>&#x05DB;&#x05F3; &#x05E9;&#x05D1;&#x05D8; &#x05D5;&#x05F3; &#x05D0;&#x05DC;&#x05E4;&#x05D9;&#x05DD;</li>\r\n * </ul>\r\n *\r\n * @see JewishDate\r\n * @see JewishCalendar\r\n *\r\n * @author &copy; Eliyahu Hershfeld 2011 - 2015\r\n */\r\nexport class HebrewDateFormatter {\r\n  /**\r\n   * See {@link #isHebrewFormat()} and {@link #setHebrewFormat(boolean)}.\r\n   */\r\n  private hebrewFormat: boolean = false;\r\n\r\n  /**\r\n   * See {@link #isUseLongHebrewYears()} and {@link #setUseLongHebrewYears(boolean)}.\r\n   */\r\n  private useLonghebrewYears: boolean = false;\r\n\r\n  /**\r\n   * See {@link #isUseGershGershayim()} and {@link #setUseGershGershayim(boolean)}.\r\n   */\r\n\r\n  private useGershGershayim: boolean = true;\r\n  /**\r\n   * See {@link #isLongWeekFormat()} and {@link #setLongWeekFormat(boolean)}.\r\n   */\r\n\r\n  private longWeekFormat: boolean = true;\r\n  /**\r\n   * See {@link #isUseFinalFormLetters()} and {@link #setUseFinalFormLetters(boolean)}.\r\n   */\r\n\r\n  private useFinalFormLetters: boolean = false;\r\n\r\n  /**\r\n   * The internal DateFormat.&nbsp; See {@link #isLongWeekFormat()} and {@link #setLongWeekFormat(boolean)}.\r\n   */\r\n  private weekFormat: Intl.DateTimeFormatOptions | null = null;\r\n\r\n  /**\r\n   * List of transliterated parshiyos using the default <em>Ashkenazi</em> pronunciation.&nbsp; The formatParsha method\r\n\t * uses this for transliterated <em>parsha</em> formatting.&nbsp; This list can be overridden (for <em>Sephardi</em>\r\n\t * English transliteration for example) by setting the {@link #setTransliteratedParshiosList(EnumMap)}.&nbsp; The list\r\n\t * includes double and special <em>parshiyos</em> is set as \"<em>Bereshis, Noach, Lech Lecha, Vayera, Chayei Sara,\r\n\t * Toldos, Vayetzei, Vayishlach, Vayeshev, Miketz, Vayigash, Vayechi, Shemos, Vaera, Bo, Beshalach, Yisro, Mishpatim,\r\n\t * Terumah, Tetzaveh, Ki Sisa, Vayakhel, Pekudei, Vayikra, Tzav, Shmini, Tazria, Metzora, Achrei Mos, Kedoshim, Emor,\r\n\t * Behar, Bechukosai, Bamidbar, Nasso, Beha'aloscha, Sh'lach, Korach, Chukas, Balak, Pinchas, Matos, Masei, Devarim,\r\n\t * Vaeschanan, Eikev, Re'eh, Shoftim, Ki Seitzei, Ki Savo, Nitzavim, Vayeilech, Ha'Azinu, Vezos Habracha,\r\n\t * Vayakhel Pekudei, Tazria Metzora, Achrei Mos Kedoshim, Behar Bechukosai, Chukas Balak, Matos Masei, Nitzavim Vayeilech,\r\n\t * Shekalim, Zachor, Parah, Hachodesh,Shuva, Shira, Hagadol, Chazon, Nachamu</em>\".\r\n   *\r\n   * @see #formatParsha(JewishCalendar)\r\n   */\r\n  private transliteratedParshaMap: Record<Parsha, string> = {\r\n    [Parsha.NONE]: '',\r\n    [Parsha.BERESHIS]: 'Bereshis',\r\n    [Parsha.NOACH]: 'Noach',\r\n    [Parsha.LECH_LECHA]: 'Lech Lecha',\r\n    [Parsha.VAYERA]: 'Vayera',\r\n    [Parsha.CHAYEI_SARA]: 'Chayei Sara',\r\n    [Parsha.TOLDOS]: 'Toldos',\r\n    [Parsha.VAYETZEI]: 'Vayetzei',\r\n    [Parsha.VAYISHLACH]: 'Vayishlach',\r\n    [Parsha.VAYESHEV]: 'Vayeshev',\r\n    [Parsha.MIKETZ]: 'Miketz',\r\n    [Parsha.VAYIGASH]: 'Vayigash',\r\n    [Parsha.VAYECHI]: 'Vayechi',\r\n    [Parsha.SHEMOS]: 'Shemos',\r\n    [Parsha.VAERA]: 'Vaera',\r\n    [Parsha.BO]: 'Bo',\r\n    [Parsha.BESHALACH]: 'Beshalach',\r\n    [Parsha.YISRO]: 'Yisro',\r\n    [Parsha.MISHPATIM]: 'Mishpatim',\r\n    [Parsha.TERUMAH]: 'Terumah',\r\n    [Parsha.TETZAVEH]: 'Tetzaveh',\r\n    [Parsha.KI_SISA]: 'Ki Sisa',\r\n    [Parsha.VAYAKHEL]: 'Vayakhel',\r\n    [Parsha.PEKUDEI]: 'Pekudei',\r\n    [Parsha.VAYIKRA]: 'Vayikra',\r\n    [Parsha.TZAV]: 'Tzav',\r\n    [Parsha.SHMINI]: 'Shmini',\r\n    [Parsha.TAZRIA]: 'Tazria',\r\n    [Parsha.METZORA]: 'Metzora',\r\n    [Parsha.ACHREI_MOS]: 'Achrei Mos',\r\n    [Parsha.KEDOSHIM]: 'Kedoshim',\r\n    [Parsha.EMOR]: 'Emor',\r\n    [Parsha.BEHAR]: 'Behar',\r\n    [Parsha.BECHUKOSAI]: 'Bechukosai',\r\n    [Parsha.BAMIDBAR]: 'Bamidbar',\r\n    [Parsha.NASSO]: 'Nasso',\r\n    [Parsha.BEHAALOSCHA]: 'Beha\\'aloscha',\r\n    [Parsha.SHLACH]: 'Sh\\'lach',\r\n    [Parsha.KORACH]: 'Korach',\r\n    [Parsha.CHUKAS]: 'Chukas',\r\n    [Parsha.BALAK]: 'Balak',\r\n    [Parsha.PINCHAS]: 'Pinchas',\r\n    [Parsha.MATOS]: 'Matos',\r\n    [Parsha.MASEI]: 'Masei',\r\n    [Parsha.DEVARIM]: 'Devarim',\r\n    [Parsha.VAESCHANAN]: 'Vaeschanan',\r\n    [Parsha.EIKEV]: 'Eikev',\r\n    [Parsha.REEH]: 'Re\\'eh',\r\n    [Parsha.SHOFTIM]: 'Shoftim',\r\n    [Parsha.KI_SEITZEI]: 'Ki Seitzei',\r\n    [Parsha.KI_SAVO]: 'Ki Savo',\r\n    [Parsha.NITZAVIM]: 'Nitzavim',\r\n    [Parsha.VAYEILECH]: 'Vayeilech',\r\n    [Parsha.HAAZINU]: 'Ha\\'Azinu',\r\n    [Parsha.VZOS_HABERACHA]: 'Vezos Habracha',\r\n    [Parsha.VAYAKHEL_PEKUDEI]: 'Vayakhel Pekudei',\r\n    [Parsha.TAZRIA_METZORA]: 'Tazria Metzora',\r\n    [Parsha.ACHREI_MOS_KEDOSHIM]: 'Achrei Mos Kedoshim',\r\n    [Parsha.BEHAR_BECHUKOSAI]: 'Behar Bechukosai',\r\n    [Parsha.CHUKAS_BALAK]: 'Chukas Balak',\r\n    [Parsha.MATOS_MASEI]: 'Matos Masei',\r\n    [Parsha.NITZAVIM_VAYEILECH]: 'Nitzavim Vayeilech',\r\n    [Parsha.SHKALIM]: 'Shekalim',\r\n    [Parsha.ZACHOR]: 'Zachor',\r\n    [Parsha.PARA]: 'Parah',\r\n    [Parsha.HACHODESH]: 'Hachodesh',\r\n    [Parsha.SHUVA]: 'Shuva',\r\n    [Parsha.SHIRA]: 'Shira',\r\n    [Parsha.HAGADOL]: 'Hagadol',\r\n    [Parsha.CHAZON]: 'Chazon',\r\n    [Parsha.NACHAMU]: 'Nachamu',\r\n  };\r\n\r\n  /**\r\n   * Unicode {@link EnumMap} of Hebrew <em>parshiyos</em>.&nbsp; The list includes double and special <em>parshiyos</em> and\r\n\t * contains <code>\"&#x05D1;&#x05E8;&#x05D0;&#x05E9;&#x05D9;&#x05EA;, &#x05E0;&#x05D7;, &#x05DC;&#x05DA; &#x05DC;&#x05DA;,\r\n   *  &#x05D5;&#x05D9;&#x05E8;&#x05D0;, &#x05D7;&#x05D9;&#x05D9; &#x05E9;&#x05E8;&#x05D4;,\r\n   *  &#x05EA;&#x05D5;&#x05DC;&#x05D3;&#x05D5;&#x05EA;, &#x05D5;&#x05D9;&#x05E6;&#x05D0;, &#x05D5;&#x05D9;&#x05E9;&#x05DC;&#x05D7;,\r\n   *  &#x05D5;&#x05D9;&#x05E9;&#x05D1;, &#x05DE;&#x05E7;&#x05E5;, &#x05D5;&#x05D9;&#x05D2;&#x05E9;, &#x05D5;&#x05D9;&#x05D7;&#x05D9;,\r\n   *  &#x05E9;&#x05DE;&#x05D5;&#x05EA;, &#x05D5;&#x05D0;&#x05E8;&#x05D0;, &#x05D1;&#x05D0;, &#x05D1;&#x05E9;&#x05DC;&#x05D7;,\r\n   *  &#x05D9;&#x05EA;&#x05E8;&#x05D5;, &#x05DE;&#x05E9;&#x05E4;&#x05D8;&#x05D9;&#x05DD;, &#x05EA;&#x05E8;&#x05D5;&#x05DE;&#x05D4;,\r\n   *  &#x05EA;&#x05E6;&#x05D5;&#x05D4;, &#x05DB;&#x05D9; &#x05EA;&#x05E9;&#x05D0;, &#x05D5;&#x05D9;&#x05E7;&#x05D4;&#x05DC;,\r\n   *  &#x05E4;&#x05E7;&#x05D5;&#x05D3;&#x05D9;, &#x05D5;&#x05D9;&#x05E7;&#x05E8;&#x05D0;, &#x05E6;&#x05D5;,\r\n   *  &#x05E9;&#x05DE;&#x05D9;&#x05E0;&#x05D9;, &#x05EA;&#x05D6;&#x05E8;&#x05D9;&#x05E2;, &#x05DE;&#x05E6;&#x05E8;&#x05E2;,\r\n   *  &#x05D0;&#x05D7;&#x05E8;&#x05D9; &#x05DE;&#x05D5;&#x05EA;, &#x05E7;&#x05D3;&#x05D5;&#x05E9;&#x05D9;&#x05DD;,\r\n   *  &#x05D0;&#x05DE;&#x05D5;&#x05E8;, &#x05D1;&#x05D4;&#x05E8;, &#x05D1;&#x05D7;&#x05E7;&#x05EA;&#x05D9;,\r\n   *  &#x05D1;&#x05DE;&#x05D3;&#x05D1;&#x05E8;, &#x05E0;&#x05E9;&#x05D0;, &#x05D1;&#x05D4;&#x05E2;&#x05DC;&#x05EA;&#x05DA;,\r\n   *  &#x05E9;&#x05DC;&#x05D7; &#x05DC;&#x05DA;, &#x05E7;&#x05E8;&#x05D7;, &#x05D7;&#x05D5;&#x05E7;&#x05EA;, &#x05D1;&#x05DC;&#x05E7;,\r\n   *  &#x05E4;&#x05D9;&#x05E0;&#x05D7;&#x05E1;, &#x05DE;&#x05D8;&#x05D5;&#x05EA;, &#x05DE;&#x05E1;&#x05E2;&#x05D9;,\r\n   *  &#x05D3;&#x05D1;&#x05E8;&#x05D9;&#x05DD;, &#x05D5;&#x05D0;&#x05EA;&#x05D7;&#x05E0;&#x05DF;, &#x05E2;&#x05E7;&#x05D1;,\r\n   *  &#x05E8;&#x05D0;&#x05D4;, &#x05E9;&#x05D5;&#x05E4;&#x05D8;&#x05D9;&#x05DD;, &#x05DB;&#x05D9; &#x05EA;&#x05E6;&#x05D0;,\r\n   *  &#x05DB;&#x05D9; &#x05EA;&#x05D1;&#x05D5;&#x05D0;, &#5D9;&#x05E6;&#x05D1;&#x05D9;&#x05DD;, &#x05D5;&#x05D9;&#x05DC;&#x05DA;,\r\n   *  &#x05D4;&#x05D0;&#x05D6;&#x05D9;&#x05E0;&#x05D5;, &#x05D5;&#x05D6;&#x05D0;&#x05EA; &#x05D4;&#x05D1;&#x05E8;&#x05DB;&#x05D4;,\r\n   *  &#x05D5;&#x05D9;&#x05E7;&#x05D4;&#x05DC; &#x05E4;&#x05E7;&#x05D5;&#x05D3;&#x05D9;, &#x05EA;&#x05D6;&#x05E8;&#x05D9;&#x05E2;\r\n   *  &#x05DE;&#x05E6;&#x05E8;&#x05E2;, &#x05D0;&#x05D7;&#x05E8;&#x05D9; &#x05DE;&#x05D5;&#x05EA;\r\n   *  &#x05E7;&#x05D3;&#x05D5;&#x05E9;&#x05D9;&#x05DD;, &#x05D1;&#x05D4;&#x05E8; &#x05D1;&#x05D7;&#x05E7;&#x05EA;&#x05D9;,\r\n   *  &#x05D7;&#x05D5;&#x05E7;&#x05EA; &#x05D1;&#x05DC;&#x05E7;, &#x05DE;&#x05D8;&#x05D5;&#x05EA; &#x05DE;&#x05E1;&#x05E2;&#x05D9;,\r\n   *  &#x05E0;&#x05E6;&#x05D1;&#x05D9;&#x05DD; &#x05D5;&#x05D9;&#x05DC;&#x05DA;, &#x05E9;&#x05E7;&#x05DC;&#x05D9;&#x05DD;,\r\n\t *  &#x05D6;&#x05DB;&#x05D5;&#x05E8;, &#x05E4;&#x05E8;&#x05D4;, &#x05D4;&#x05D7;&#x05D3;&#x05E9;,\r\n\t *  &#x05E9;&#x05D5;&#x05D1;&#x05D4;,&#x05E9;&#x05D9;&#x05E8;&#x05D4;,&#x05D4;&#x05D2;&#x05D3;&#x05D5;&#x05DC;,\r\n\t *  &#x05D7;&#x05D6;&#x05D5;&#x05DF;,&#x05E0;&#x05D7;&#x05DE;&#x05D5;\"</code>\r\n   */\r\n  private readonly hebrewParshaMap: Record<Parsha, string> = {\r\n    [Parsha.NONE]: '',\r\n    [Parsha.BERESHIS]: '\\u05D1\\u05E8\\u05D0\\u05E9\\u05D9\\u05EA',\r\n    [Parsha.NOACH]: '\\u05E0\\u05D7',\r\n    [Parsha.LECH_LECHA]: '\\u05DC\\u05DA \\u05DC\\u05DA',\r\n    [Parsha.VAYERA]: '\\u05D5\\u05D9\\u05E8\\u05D0',\r\n    [Parsha.CHAYEI_SARA]: '\\u05D7\\u05D9\\u05D9 \\u05E9\\u05E8\\u05D4',\r\n    [Parsha.TOLDOS]: '\\u05EA\\u05D5\\u05DC\\u05D3\\u05D5\\u05EA',\r\n    [Parsha.VAYETZEI]: '\\u05D5\\u05D9\\u05E6\\u05D0',\r\n    [Parsha.VAYISHLACH]: '\\u05D5\\u05D9\\u05E9\\u05DC\\u05D7',\r\n    [Parsha.VAYESHEV]: '\\u05D5\\u05D9\\u05E9\\u05D1',\r\n    [Parsha.MIKETZ]: '\\u05DE\\u05E7\\u05E5',\r\n    [Parsha.VAYIGASH]: '\\u05D5\\u05D9\\u05D2\\u05E9',\r\n    [Parsha.VAYECHI]: '\\u05D5\\u05D9\\u05D7\\u05D9',\r\n    [Parsha.SHEMOS]: '\\u05E9\\u05DE\\u05D5\\u05EA',\r\n    [Parsha.VAERA]: '\\u05D5\\u05D0\\u05E8\\u05D0',\r\n    [Parsha.BO]: '\\u05D1\\u05D0',\r\n    [Parsha.BESHALACH]: '\\u05D1\\u05E9\\u05DC\\u05D7',\r\n    [Parsha.YISRO]: '\\u05D9\\u05EA\\u05E8\\u05D5',\r\n    [Parsha.MISHPATIM]: '\\u05DE\\u05E9\\u05E4\\u05D8\\u05D9\\u05DD',\r\n    [Parsha.TERUMAH]: '\\u05EA\\u05E8\\u05D5\\u05DE\\u05D4',\r\n    [Parsha.TETZAVEH]: '\\u05EA\\u05E6\\u05D5\\u05D4',\r\n    [Parsha.KI_SISA]: '\\u05DB\\u05D9 \\u05EA\\u05E9\\u05D0',\r\n    [Parsha.VAYAKHEL]: '\\u05D5\\u05D9\\u05E7\\u05D4\\u05DC',\r\n    [Parsha.PEKUDEI]: '\\u05E4\\u05E7\\u05D5\\u05D3\\u05D9',\r\n    [Parsha.VAYIKRA]: '\\u05D5\\u05D9\\u05E7\\u05E8\\u05D0',\r\n    [Parsha.TZAV]: '\\u05E6\\u05D5',\r\n    [Parsha.SHMINI]: '\\u05E9\\u05DE\\u05D9\\u05E0\\u05D9',\r\n    [Parsha.TAZRIA]: '\\u05EA\\u05D6\\u05E8\\u05D9\\u05E2',\r\n    [Parsha.METZORA]: '\\u05DE\\u05E6\\u05E8\\u05E2',\r\n    [Parsha.ACHREI_MOS]: '\\u05D0\\u05D7\\u05E8\\u05D9 \\u05DE\\u05D5\\u05EA',\r\n    [Parsha.KEDOSHIM]: '\\u05E7\\u05D3\\u05D5\\u05E9\\u05D9\\u05DD',\r\n    [Parsha.EMOR]: '\\u05D0\\u05DE\\u05D5\\u05E8',\r\n    [Parsha.BEHAR]: '\\u05D1\\u05D4\\u05E8',\r\n    [Parsha.BECHUKOSAI]: '\\u05D1\\u05D7\\u05E7\\u05EA\\u05D9',\r\n    [Parsha.BAMIDBAR]: '\\u05D1\\u05DE\\u05D3\\u05D1\\u05E8',\r\n    [Parsha.NASSO]: '\\u05E0\\u05E9\\u05D0',\r\n    [Parsha.BEHAALOSCHA]: '\\u05D1\\u05D4\\u05E2\\u05DC\\u05EA\\u05DA',\r\n    [Parsha.SHLACH]: '\\u05E9\\u05DC\\u05D7 \\u05DC\\u05DA',\r\n    [Parsha.KORACH]: '\\u05E7\\u05E8\\u05D7',\r\n    [Parsha.CHUKAS]: '\\u05D7\\u05D5\\u05E7\\u05EA',\r\n    [Parsha.BALAK]: '\\u05D1\\u05DC\\u05E7',\r\n    [Parsha.PINCHAS]: '\\u05E4\\u05D9\\u05E0\\u05D7\\u05E1',\r\n    [Parsha.MATOS]: '\\u05DE\\u05D8\\u05D5\\u05EA',\r\n    [Parsha.MASEI]: '\\u05DE\\u05E1\\u05E2\\u05D9',\r\n    [Parsha.DEVARIM]: '\\u05D3\\u05D1\\u05E8\\u05D9\\u05DD',\r\n    [Parsha.VAESCHANAN]: '\\u05D5\\u05D0\\u05EA\\u05D7\\u05E0\\u05DF',\r\n    [Parsha.EIKEV]: '\\u05E2\\u05E7\\u05D1',\r\n    [Parsha.REEH]: '\\u05E8\\u05D0\\u05D4',\r\n    [Parsha.SHOFTIM]: '\\u05E9\\u05D5\\u05E4\\u05D8\\u05D9\\u05DD',\r\n    [Parsha.KI_SEITZEI]: '\\u05DB\\u05D9 \\u05EA\\u05E6\\u05D0',\r\n    [Parsha.KI_SAVO]: '\\u05DB\\u05D9 \\u05EA\\u05D1\\u05D5\\u05D0',\r\n    [Parsha.NITZAVIM]: '\\u05E0\\u05E6\\u05D1\\u05D9\\u05DD',\r\n    [Parsha.VAYEILECH]: '\\u05D5\\u05D9\\u05DC\\u05DA',\r\n    [Parsha.HAAZINU]: '\\u05D4\\u05D0\\u05D6\\u05D9\\u05E0\\u05D5',\r\n    [Parsha.VZOS_HABERACHA]: '\\u05D5\\u05D6\\u05D0\\u05EA \\u05D4\\u05D1\\u05E8\\u05DB\\u05D4 ',\r\n    [Parsha.VAYAKHEL_PEKUDEI]: '\\u05D5\\u05D9\\u05E7\\u05D4\\u05DC \\u05E4\\u05E7\\u05D5\\u05D3\\u05D9',\r\n    [Parsha.TAZRIA_METZORA]: '\\u05EA\\u05D6\\u05E8\\u05D9\\u05E2 \\u05DE\\u05E6\\u05E8\\u05E2',\r\n    [Parsha.ACHREI_MOS_KEDOSHIM]: '\\u05D0\\u05D7\\u05E8\\u05D9 \\u05DE\\u05D5\\u05EA \\u05E7\\u05D3\\u05D5\\u05E9\\u05D9\\u05DD',\r\n    [Parsha.BEHAR_BECHUKOSAI]: '\\u05D1\\u05D4\\u05E8 \\u05D1\\u05D7\\u05E7\\u05EA\\u05D9',\r\n    [Parsha.CHUKAS_BALAK]: '\\u05D7\\u05D5\\u05E7\\u05EA \\u05D1\\u05DC\\u05E7',\r\n    [Parsha.MATOS_MASEI]: '\\u05DE\\u05D8\\u05D5\\u05EA \\u05DE\\u05E1\\u05E2\\u05D9',\r\n    [Parsha.NITZAVIM_VAYEILECH]: '\\u05E0\\u05E6\\u05D1\\u05D9\\u05DD \\u05D5\\u05D9\\u05DC\\u05DA',\r\n    [Parsha.SHKALIM]: '\\u05E9\\u05E7\\u05DC\\u05D9\\u05DD',\r\n    [Parsha.ZACHOR]: '\\u05D6\\u05DB\\u05D5\\u05E8',\r\n    [Parsha.PARA]: '\\u05E4\\u05E8\\u05D4',\r\n    [Parsha.HACHODESH]: '\\u05D4\\u05D7\\u05D3\\u05E9',\r\n    [Parsha.SHUVA]: '\\u05E9\\u05D5\\u05D1\\u05D4',\r\n    [Parsha.SHIRA]: '\\u05E9\\u05D9\\u05E8\\u05D4',\r\n    [Parsha.HAGADOL]: '\\u05D4\\u05D2\\u05D3\\u05D5\\u05DC',\r\n    [Parsha.CHAZON]: '\\u05D7\\u05D6\\u05D5\\u05DF',\r\n    [Parsha.NACHAMU]: '\\u05E0\\u05D7\\u05DE\\u05D5',\r\n  };\r\n\r\n  /**\r\n   * returns if the {@link #formatDayOfWeek(JewishDate)} will use the long format such as\r\n   * &#x05E8;&#x05D0;&#x05E9;&#x05D5;&#x05DF; or short such as &#x05D0; when formatting the day of week in\r\n   * {@link #isHebrewFormat() Hebrew}.\r\n   *\r\n   * @return the longWeekFormat\r\n   * @see #setLongWeekFormat(boolean)\r\n   * @see #formatDayOfWeek(JewishDate)\r\n   */\r\n  public isLongWeekFormat(): boolean {\r\n    return this.longWeekFormat;\r\n  }\r\n\r\n  /**\r\n   * Setting to control if the {@link #formatDayOfWeek(JewishDate)} will use the long format such as\r\n   * &#x05E8;&#x05D0;&#x05E9;&#x05D5;&#x05DF; or short such as &#x05D0; when formatting the day of week in\r\n   * {@link #isHebrewFormat() Hebrew}.\r\n   *\r\n   * @param longWeekFormat\r\n   *            the longWeekFormat to set\r\n   */\r\n  public setLongWeekFormat(longWeekFormat: boolean): void {\r\n    this.longWeekFormat = longWeekFormat;\r\n\r\n    this.weekFormat = {\r\n      weekday: longWeekFormat ? 'long' : 'short',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * The <a href=\"https://en.wikipedia.org/wiki/Geresh#Punctuation_mark\">gersh</a> character is the &#x05F3; char\r\n   * that is similar to a single quote and is used in formatting Hebrew numbers.\r\n   */\r\n  private static readonly GERESH: string = '\\u05F3';\r\n\r\n  /**\r\n   * The <a href=\"https://en.wikipedia.org/wiki/Gershayim#Punctuation_mark\">gershyim</a> character is the &#x05F4; char\r\n   * that is similar to a double quote and is used in formatting Hebrew numbers.\r\n   */\r\n  private static readonly GERSHAYIM: string = '\\u05F4';\r\n\r\n  /**\r\n   * Transliterated month names.&nbsp; Defaults to [\"Nissan\", \"Iyar\", \"Sivan\", \"Tammuz\", \"Av\", \"Elul\", \"Tishrei\", \"Cheshvan\",\r\n   * \"Kislev\", \"Teves\", \"Shevat\", \"Adar\", \"Adar II\", \"Adar I\" ].\r\n   * @see #getTransliteratedMonthList()\r\n   * @see #setTransliteratedMonthList(String[])\r\n   */\r\n  private transliteratedMonths: string[] = ['Nissan', 'Iyar', 'Sivan', 'Tammuz', 'Av', 'Elul', 'Tishrei', 'Cheshvan',\r\n    'Kislev', 'Teves', 'Shevat', 'Adar', 'Adar II', 'Adar I'];\r\n\r\n  /**\r\n   * The Hebrew omer prefix charachter. It defaults to &#x05D1; producing &#x05D1;&#x05E2;&#x05D5;&#x05DE;&#x05E8;,\r\n   * but can be set to &#x05DC; to produce &#x05DC;&#x05E2;&#x05D5;&#x05DE;&#x05E8; (or any other prefix).\r\n   * @see #getHebrewOmerPrefix()\r\n   * @see #setHebrewOmerPrefix(String)\r\n   */\r\n  private hebrewOmerPrefix: string = '\\u05D1';\r\n\r\n  /**\r\n   * The default value for formatting Shabbos (Saturday).&nbsp; Defaults to Shabbos.\r\n   * @see #getTransliteratedShabbosDayOfWeek()\r\n   * @see #setTransliteratedShabbosDayOfWeek(String)\r\n   */\r\n  private transliteratedShabbosDayOfweek: string = 'Shabbos';\r\n\r\n  /**\r\n   * Returns the day of Shabbos transliterated into Latin chars. The default uses Ashkenazi pronunciation \"Shabbos\".\r\n   * This can be overwritten using the {@link #setTransliteratedShabbosDayOfWeek(String)}\r\n   *\r\n   * @return the transliteratedShabbos. The default list of months uses Ashkenazi pronunciation \"Shabbos\".\r\n   * @see #setTransliteratedShabbosDayOfWeek(String)\r\n   * @see #formatDayOfWeek(JewishDate)\r\n   */\r\n  public getTransliteratedShabbosDayOfWeek(): string {\r\n    return this.transliteratedShabbosDayOfweek;\r\n  }\r\n\r\n  /**\r\n   * Setter to override the default transliterated name of \"Shabbos\" to alternate spelling such as \"Shabbat\" used by\r\n   * the {@link #formatDayOfWeek(JewishDate)}\r\n   *\r\n   * @param transliteratedShabbos\r\n   *            the transliteratedShabbos to set\r\n   *\r\n   * @see #getTransliteratedShabbosDayOfWeek()\r\n   * @see #formatDayOfWeek(JewishDate)\r\n   */\r\n  public setTransliteratedShabbosDayOfWeek(transliteratedShabbos: string): void {\r\n    this.transliteratedShabbosDayOfweek = transliteratedShabbos;\r\n  }\r\n\r\n  /**\r\n   * See {@link #getTransliteratedHolidayList()} and {@link #setTransliteratedHolidayList(String[])}.\r\n   */\r\n  private transliteratedHolidays: string[] = ['Erev Pesach', 'Pesach', 'Chol Hamoed Pesach', 'Pesach Sheni',\r\n    'Erev Shavuos', 'Shavuos', 'Seventeenth of Tammuz', 'Tishah B\\'Av', 'Tu B\\'Av', 'Erev Rosh Hashana',\r\n    'Rosh Hashana', 'Fast of Gedalyah', 'Erev Yom Kippur', 'Yom Kippur', 'Erev Succos', 'Succos',\r\n    'Chol Hamoed Succos', 'Hoshana Rabbah', 'Shemini Atzeres', 'Simchas Torah', 'Erev Chanukah', 'Chanukah',\r\n    'Tenth of Teves', 'Tu B\\'Shvat', 'Fast of Esther', 'Purim', 'Shushan Purim', 'Purim Katan', 'Rosh Chodesh',\r\n    'Yom HaShoah', 'Yom Hazikaron', 'Yom Ha\\'atzmaut', 'Yom Yerushalayim', 'Lag B\\'Omer', 'Shushan Purim Katan',\r\n    'Isru Chag'];\r\n\r\n  /**\r\n   * Returns the list of holidays transliterated into Latin chars. This is used by the\r\n   * {@link #formatYomTov(JewishCalendar)} when formatting the Yom Tov String. The default list of months uses\r\n   * Ashkenazi pronunciation in typical American English spelling.\r\n   *\r\n   * @return the list of transliterated holidays. The default list is currently [\"Erev Pesach\", \"Pesach\",\r\n   *         \"Chol Hamoed Pesach\", \"Pesach Sheni\", \"Erev Shavuos\", \"Shavuos\", \"Seventeenth of Tammuz\", \"Tishah B'Av\",\r\n   *         \"Tu B'Av\", \"Erev Rosh Hashana\", \"Rosh Hashana\", \"Fast of Gedalyah\", \"Erev Yom Kippur\", \"Yom Kippur\",\r\n   *         \"Erev Succos\", \"Succos\", \"Chol Hamoed Succos\", \"Hoshana Rabbah\", \"Shemini Atzeres\", \"Simchas Torah\",\r\n   *         \"Erev Chanukah\", \"Chanukah\", \"Tenth of Teves\", \"Tu B'Shvat\", \"Fast of Esther\", \"Purim\", \"Shushan Purim\",\r\n   *         \"Purim Katan\", \"Rosh Chodesh\", \"Yom HaShoah\", \"Yom Hazikaron\", \"Yom Ha'atzmaut\", \"Yom Yerushalayim\",\r\n   *         \"Lag B'Omer\",\"Shushan Purim Katan\",\"Isru Chag\"].\r\n   *\r\n   * @see #setTransliteratedMonthList(String[])\r\n   * @see #formatYomTov(JewishCalendar)\r\n   * @see #isHebrewFormat()\r\n   */\r\n  public getTransliteratedHolidayList(): string[] {\r\n    return this.transliteratedHolidays;\r\n  }\r\n\r\n  /**\r\n   * Sets the list of holidays transliterated into Latin chars. This is used by the\r\n   * {@link #formatYomTov(JewishCalendar)} when formatting the Yom Tov String.\r\n   *\r\n   * @param transliteratedHolidays\r\n   *            the transliteratedHolidays to set. Ensure that the sequence exactly matches the list returned by the\r\n   *            default\r\n   */\r\n  public setTransliteratedHolidayList(transliteratedHolidays: string[]): void {\r\n    this.transliteratedHolidays = transliteratedHolidays;\r\n  }\r\n\r\n  /**\r\n   * Hebrew holiday array in the following format.<br><code>[\"&#x05E2;&#x05E8;&#x05D1; &#x05E4;&#x05E1;&#x05D7;\",\r\n   * \"&#x05E4;&#x05E1;&#x05D7;\", \"&#x05D7;&#x05D5;&#x05DC; &#x05D4;&#x05DE;&#x05D5;&#x05E2;&#x05D3;\r\n   * &#x05E4;&#x05E1;&#x05D7;\", \"&#x05E4;&#x05E1;&#x05D7; &#x05E9;&#x05E0;&#x05D9;\", \"&#x05E2;&#x05E8;&#x05D1;\r\n   * &#x05E9;&#x05D1;&#x05D5;&#x05E2;&#x05D5;&#x05EA;\", \"&#x05E9;&#x05D1;&#x05D5;&#x05E2;&#x05D5;&#x05EA;\",\r\n   * \"&#x05E9;&#x05D1;&#x05E2;&#x05D4; &#x05E2;&#x05E9;&#x05E8; &#x05D1;&#x05EA;&#x05DE;&#x05D5;&#x05D6;\",\r\n   * \"&#x05EA;&#x05E9;&#x05E2;&#x05D4; &#x05D1;&#x05D0;&#x05D1;\",\r\n   * \"&#x05D8;&#x05F4;&#x05D5; &#x05D1;&#x05D0;&#x05D1;\",\r\n   * \"&#x05E2;&#x05E8;&#x05D1; &#x05E8;&#x05D0;&#x05E9; &#x05D4;&#x05E9;&#x05E0;&#x05D4;\",\r\n   * \"&#x05E8;&#x05D0;&#x05E9; &#x05D4;&#x05E9;&#x05E0;&#x05D4;\",\r\n   * \"&#x05E6;&#x05D5;&#x05DD; &#x05D2;&#x05D3;&#x05DC;&#x05D9;&#x05D4;\",\r\n   * \"&#x05E2;&#x05E8;&#x05D1; &#x05D9;&#x05D5;&#x05DD; &#x05DB;&#x05D9;&#x05E4;&#x05D5;&#x05E8;\",\r\n   * \"&#x05D9;&#x05D5;&#x05DD; &#x05DB;&#x05D9;&#x05E4;&#x05D5;&#x05E8;\",\r\n   * \"&#x05E2;&#x05E8;&#x05D1; &#x05E1;&#x05D5;&#x05DB;&#x05D5;&#x05EA;\",\r\n   * \"&#x05E1;&#x05D5;&#x05DB;&#x05D5;&#x05EA;\",\r\n   * \"&#x05D7;&#x05D5;&#x05DC; &#x05D4;&#x05DE;&#x05D5;&#x05E2;&#x05D3; &#x05E1;&#x05D5;&#x05DB;&#x05D5;&#x05EA;\",\r\n   * \"&#x05D4;&#x05D5;&#x05E9;&#x05E2;&#x05E0;&#x05D0; &#x05E8;&#x05D1;&#x05D4;\",\r\n   * \"&#x05E9;&#x05DE;&#x05D9;&#x05E0;&#x05D9; &#x05E2;&#x05E6;&#x05E8;&#x05EA;\",\r\n   * \"&#x05E9;&#x05DE;&#x05D7;&#x05EA; &#x05EA;&#x05D5;&#x05E8;&#x05D4;\",\r\n   * \"&#x05E2;&#x05E8;&#x05D1; &#x05D7;&#x05E0;&#x05D5;&#x05DB;&#x05D4;\",\r\n   * \"&#x05D7;&#x05E0;&#x05D5;&#x05DB;&#x05D4;\", \"&#x05E2;&#x05E9;&#x05E8;&#x05D4; &#x05D1;&#x05D8;&#x05D1;&#x05EA;\",\r\n   * \"&#x05D8;&#x05F4;&#x05D5; &#x05D1;&#x05E9;&#x05D1;&#x05D8;\",\r\n   * \"&#x05EA;&#x05E2;&#x05E0;&#x05D9;&#x05EA; &#x05D0;&#x05E1;&#x05EA;&#x05E8;\",\r\n   * \"&#x05E4;&#x05D5;&#x05E8;&#x05D9;&#x05DD;\",\r\n   * \"&#x05E4;&#x05D5;&#x05E8;&#x05D9;&#x05DD; &#x05E9;&#x05D5;&#x05E9;&#x05DF;\",\r\n   * \"&#x05E4;&#x05D5;&#x05E8;&#x05D9;&#x05DD; &#x05E7;&#x05D8;&#x05DF;\",\r\n   * \"&#x05E8;&#x05D0;&#x05E9; &#x05D7;&#x05D5;&#x05D3;&#x05E9;\",\r\n   * \"&#x05D9;&#x05D5;&#x05DD; &#x05D4;&#x05E9;&#x05D5;&#x05D0;&#x05D4;\",\r\n   * \"&#x05D9;&#x05D5;&#x05DD; &#x05D4;&#x05D6;&#x05D9;&#x05DB;&#x05E8;&#x05D5;&#x05DF;\",\r\n   * \"&#x05D9;&#x05D5;&#x05DD; &#x05D4;&#x05E2;&#x05E6;&#x05DE;&#x05D0;&#x05D5;&#x05EA;\",\r\n   * \"&#x05D9;&#x05D5;&#x05DD; &#x05D9;&#x05E8;&#x05D5;&#x05E9;&#x05DC;&#x05D9;&#x05DD;\",\r\n   * \"&#x05DC;&#x05F4;&#x05D2; &#x05D1;&#x05E2;&#x05D5;&#x05DE;&#x05E8;\",\r\n   * \"&#x05E4;&#x05D5;&#x05E8;&#x05D9;&#x05DD; &#x05E9;&#x05D5;&#x05E9;&#x05DF; &#x05E7;&#x05D8;&#x05DF;\"]</code>\r\n   */\r\n  private static readonly hebrewHolidays: string[] = ['\\u05E2\\u05E8\\u05D1 \\u05E4\\u05E1\\u05D7', '\\u05E4\\u05E1\\u05D7',\r\n    '\\u05D7\\u05D5\\u05DC \\u05D4\\u05DE\\u05D5\\u05E2\\u05D3 \\u05E4\\u05E1\\u05D7',\r\n    '\\u05E4\\u05E1\\u05D7 \\u05E9\\u05E0\\u05D9', '\\u05E2\\u05E8\\u05D1 \\u05E9\\u05D1\\u05D5\\u05E2\\u05D5\\u05EA',\r\n    '\\u05E9\\u05D1\\u05D5\\u05E2\\u05D5\\u05EA',\r\n    '\\u05E9\\u05D1\\u05E2\\u05D4 \\u05E2\\u05E9\\u05E8 \\u05D1\\u05EA\\u05DE\\u05D5\\u05D6',\r\n    '\\u05EA\\u05E9\\u05E2\\u05D4 \\u05D1\\u05D0\\u05D1', '\\u05D8\\u05F4\\u05D5 \\u05D1\\u05D0\\u05D1',\r\n    '\\u05E2\\u05E8\\u05D1 \\u05E8\\u05D0\\u05E9 \\u05D4\\u05E9\\u05E0\\u05D4',\r\n    '\\u05E8\\u05D0\\u05E9 \\u05D4\\u05E9\\u05E0\\u05D4', '\\u05E6\\u05D5\\u05DD \\u05D2\\u05D3\\u05DC\\u05D9\\u05D4',\r\n    '\\u05E2\\u05E8\\u05D1 \\u05D9\\u05D5\\u05DD \\u05DB\\u05D9\\u05E4\\u05D5\\u05E8',\r\n    '\\u05D9\\u05D5\\u05DD \\u05DB\\u05D9\\u05E4\\u05D5\\u05E8', '\\u05E2\\u05E8\\u05D1 \\u05E1\\u05D5\\u05DB\\u05D5\\u05EA',\r\n    '\\u05E1\\u05D5\\u05DB\\u05D5\\u05EA',\r\n    '\\u05D7\\u05D5\\u05DC \\u05D4\\u05DE\\u05D5\\u05E2\\u05D3 \\u05E1\\u05D5\\u05DB\\u05D5\\u05EA',\r\n    '\\u05D4\\u05D5\\u05E9\\u05E2\\u05E0\\u05D0 \\u05E8\\u05D1\\u05D4',\r\n    '\\u05E9\\u05DE\\u05D9\\u05E0\\u05D9 \\u05E2\\u05E6\\u05E8\\u05EA',\r\n    '\\u05E9\\u05DE\\u05D7\\u05EA \\u05EA\\u05D5\\u05E8\\u05D4', '\\u05E2\\u05E8\\u05D1 \\u05D7\\u05E0\\u05D5\\u05DB\\u05D4',\r\n    '\\u05D7\\u05E0\\u05D5\\u05DB\\u05D4', '\\u05E2\\u05E9\\u05E8\\u05D4 \\u05D1\\u05D8\\u05D1\\u05EA',\r\n    '\\u05D8\\u05F4\\u05D5 \\u05D1\\u05E9\\u05D1\\u05D8', '\\u05EA\\u05E2\\u05E0\\u05D9\\u05EA \\u05D0\\u05E1\\u05EA\\u05E8',\r\n    '\\u05E4\\u05D5\\u05E8\\u05D9\\u05DD', '\\u05E4\\u05D5\\u05E8\\u05D9\\u05DD \\u05E9\\u05D5\\u05E9\\u05DF',\r\n    '\\u05E4\\u05D5\\u05E8\\u05D9\\u05DD \\u05E7\\u05D8\\u05DF', '\\u05E8\\u05D0\\u05E9 \\u05D7\\u05D5\\u05D3\\u05E9',\r\n    '\\u05D9\\u05D5\\u05DD \\u05D4\\u05E9\\u05D5\\u05D0\\u05D4',\r\n    '\\u05D9\\u05D5\\u05DD \\u05D4\\u05D6\\u05D9\\u05DB\\u05E8\\u05D5\\u05DF',\r\n    '\\u05D9\\u05D5\\u05DD \\u05D4\\u05E2\\u05E6\\u05DE\\u05D0\\u05D5\\u05EA',\r\n    '\\u05D9\\u05D5\\u05DD \\u05D9\\u05E8\\u05D5\\u05E9\\u05DC\\u05D9\\u05DD',\r\n    '\\u05DC\\u05F4\\u05D2 \\u05D1\\u05E2\\u05D5\\u05DE\\u05E8',\r\n    '\\u05E4\\u05D5\\u05E8\\u05D9\\u05DD \\u05E9\\u05D5\\u05E9\\u05DF \\u05E7\\u05D8\\u05DF',\r\n    '\\u05D0\\u05E1\\u05E8\\u05D5 \\u05D7\\u05D2'];\r\n\r\n  /**\r\n   * Formats the Yom Tov (holiday) in Hebrew or transliterated Latin characters.\r\n   *\r\n   * @param jewishCalendar the JewishCalendar\r\n   * @return the formatted holiday or an empty String if the day is not a holiday.\r\n   * @see #isHebrewFormat()\r\n   */\r\n  public formatYomTov(jewishCalendar: JewishCalendar): string {\r\n    const index: number = jewishCalendar.getYomTovIndex();\r\n    if (index === JewishCalendar.CHANUKAH) {\r\n      const dayOfChanukah: number = jewishCalendar.getDayOfChanukah();\r\n      return this.hebrewFormat\r\n        ? (`${this.formatHebrewNumber(dayOfChanukah)} ${HebrewDateFormatter.hebrewHolidays[index]}`)\r\n        : (`${this.transliteratedHolidays[index]} ${dayOfChanukah}`);\r\n    }\r\n    if (index === -1) return '';\r\n    return this.hebrewFormat ? HebrewDateFormatter.hebrewHolidays[index] : this.transliteratedHolidays[index];\r\n  }\r\n\r\n  /**\r\n   * Formats a day as Rosh Chodesh in the format of in the format of &#x05E8;&#x05D0;&#x05E9;\r\n   * &#x05D7;&#x05D5;&#x05D3;&#x05E9; &#x05E9;&#x05D1;&#x05D8; or Rosh Chodesh Shevat. If it\r\n   * is not Rosh Chodesh, an empty <code>String</code> will be returned.\r\n   * @param jewishCalendar the JewishCalendar\r\n   * @return The formatted <code>String</code> in the format of &#x05E8;&#x05D0;&#x05E9;\r\n   * &#x05D7;&#x05D5;&#x05D3;&#x05E9; &#x05E9;&#x05D1;&#x05D8; or Rosh Chodesh Shevat. If it\r\n   * is not Rosh Chodesh, an empty <code>String</code> will be returned.\r\n   */\r\n  public formatRoshChodesh(jewishCalendar: JewishCalendar): string {\r\n    if (!jewishCalendar.isRoshChodesh()) return '';\r\n\r\n    let formattedRoshChodesh: string;\r\n    let month: number = jewishCalendar.getJewishMonth();\r\n    if (jewishCalendar.getJewishDayOfMonth() === 30) {\r\n      if (month < JewishCalendar.ADAR || (month === JewishCalendar.ADAR && jewishCalendar.isJewishLeapYear())) {\r\n        month++;\r\n      } else { // roll to Nissan\r\n        month = JewishCalendar.NISSAN;\r\n      }\r\n    }\r\n\r\n    // This method is only about formatting, so we shouldn't make any changes to the params passed in...\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const _jewishCalendar = jewishCalendar.clone() as JewishCalendar;\r\n    _jewishCalendar.setJewishMonth(month);\r\n    formattedRoshChodesh = this.hebrewFormat ? HebrewDateFormatter.hebrewHolidays[JewishCalendar.ROSH_CHODESH]\r\n      : this.transliteratedHolidays[JewishCalendar.ROSH_CHODESH];\r\n    formattedRoshChodesh += ` ${this.formatMonth(_jewishCalendar)}`;\r\n    return formattedRoshChodesh;\r\n  }\r\n\r\n  /**\r\n   * Returns if the formatter is set to use Hebrew formatting in the various formatting methods.\r\n   *\r\n   * @return the hebrewFormat\r\n   * @see #setHebrewFormat(boolean)\r\n   * @see #format(JewishDate)\r\n   * @see #formatDayOfWeek(JewishDate)\r\n   * @see #formatMonth(JewishDate)\r\n   * @see #formatOmer(JewishCalendar)\r\n   * @see #formatParsha(JewishCalendar)\r\n   * @see #formatYomTov(JewishCalendar)\r\n   */\r\n  public isHebrewFormat(): boolean {\r\n    return this.hebrewFormat;\r\n  }\r\n\r\n  /**\r\n   * Sets the formatter to format in Hebrew in the various formatting methods.\r\n   *\r\n   * @param hebrewFormat\r\n   *            the hebrewFormat to set\r\n   * @see #isHebrewFormat()\r\n   * @see #format(JewishDate)\r\n   * @see #formatDayOfWeek(JewishDate)\r\n   * @see #formatMonth(JewishDate)\r\n   * @see #formatOmer(JewishCalendar)\r\n   * @see #formatParsha(JewishCalendar)\r\n   * @see #formatYomTov(JewishCalendar)\r\n   */\r\n  public setHebrewFormat(hebrewFormat: boolean): void {\r\n    this.hebrewFormat = hebrewFormat;\r\n  }\r\n\r\n  /**\r\n   * Returns the Hebrew Omer prefix.&nbsp; By default it is the letter &#x05D1; producing\r\n   * &#x05D1;&#x05E2;&#x05D5;&#x05DE;&#x05E8;, but it can be set to &#x05DC; to produce\r\n   * &#x05DC;&#x05E2;&#x05D5;&#x05DE;&#x05E8; (or any other prefix) using the {@link #setHebrewOmerPrefix(String)}.\r\n   *\r\n   * @return the hebrewOmerPrefix\r\n   *\r\n   * @see #hebrewOmerPrefix\r\n   * @see #setHebrewOmerPrefix(String)\r\n   * @see #formatOmer(JewishCalendar)\r\n   */\r\n  public getHebrewOmerPrefix(): string {\r\n    return this.hebrewOmerPrefix;\r\n  }\r\n\r\n  /**\r\n   * Method to set the Hebrew Omer prefix. By default it is the letter &#x5D1;, but this allows setting it to a\r\n   * &#x5DC; (or any other prefix).\r\n   *\r\n   * @param hebrewOmerPrefix\r\n   *            the hebrewOmerPrefix to set. You can use the Unicode &#92;u05DC to set it to &#x5DC;.\r\n   * @see #getHebrewOmerPrefix()\r\n   * @see #formatOmer(JewishCalendar)\r\n   */\r\n  public setHebrewOmerPrefix(hebrewOmerPrefix: string): void {\r\n    this.hebrewOmerPrefix = hebrewOmerPrefix;\r\n  }\r\n\r\n  /**\r\n   * Returns the list of months transliterated into Latin chars. The default list of months uses Ashkenazi\r\n   * pronunciation in typical American English spelling. This list has a length of 14 with 3 variations for Adar -\r\n   * \"Adar\", \"Adar II\", \"Adar I\"\r\n   *\r\n   * @return the list of months beginning in Nissan and ending in in \"Adar\", \"Adar II\", \"Adar I\". The default list is\r\n   *         currently [\"Nissan\", \"Iyar\", \"Sivan\", \"Tammuz\", \"Av\", \"Elul\", \"Tishrei\", \"Cheshvan\", \"Kislev\", \"Teves\",\r\n   *         \"Shevat\", \"Adar\", \"Adar II\", \"Adar I\"].\r\n   * @see #setTransliteratedMonthList(String[])\r\n   */\r\n  public getTransliteratedMonthList(): string[] {\r\n    return this.transliteratedMonths;\r\n  }\r\n\r\n  /**\r\n   * Setter method to allow overriding of the default list of months transliterated into into Latin chars. The default\r\n   * uses Ashkenazi American English transliteration.\r\n   *\r\n   * @param transliteratedMonths\r\n   *            an array of 14 month names that defaults to [\"Nissan\", \"Iyar\", \"Sivan\", \"Tamuz\", \"Av\", \"Elul\", \"Tishrei\",\r\n   *            \"Heshvan\", \"Kislev\", \"Tevet\", \"Shevat\", \"Adar\", \"Adar II\", \"Adar I\"].\r\n   * @see #getTransliteratedMonthList()\r\n   */\r\n  public setTransliteratedMonthList(transliteratedMonths: string[]): void {\r\n    this.transliteratedMonths = transliteratedMonths;\r\n  }\r\n\r\n  /**\r\n   * Unicode list of Hebrew months in the following format <code>[\"\\u05E0\\u05D9\\u05E1\\u05DF\",\"\\u05D0\\u05D9\\u05D9\\u05E8\",\r\n   * \"\\u05E1\\u05D9\\u05D5\\u05DF\",\"\\u05EA\\u05DE\\u05D5\\u05D6\",\"\\u05D0\\u05D1\",\"\\u05D0\\u05DC\\u05D5\\u05DC\",\r\n   * \"\\u05EA\\u05E9\\u05E8\\u05D9\",\"\\u05D7\\u05E9\\u05D5\\u05DF\",\"\\u05DB\\u05E1\\u05DC\\u05D5\",\"\\u05D8\\u05D1\\u05EA\",\r\n   * \"\\u05E9\\u05D1\\u05D8\",\"\\u05D0\\u05D3\\u05E8\",\"\\u05D0\\u05D3\\u05E8 \\u05D1\",\"\\u05D0\\u05D3\\u05E8 \\u05D0\"]</code>\r\n   *\r\n   * @see #formatMonth(JewishDate)\r\n   */\r\n  private hebrewMonths: string[] = ['\\u05E0\\u05D9\\u05E1\\u05DF', '\\u05D0\\u05D9\\u05D9\\u05E8',\r\n    '\\u05E1\\u05D9\\u05D5\\u05DF', '\\u05EA\\u05DE\\u05D5\\u05D6', '\\u05D0\\u05D1', '\\u05D0\\u05DC\\u05D5\\u05DC',\r\n    '\\u05EA\\u05E9\\u05E8\\u05D9', '\\u05D7\\u05E9\\u05D5\\u05DF', '\\u05DB\\u05E1\\u05DC\\u05D5',\r\n    '\\u05D8\\u05D1\\u05EA', '\\u05E9\\u05D1\\u05D8', '\\u05D0\\u05D3\\u05E8', '\\u05D0\\u05D3\\u05E8 \\u05D1',\r\n    '\\u05D0\\u05D3\\u05E8 \\u05D0'];\r\n\r\n  /**\r\n   * Unicode list of Hebrew days of week in the format of <code>[\"&#x05E8;&#x05D0;&#x05E9;&#x05D5;&#x05DF;\",\r\n   * \"&#x05E9;&#x05E0;&#x05D9;\",\"&#x05E9;&#x05DC;&#x05D9;&#x05E9;&#x05D9;\",\"&#x05E8;&#x05D1;&#x05D9;&#x05E2;&#x05D9;\",\r\n   * \"&#x05D7;&#x05DE;&#x05D9;&#x05E9;&#x05D9;\",\"&#x05E9;&#x05E9;&#x05D9;\",\"&#x05E9;&#x05D1;&#x05EA;\"]</code>\r\n   */\r\n  private static readonly hebrewDaysOfWeek: string[] = ['\\u05E8\\u05D0\\u05E9\\u05D5\\u05DF', '\\u05E9\\u05E0\\u05D9',\r\n    '\\u05E9\\u05DC\\u05D9\\u05E9\\u05D9', '\\u05E8\\u05D1\\u05D9\\u05E2\\u05D9', '\\u05D7\\u05DE\\u05D9\\u05E9\\u05D9',\r\n    '\\u05E9\\u05E9\\u05D9', '\\u05E9\\u05D1\\u05EA'];\r\n\r\n  /**\r\n   * Formats the day of week. If {@link #isHebrewFormat() Hebrew formatting} is set, it will display in the format\r\n   * &#x05E8;&#x05D0;&#x05E9;&#x05D5;&#x05DF; etc. If Hebrew formatting is not in use it will return it in the format\r\n   * of Sunday etc. There are various formatting options that will affect the output.\r\n   *\r\n   * @param jewishDate the JewishDate Object\r\n   * @return the formatted day of week\r\n   * @see #isHebrewFormat()\r\n   * @see #isLongWeekFormat()\r\n   */\r\n  public formatDayOfWeek(jewishDate: JewishDate): string {\r\n    if (this.hebrewFormat) {\r\n      if (this.isLongWeekFormat()) {\r\n        return HebrewDateFormatter.hebrewDaysOfWeek[jewishDate.getDayOfWeek() - 1];\r\n      }\r\n\r\n      if (jewishDate.getDayOfWeek() === 7) {\r\n        return this.formatHebrewNumber(300);\r\n      }\r\n\r\n      return this.formatHebrewNumber(jewishDate.getDayOfWeek());\r\n    }\r\n\r\n    if (jewishDate.getDayOfWeek() === 7) {\r\n      if (this.isLongWeekFormat()) {\r\n        return this.getTransliteratedShabbosDayOfWeek();\r\n      }\r\n\r\n      return this.getTransliteratedShabbosDayOfWeek().substring(0, 3);\r\n    }\r\n\r\n    const dateTime = jewishDate.getDate();\r\n    return this.weekFormat\r\n      ? dateTime.toLocaleString(undefined, this.weekFormat)\r\n      : dateTime.toString();\r\n  }\r\n\r\n  /**\r\n   * Returns whether the class is set to use the Geresh &#x5F3; and Gershayim &#x5F4; in formatting Hebrew dates and\r\n   * numbers. When true and output would look like &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x5DB;\r\n   * (or &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x5DA;). When set to false, this output\r\n   * would display as &#x5DB;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB;.\r\n   *\r\n   * @return true if set to use the Geresh &#x5F3; and Gershayim &#x5F4; in formatting Hebrew dates and numbers.\r\n   */\r\n  public isUseGershGershayim(): boolean {\r\n    return this.useGershGershayim;\r\n  }\r\n\r\n  /**\r\n   * Sets whether to use the Geresh &#x5F3; and Gershayim &#x5F4; in formatting Hebrew dates and numbers. The default\r\n   * value is true and output would look like &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x5DB;\r\n   * (or &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5F4;&#x5DA;). When set to false, this output would\r\n   * display as &#x5DB;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB; (or\r\n   * &#x5DB;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DA;). Single digit days or month or years such as &#x05DB;&#x05F3;\r\n   * &#x05E9;&#x05D1;&#x05D8; &#x05D5;&#x05F3; &#x05D0;&#x05DC;&#x05E4;&#x05D9;&#x05DD; show the use of the Geresh.\r\n   *\r\n   * @param useGershGershayim\r\n   *            set to false to omit the Geresh &#x5F3; and Gershayim &#x5F4; in formatting\r\n   */\r\n  public setUseGershGershayim(useGershGershayim: boolean): void {\r\n    this.useGershGershayim = useGershGershayim;\r\n  }\r\n\r\n  /**\r\n   * Returns whether the class is set to use the &#x05DE;&#x05E0;&#x05E6;&#x05E4;&#x05F4;&#x05DA; letters when\r\n   * formatting years ending in 20, 40, 50, 80 and 90 to produce &#x05EA;&#x05E9;&#x05F4;&#x05E4; if false or\r\n   * or &#x05EA;&#x05E9;&#x05F4;&#x05E3; if true. Traditionally non-final form letters are used, so the year\r\n   * 5780 would be formatted as &#x05EA;&#x05E9;&#x05F4;&#x05E4; if the default false is used here. If this returns\r\n   * true, the format &#x05EA;&#x05E9;&#x05F4;&#x05E3; would be used.\r\n   *\r\n   * @return true if set to use final form letters when formatting Hebrew years. The default value is false.\r\n   */\r\n  public isUseFinalFormLetters(): boolean {\r\n    return this.useFinalFormLetters;\r\n  }\r\n\r\n  /**\r\n   * When formatting a Hebrew Year, traditionally years ending in 20, 40, 50, 80 and 90 are formatted using non-final\r\n   * form letters for example &#x05EA;&#x05E9;&#x05F4;&#x05E4; for the year 5780. Setting this to true (the default\r\n   * is false) will use the final form letters for &#x05DE;&#x05E0;&#x05E6;&#x05E4;&#x05F4;&#x05DA; and will format\r\n   * the year 5780 as &#x05EA;&#x05E9;&#x05F4;&#x05E3;.\r\n   *\r\n   * @param useFinalFormLetters\r\n   *            Set this to true to use final form letters when formatting Hebrew years.\r\n   */\r\n  public setUseFinalFormLetters(useFinalFormLetters: boolean): void {\r\n    this.useFinalFormLetters = useFinalFormLetters;\r\n  }\r\n\r\n  /**\r\n   * Returns whether the class is set to use the thousands digit when formatting. When formatting a Hebrew Year,\r\n   * traditionally the thousands digit is omitted and output for a year such as 5729 (1969 Gregorian) would be\r\n   * calculated for 729 and format as &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;. When set to true the long format year such\r\n   * as &#x5D4;&#x5F3; &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8; for 5729/1969 is returned.\r\n   *\r\n   * @return true if set to use the thousands digit when formatting Hebrew dates and numbers.\r\n   */\r\n  public isUseLongHebrewYears(): boolean {\r\n    return this.useLonghebrewYears;\r\n  }\r\n\r\n  /**\r\n   * When formatting a Hebrew Year, traditionally the thousands digit is omitted and output for a year such as 5729\r\n   * (1969 Gregorian) would be calculated for 729 and format as &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;. This method\r\n   * allows setting this to true to return the long format year such as &#x5D4;&#x5F3;\r\n   * &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8; for 5729/1969.\r\n   *\r\n   * @param useLongHebrewYears\r\n   *            Set this to true to use the long formatting\r\n   */\r\n  public setUseLongHebrewYears(useLongHebrewYears: boolean): void {\r\n    this.useLonghebrewYears = useLongHebrewYears;\r\n  }\r\n\r\n  /**\r\n   * Formats the Jewish date. If the formatter is set to Hebrew, it will format in the form, \"day Month year\" for\r\n   * example &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;, and the format\r\n   * \"21 Shevat, 5729\" if not.\r\n   *\r\n   * @param jewishDate\r\n   *            the JewishDate to be formatted\r\n   * @return the formatted date. If the formatter is set to Hebrew, it will format in the form, \"day Month year\" for\r\n   *         example &#x5DB;&#x5F4;&#x5D0; &#x5E9;&#x5D1;&#x5D8; &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;, and the format\r\n   *         \"21 Shevat, 5729\" if not.\r\n   */\r\n  public format(jewishDate: JewishDate): string {\r\n    if (this.isHebrewFormat()) {\r\n      return `${this.formatHebrewNumber(jewishDate.getJewishDayOfMonth())} ${this.formatMonth(jewishDate)} ${this.formatHebrewNumber(jewishDate.getJewishYear())}`;\r\n    }\r\n    return `${jewishDate.getJewishDayOfMonth()} ${this.formatMonth(jewishDate)}, ${jewishDate.getJewishYear()}`;\r\n  }\r\n\r\n  /**\r\n   * Returns a string of the current Hebrew month such as \"Tishrei\". Returns a string of the current Hebrew month such\r\n   * as \"&#x5D0;&#x5D3;&#x5E8; &#x5D1;&#x5F3;\".\r\n   *\r\n   * @param jewishDate\r\n   *            the JewishDate to format\r\n   * @return the formatted month name\r\n   * @see #isHebrewFormat()\r\n   * @see #setHebrewFormat(boolean)\r\n   * @see #getTransliteratedMonthList()\r\n   * @see #setTransliteratedMonthList(String[])\r\n   */\r\n  public formatMonth(jewishDate: JewishDate): string {\r\n    const month: number = jewishDate.getJewishMonth();\r\n    if (this.isHebrewFormat()) {\r\n      if (jewishDate.isJewishLeapYear() && month === JewishDate.ADAR) {\r\n        return this.hebrewMonths[13] + (this.useGershGershayim ? HebrewDateFormatter.GERESH : ''); // return Adar I, not Adar in a leap year\r\n      } else if (jewishDate.isJewishLeapYear() && month === JewishDate.ADAR_II) {\r\n        return this.hebrewMonths[12] + (this.useGershGershayim ? HebrewDateFormatter.GERESH : '');\r\n      }\r\n      return this.hebrewMonths[month - 1];\r\n    }\r\n\r\n    if (jewishDate.isJewishLeapYear() && month === JewishDate.ADAR) {\r\n      return this.transliteratedMonths[13]; // return Adar I, not Adar in a leap year\r\n    }\r\n\r\n    return this.transliteratedMonths[month - 1];\r\n  }\r\n\r\n  /**\r\n   * Returns a String of the Omer day in the form &#x5DC;&#x5F4;&#x5D2; &#x5D1;&#x05E2;&#x05D5;&#x05DE;&#x5E8; if\r\n   * Hebrew Format is set, or \"Omer X\" or \"Lag B'Omer\" if not. An empty string if there is no Omer this day.\r\n   *\r\n   * @param jewishCalendar\r\n   *            the JewishCalendar to be formatted\r\n   *\r\n   * @return a String of the Omer day in the form or an empty string if there is no Omer this day. The default\r\n   *         formatting has a &#x5D1;&#x5F3; prefix that would output &#x5D1;&#x05E2;&#x05D5;&#x05DE;&#x5E8;, but this\r\n   *         can be set via the {@link #setHebrewOmerPrefix(String)} method to use a &#x5DC; and output\r\n   *         &#x5DC;&#x5F4;&#x5D2; &#x5DC;&#x05E2;&#x05D5;&#x05DE;&#x5E8;.\r\n   * @see #isHebrewFormat()\r\n   * @see #getHebrewOmerPrefix()\r\n   * @see #setHebrewOmerPrefix(String)\r\n   */\r\n  public formatOmer(jewishCalendar: JewishCalendar): string {\r\n    const omer: number = jewishCalendar.getDayOfOmer();\r\n    if (omer === -1) {\r\n      return '';\r\n    }\r\n\r\n    if (this.hebrewFormat) {\r\n      return `${this.formatHebrewNumber(omer)} ${this.hebrewOmerPrefix}עומר`;\r\n    }\r\n\r\n    if (omer === 33) { // if Lag B'Omer\r\n      return this.transliteratedHolidays[33];\r\n    }\r\n\r\n    return `Omer ${omer}`;\r\n  }\r\n\r\n  /**\r\n   * Formats a molad.\r\n   * TODO: Experimental and incomplete\r\n   *\r\n   * @param moladChalakim - the chalakim of the molad\r\n   * @return the formatted molad. FIXME: define proper format in English and Hebrew.\r\n   */\r\n  private static formatMolad(moladChalakim: number): string {\r\n    let adjustedChalakim: number = moladChalakim;\r\n    const MINUTE_CHALAKIM: number = 18;\r\n    const HOUR_CHALAKIM: number = 1080;\r\n    const DAY_CHALAKIM: number = 24 * HOUR_CHALAKIM;\r\n\r\n    let days: number = adjustedChalakim / DAY_CHALAKIM;\r\n    adjustedChalakim -= (days * DAY_CHALAKIM);\r\n    const hours: number = Math.trunc(adjustedChalakim / HOUR_CHALAKIM);\r\n    if (hours >= 6) {\r\n      days += 1;\r\n    }\r\n    adjustedChalakim -= (hours * HOUR_CHALAKIM);\r\n    const minutes: number = Math.trunc(adjustedChalakim / MINUTE_CHALAKIM);\r\n    adjustedChalakim -= minutes * MINUTE_CHALAKIM;\r\n    return `Day: ${days % 7} hours: ${hours}, minutes: ${minutes}, chalakim: ${adjustedChalakim}`;\r\n  }\r\n\r\n  /**\r\n   * Returns the kviah in the traditional 3 letter Hebrew format where the first letter represents the day of week of\r\n   * Rosh Hashana, the second letter represents the lengths of Cheshvan and Kislev ({@link JewishDate#SHELAIMIM\r\n     * Shelaimim} , {@link JewishDate#KESIDRAN Kesidran} or {@link JewishDate#CHASERIM Chaserim}) and the 3rd letter\r\n   * represents the day of week of Pesach. For example 5729 (1969) would return &#x5D1;&#x5E9;&#x5D4; (Rosh Hashana on\r\n   * Monday, Shelaimim, and Pesach on Thursday), while 5771 (2011) would return &#x5D4;&#x5E9;&#x5D2; (Rosh Hashana on\r\n   * Thursday, Shelaimim, and Pesach on Tuesday).\r\n   *\r\n   * @param jewishYear\r\n   *            the Jewish year\r\n   * @return the Hebrew String such as &#x5D1;&#x5E9;&#x5D4; for 5729 (1969) and &#x5D4;&#x5E9;&#x5D2; for 5771\r\n   *         (2011).\r\n   */\r\n  public getFormattedKviah(jewishYear: number): string {\r\n    const jewishDate: JewishDate = new JewishDate(jewishYear, JewishDate.TISHREI, 1); // set date to Rosh Hashana\r\n    const kviah: number = jewishDate.getCheshvanKislevKviah();\r\n    const roshHashanaDayOfweek: number = jewishDate.getDayOfWeek();\r\n    let returnValue: string = this.formatHebrewNumber(roshHashanaDayOfweek);\r\n    returnValue += (kviah === JewishDate.CHASERIM ? '\\u05D7' : kviah === JewishDate.SHELAIMIM ? '\\u05E9' : '\\u05DB');\r\n    jewishDate.setJewishDate(jewishYear, JewishDate.NISSAN, 15); // set to Pesach of the given year\r\n    const pesachDayOfweek: number = jewishDate.getDayOfWeek();\r\n    returnValue += this.formatHebrewNumber(pesachDayOfweek);\r\n    returnValue = returnValue.replace(new RegExp(HebrewDateFormatter.GERESH, 'g'), ''); // geresh is never used in the kviah format\r\n    // boolean isLeapYear = JewishDate.isJewishLeapYear(jewishYear);\r\n    // for efficiency we can avoid the expensive recalculation of the pesach day of week by adding 1 day to Rosh\r\n    // Hashana for a 353 day year, 2 for a 354 day year, 3 for a 355 or 383 day year, 4 for a 384 day year and 5 for\r\n    // a 385 day year\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Formats the <a href=\"https://en.wikipedia.org/wiki/Daf_Yomi\">Daf Yomi</a> Bavli in the format of\r\n   * \"&#x05E2;&#x05D9;&#x05E8;&#x05D5;&#x05D1;&#x05D9;&#x05DF; &#x05E0;&#x05F4;&#x05D1;\" in {@link #isHebrewFormat() Hebrew},\r\n   * or the transliterated format of \"Eruvin 52\".\r\n   * @param daf the Daf to be formatted.\r\n   * @return the formatted daf.\r\n   */\r\n  public formatDafYomiBavli(daf: Daf): string {\r\n    if (this.hebrewFormat) {\r\n      return `${daf.getMasechta()} ${this.formatHebrewNumber(daf.getDaf())}`;\r\n    }\r\n    return `${daf.getMasechtaTransliterated()} ${daf.getDaf()}`;\r\n  }\r\n\r\n  /**\r\n   * Formats the <a href=\"https://en.wikipedia.org/wiki/Jerusalem_Talmud#Daf_Yomi_Yerushalmi\">Daf Yomi Yerushalmi</a> in the format\r\n   * of \"&#x05E2;&#x05D9;&#x05E8;&#x05D5;&#x05D1;&#x05D9;&#x05DF; &#x05E0;&#x05F4;&#x05D1;\" in {@link #isHebrewFormat() Hebrew}, or\r\n   * the transliterated format of \"Eruvin 52\".\r\n   *\r\n   * @param daf the Daf to be formatted.\r\n   * @return the formatted daf.\r\n   */\r\n  public formatDafYomiYerushalmi(daf: Daf): string {\r\n    if (daf == null) {\r\n      if (this.hebrewFormat) {\r\n        return Daf.getYerushalmiMasechtos()[39];\r\n      }\r\n\r\n      return Daf.getYerushalmiMasechtosTransliterated()[39];\r\n    }\r\n\r\n    if (this.hebrewFormat) {\r\n      return daf.getYerushalmiMasechta() + ' ' + this.formatHebrewNumber(daf.getDaf());\r\n    }\r\n\r\n    return daf.getYerushalmiMasechtaTransliterated() + ' ' + daf.getDaf();\r\n  }\r\n\r\n  /**\r\n   * Returns a Hebrew formatted string of a number. The method can calculate from 0 - 9999.\r\n   * <ul>\r\n   * <li>Single digit numbers such as 3, 30 and 100 will be returned with a &#x5F3; (<a\r\n   * href=\"https://en.wikipedia.org/wiki/Geresh\">Geresh</a>) appended as at the end. For example &#x5D2;&#x5F3;,\r\n   * &#x5DC;&#x5F3; and &#x5E7;&#x5F3;</li>\r\n   * <li>multi digit numbers such as 21 and 769 will be returned with a &#x5F4; (<a\r\n   * href=\"https://en.wikipedia.org/wiki/Gershayim\">Gershayim</a>) between the second to last and last letters. For\r\n   * example &#x5DB;&#x5F4;&#x5D0;, &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;</li>\r\n   * <li>15 and 16 will be returned as &#x5D8;&#x5F4;&#x5D5; and &#x5D8;&#x5F4;&#x5D6;</li>\r\n   * <li>Single digit numbers (years assumed) such as 6000 (%1000=0) will be returned as &#x5D5;&#x5F3;\r\n   * &#x5D0;&#x5DC;&#x5E4;&#x5D9;&#x5DD;</li>\r\n   * <li>0 will return &#x5D0;&#x5E4;&#x05E1;</li>\r\n   * </ul>\r\n   *\r\n   * @param num\r\n   *            the number to be formatted. It will trow an IllegalArgumentException if the number is &lt; 0 or &gt; 9999.\r\n   * @return the Hebrew formatted number such as &#x5EA;&#x5E9;&#x5DB;&#x5F4;&#x5D8;\r\n   * @see #isUseFinalFormLetters()\r\n   * @see #isUseGershGershayim()\r\n   * @see #isHebrewFormat()\r\n   *\r\n   */\r\n  public formatHebrewNumber(num: number): string {\r\n    if (num !== Math.trunc(num)) throw new IllegalArgumentException('number must be an integer.');\r\n\r\n    if (num < 0) {\r\n      throw new IllegalArgumentException('negative numbers can\\'t be formatted');\r\n    } else if (num > 9999) {\r\n      throw new IllegalArgumentException('numbers > 9999 can\\'t be formatted');\r\n    }\r\n\r\n    const ALAFIM: string = '\\u05D0\\u05DC\\u05E4\\u05D9\\u05DD';\r\n    const EFES: string = '\\u05D0\\u05E4\\u05E1';\r\n\r\n    const jHundreds: string[] = ['', '\\u05E7', '\\u05E8', '\\u05E9', '\\u05EA', '\\u05EA\\u05E7', '\\u05EA\\u05E8',\r\n      '\\u05EA\\u05E9', '\\u05EA\\u05EA', '\\u05EA\\u05EA\\u05E7'];\r\n    const jTens: string[] = ['', '\\u05D9', '\\u05DB', '\\u05DC', '\\u05DE', '\\u05E0', '\\u05E1', '\\u05E2',\r\n      '\\u05E4', '\\u05E6'];\r\n    const jTenEnds: string[] = ['', '\\u05D9', '\\u05DA', '\\u05DC', '\\u05DD', '\\u05DF', '\\u05E1', '\\u05E2',\r\n      '\\u05E3', '\\u05E5'];\r\n    const tavTaz: string[] = ['\\u05D8\\u05D5', '\\u05D8\\u05D6'];\r\n    const jOnes: string[] = ['', '\\u05D0', '\\u05D1', '\\u05D2', '\\u05D3', '\\u05D4', '\\u05D5', '\\u05D6',\r\n      '\\u05D7', '\\u05D8'];\r\n\r\n    if (num === 0) { // do we really need this? Should it be applicable to a date?\r\n      return EFES;\r\n    }\r\n    const shortNumber: number = num % 1000; // discard thousands\r\n    // next check for all possible single Hebrew digit years\r\n    const singleDigitNumber: boolean = (shortNumber < 11 || (shortNumber < 100 && shortNumber % 10 === 0) || (shortNumber <= 400 && shortNumber % 100 === 0));\r\n    const thousands: number = Math.trunc(num / 1000); // get # thousands\r\n    let sb: string = '';\r\n    // append thousands to String\r\n    if (num % 1000 === 0) { // in year is 5000, 4000 etc\r\n      sb = sb.concat(jOnes[thousands]);\r\n      if (this.isUseGershGershayim()) {\r\n        sb = sb.concat(HebrewDateFormatter.GERESH);\r\n      }\r\n      sb = sb.concat(' ');\r\n      sb = sb.concat(ALAFIM); // add # of thousands plus word thousand (overide alafim boolean)\r\n      return sb;\r\n    } else if (this.useLonghebrewYears && num >= 1000) { // if alafim boolean display thousands\r\n      sb = sb.concat(jOnes[thousands]);\r\n      if (this.isUseGershGershayim()) {\r\n        sb = sb.concat(HebrewDateFormatter.GERESH); // append thousands quote\r\n      }\r\n      sb = sb.concat(' ');\r\n    }\r\n    num = num % 1000; // remove 1000s\r\n    const hundreds: number = Math.trunc(num / 100); // # of hundreds\r\n    sb = sb.concat(jHundreds[hundreds]); // add hundreds to String\r\n    num = num % 100; // remove 100s\r\n    if (num === 15) { // special case 15\r\n      sb = sb.concat(tavTaz[0]);\r\n    } else if (num === 16) { // special case 16\r\n      sb = sb.concat(tavTaz[1]);\r\n    } else {\r\n      const tens: number = Math.trunc(num / 10);\r\n      if (num % 10 === 0) { // if evenly divisable by 10\r\n        if (!singleDigitNumber) {\r\n          if (this.isUseFinalFormLetters()) {\r\n            sb = sb.concat(jTenEnds[tens]); // years like 5780 will end with a final form &#x05E3;\r\n          } else {\r\n            sb = sb.concat(jTens[tens]); // years like 5780 will end with a regular &#x05E4;\r\n          }\r\n        } else {\r\n          sb = sb.concat(jTens[tens]); // standard letters so years like 5050 will end with a regular nun\r\n        }\r\n      } else {\r\n        sb = sb.concat(jTens[tens]);\r\n        num = num % 10;\r\n        sb = sb.concat(jOnes[num]);\r\n      }\r\n    }\r\n    if (this.isUseGershGershayim()) {\r\n      if (singleDigitNumber) {\r\n        sb = sb.concat(HebrewDateFormatter.GERESH); // append single quote\r\n      } else { // append double quote before last digit\r\n        sb = sb.substr(0, sb.length - 1)\r\n          .concat(HebrewDateFormatter.GERSHAYIM)\r\n          .concat(sb.substr(sb.length - 1, 1));\r\n      }\r\n    }\r\n    return sb;\r\n  }\r\n\r\n  /**\r\n   * Returns the list of transliterated parshiyos used by this formatter.\r\n   *\r\n   * @return the list of transliterated Parshios\r\n   */\r\n  public getTransliteratedParshiosList(): Record<Parsha, string> {\r\n    return this.transliteratedParshaMap;\r\n  }\r\n\r\n  /**\r\n   * Setter method to allow overriding of the default list of parshiyos transliterated into into Latin chars. The\r\n   * default uses Ashkenazi American English transliteration.\r\n   *\r\n   * @param transliteratedParshaMap\r\n   *            the transliterated Parshios as an EnumMap to set\r\n   * @see #getTransliteratedParshiosList()\r\n   */\r\n  public setTransliteratedParshiosList(transliteratedParshaMap: Record<Parsha, string>): void {\r\n    this.transliteratedParshaMap = transliteratedParshaMap;\r\n  }\r\n\r\n  /**\r\n   * Returns a String with the name of the current parsha(ios). If the formatter is set to format in Hebrew, returns\r\n   * a string of the current parsha(ios) in Hebrew for example &#x05D1;&#x05E8;&#x05D0;&#x05E9;&#x05D9;&#x05EA; or\r\n   * &#x05E0;&#x05E6;&#x05D1;&#x05D9;&#x05DD; &#x05D5;&#x05D9;&#x05DC;&#x05DA; or an empty string if\r\n   * are none. If not set to Hebrew, it returns a string of the parsha(ios) transliterated into Latin chars. The\r\n   * default uses Ashkenazi pronunciation in typical American English spelling, for example Bereshis or\r\n   * Nitzavim Vayeilech or an empty string if there are none.\r\n   *\r\n   * @param jewishCalendar the JewishCalendar Object\r\n   * @return today's parsha(ios) in Hebrew for example, if the formatter is set to format in Hebrew, returns a string\r\n   *         of the current parsha(ios) in Hebrew for example &#x05D1;&#x05E8;&#x05D0;&#x05E9;&#x05D9;&#x05EA; or\r\n   *         &#x05E0;&#x05E6;&#x05D1;&#x05D9;&#x05DD; &#x05D5;&#x05D9;&#x05DC;&#x05DA; or an empty string if\r\n   *         there are none. If not set to Hebrew, it returns a string of the parsha(ios) transliterated into Latin\r\n   *         chars. The default uses Ashkenazi pronunciation in typical American English spelling, for example\r\n   *         Bereshis or Nitzavim Vayeilech or an empty string if there are none.\r\n   */\r\n  public formatParsha(jewishCalendar: JewishCalendar): string {\r\n    const parsha: Parsha = jewishCalendar.getParshah();\r\n    return this.hebrewFormat\r\n      ? this.hebrewParshaMap[parsha] || ''\r\n      : this.transliteratedParshaMap[parsha] || '';\r\n  }\r\n\r\n  /**\r\n   * Returns a String with the name of the current special parsha of Shekalim, Zachor, Parah or Hachodesh or an\r\n   * empty String for a non-special parsha. If the formatter is set to format in Hebrew, it returns a string of\r\n   * the current special parsha in Hebrew, for example &#x05E9;&#x05E7;&#x05DC;&#x05D9;&#x05DD;,\r\n   * &#x05D6;&#x05DB;&#x05D5;&#x05E8;, &#x05E4;&#x05E8;&#x05D4; or &#x05D4;&#x05D7;&#x05D3;&#x05E9;. An empty\r\n   * string if the date is not a special parsha. If not set to Hebrew, it returns a string of the special parsha\r\n   * transliterated into Latin chars. The default uses Ashkenazi pronunciation in typical American English spelling\r\n   * Shekalim, Zachor, Parah or Hachodesh.\r\n   *\r\n   * @param jewishCalendar the JewishCalendar Object\r\n   * @return today's special parsha. If the formatter is set to format in Hebrew, returns a string\r\n   *         of the current special parsha  in Hebrew for in the format of &#x05E9;&#x05E7;&#x05DC;&#x05D9;&#x05DD;,\r\n   *         &#x05D6;&#x05DB;&#x05D5;&#x05E8;, &#x05E4;&#x05E8;&#x05D4; or &#x05D4;&#x05D7;&#x05D3;&#x05E9; or an empty\r\n   *         string if there are none. If not set to Hebrew, it returns a string of the special parsha transliterated\r\n   *         into Latin chars. The default uses Ashkenazi pronunciation in typical American English spelling of Shekalim,\r\n   *         Zachor, Parah or Hachodesh. An empty string if there are none.\r\n   */\r\n  public formatSpecialParsha(jewishCalendar: JewishCalendar): string {\r\n    const specialParsha: Parsha = jewishCalendar.getSpecialShabbos();\r\n    return this.hebrewFormat\r\n      ? this.hebrewParshaMap[specialParsha] || ''\r\n      : this.transliteratedParshaMap[specialParsha] || '';\r\n  }\r\n}\r\n","import { Temporal } from 'temporal-polyfill'\r\nimport _Big from 'big.js';\r\n\r\nimport { GeoLocation } from './util/GeoLocation';\r\nimport { ZmanimCalendar } from './ZmanimCalendar';\r\nimport { ComplexZmanimCalendar } from './ComplexZmanimCalendar';\r\nimport { JsonOutput, ZmanimFormatter } from './util/ZmanimFormatter';\r\n\r\nexport function getZmanimJson(options: Options): JsonOutput {\r\n  const geoLocation: GeoLocation = new GeoLocation(options.locationName || null, options.latitude, options.longitude,\r\n    options.elevation || 0, options.timeZoneId);\r\n\r\n  const zmanimCalendar: ZmanimCalendar = options.complexZmanim\r\n    ? new ComplexZmanimCalendar(geoLocation)\r\n    : new ZmanimCalendar(geoLocation);\r\n\r\n  zmanimCalendar.setDate(options.date || Temporal.Now.plainDateISO());\r\n  return ZmanimFormatter.toJSON(zmanimCalendar);\r\n}\r\n\r\nexport interface Options {\r\n  /**\r\n   * @default Current date and time\r\n   */\r\n  date?: Date | string | number | Temporal.PlainDate;\r\n  /**\r\n   * IANA timezone ID\r\n   */\r\n  timeZoneId: string;\r\n  locationName?: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  /**\r\n   * @default 0\r\n   */\r\n  elevation?: number;\r\n  /**\r\n   * Whether to use `ComplexZmanimCalendar` instead of `ZmanimCalendar`\r\n   * @default false\r\n   */\r\n  complexZmanim?: boolean;\r\n}\r\n\r\nexport * from './util/Time';\r\nexport * from './util/GeoLocation';\r\nexport * from './util/GeoLocationUtils';\r\nexport * from './util/Zman';\r\nexport * from './polyfills/Utils';\r\n\r\nexport * from './util/NOAACalculator';\r\nexport * from './util/SunTimesCalculator';\r\n\r\nexport * from './AstronomicalCalendar';\r\nexport * from './ZmanimCalendar';\r\nexport * from './ComplexZmanimCalendar';\r\n\r\nexport * from './hebrewcalendar/JewishDate';\r\nexport * from './hebrewcalendar/JewishCalendar';\r\nexport * from './hebrewcalendar/Daf';\r\nexport * from './hebrewcalendar/limud/YomiCalculator';\r\nexport * from './hebrewcalendar/limud/YerushalmiYomiCalculator';\r\nexport * from './hebrewcalendar/limud/ChafetzChayimYomiCalculator';\r\nexport * from './hebrewcalendar/TefilaRules'\r\n\r\nexport * from './hebrewcalendar/HebrewDateFormatter';\r\nexport * from './util/ZmanimFormatter';\r\n\r\nexport { _Big, Temporal};"],"names":["bindArgs","n","t","isObjectLike","N","mapProps","o","r","zipProps","mapPropNames","pluckProps","excludeUndefinedProps","allFieldsEqual","createLazyGenerator","createNameDescriptors","createPropDescriptors","e","createGetterDescriptors","createStringTagDescriptors","identityFunc","padNumber","compareNumbers","clampNumber","clampEntity","numberOutOfRange","clampProp","getDefinedProp","missingField","divModFloor","modFloor","divModTrunc","divTrunc","modTrunc","hasHalf","givenFieldsToDayTimeNano","i","a","R","s","B","c","l","nanoToGivenFields","requireObjectlike","requireType","invalidEntity","requireInteger","requireNumberIsInteger","oe","requirePositiveInteger","requireNumberIsPositive","expectedInteger","expectedPositive","requireNonNullish","requirePropDefined","toString","toStringViaPrimitive","ne","toBigInt","invalidBigInt","toNumber","forbiddenBigIntToNumber","expectedFinite","toInteger","toStrictInteger","toPositiveInteger","refineOverflowOptions","Ne","refineZonedFieldOptions","normalizeOptions","Oe","Pe","refineEpochDisambigOptions","refineDiffOptions","ye","parseRoundingIncInteger","be","Ie","checkLargestSmallestUnit","refineRoundingInc","refineRoundOptions","normalizeUnitNameOptions","fe","refineDateDisplayOptions","ve","refineTimeDisplayOptions","refineTimeDisplayTuple","refineSubsecDigits","refineSmallestUnitAndSubsecDigits","pe","he","copyOptions","overrideOverflowOptions","ge","refineUnitOption","M","le","refineChoiceOption","S","createDayTimeNano","addDayTimeNanoAndNumber","addDayTimeNanos","diffDayTimeNanos","compareDayTimeNanos","bigIntToDayTimeNano","numberToDayTimeNano","dayTimeNanoToBigInt","dayTimeNanoToNumber","dayTimeNanoToNumberRemainder","checkIsoYearMonthInBounds","We","Ge","checkIsoDateInBounds","checkIsoDateTimeInBounds","Ae","checkEpochNanoInBounds","isoToEpochNano","$e","xe","D","isoTimeFieldsToNano","Be","nanoToIsoTimeAndDay","epochNanoToSec","Z","epochNanoToMilli","C","isoToEpochMilli","isoArgsToEpochMilli","b","E","isoToEpochNanoWithOffset","isoArgsToEpochSec","w","isoToLegacyDate","epochNanoToIso","epochMilliToIso","Ue","Le","createOptionsTransformer","isoDateFieldsToEpochNano","getSingleInstantFor","queryNativeTimeZone","extractEpochNano","createFormatPrepper","createFormat","Fn","toEpochMillis","He","toEpochMilli","we","f","getId","hashIntlFormatParts","refinePlainDateBag","refineCalendarFields","K","refinePlainYearMonthBag","J","refinePlainMonthDayBag","Un","refineFields","duplicateFields","forbiddenField","wn","ee","refineTimeBag","constrainIsoTimeFields","En","mergeCalendarFields","convertToPlainMonthDay","X","convertToPlainYearMonth","_","convertToIso","refineYear","getCalendarEraOrigins","invalidEra","eraYearToYear","missingYear","refineMonth","parseMonthCode","monthCodeNumberToMonth","getCalendarLeapMonthMeta","u","refineDay","spliceFields","Zn","invalidMonthCode","monthToMonthCodeNumber","Ze","getCalendarIdBase","Ye","computeCalendarIdBase","createIntlFieldCache","createIntlYearMonthCache","An","O","parseIntlYear","ke","buildIntlFormat$1","bn","Yn","computeIntlDateParts","computeIntlEpochMilli","computeIntlLeapMonth","queryMonthStrs","computeIntlDaysInYear","diffEpochMilliByDay","computeIntlDaysInMonth","computeIntlMonthsInYear","parseOffsetNanoMaybe","FixedTimeZone","jn","createSplitTuple","computePeriod","Bn","formatInstantIso","roundDayTimeNanoByInc","formatIsoDateTimeFields","formatOffsetNano","roundToMinute","formatZonedDateTimeIso","formatCalendar","Fe","Me","formatPlainDateTimeIso","roundDateTimeToNano","formatPlainDateIso","formatIsoDateFields","formatPlainYearMonthIso","formatDateLikeIso","formatIsoYearMonthFields","formatPlainMonthDayIso","formatIsoMonthDayFields","formatPlainTimeIso","formatIsoTimeFields","roundTimeToNano","formatDurationIso","balanceDayTimeDurationByInc","getLargestDurationUnit","Hn","negateDurationFields","ie","formatSubsecNano","formatDurationFragments","formatNumberUnscientific","formatCalendarId","v","getSignStr","Y","k","qn","zonedEpochNanoToIso","getMatchingInstantFor","h","T","computeNanosecondsInDay","moveByIsoDays","d","validateTimeZoneOffset","p","totalDayTimeNano","clampRelativeDuration","ue","computeEpochNanoFrac","roundDateTime","roundByInc","computeNanoInc","balanceDayTimeDuration","nanoToDurationDayTimeFields","roundDayTimeNano","durationFieldsToDayTimeNano","roundRelativeDuration","nudgeRelativeDuration","nudgeDurationDayTime","nudgeRelativeDurationTime","clearDurationFields","Ve","m","de","nanoToDurationTimeFields","diffInstants","diffEpochNano","createDurationSlots","diffZonedDateTimes","getCommonCalendarSlot","isTimeZoneSlotsEqual","diffZonedEpochNanoViaCalendar","moveZonedEpochNano","diffPlainDateTimes","diffDateTimesViaCalendar","moveDateTime","diffPlainDates","diffDateLike","diffPlainYearMonth","moveToMonthStart","diffByDay","diffPlainTimes","diffZonedEpochNanoExact","diffEpochNanoExact","diffDateTimesExact","diffDays","computeIsoMonthsInYear","xn","computeIsoDaysInMonth","computeIsoInLeapYear","computeIsoDaysInYear","computeIsoDayOfYear","isoDateYearStart","computeIsoDayOfWeek","computeIsoWeekParts","$n","computeGregoryEraParts","checkIsoDateTimeFields","checkIsoDateFields","constrainIsoDateFields","isIsoDateFieldsValid","Re","moveInstant","createInstantSlots","durationHasDateParts","y","moveZonedDateTime","movePlainDateTime","createPlainDateTimeSlots","movePlainDate","moveDateEfficient","movePlainYearMonth","negateDuration","createPlainYearMonthSlots","movePlainTime","createPlainTimeSlots","moveTime","createMarkerSystem","spanDuration","addDurations","I","computeDurationSign","g","checkDurationFields","ce","realizeCalendarId","normalizeCalendarId","Ee","kn","parseOffsetNano","failedParse","parsePlainDate","parseDateTimeLike","createPlainDateSlots","finalizeDateTime","finalizeDate","requireIsoCalendar","invalidSubstring","finalizeZonedDateTime","createZonedDateTimeSlots","realizeCalendarSlot","ut","organizeIsoYearParts","organizeTimeParts","organizeAnnotationParts","parseYearMonthOnly","ct","parseMonthDayOnly","lt","ft","parseInt0","parseSubsecNano","parseSign","mt","createRegExp","St","yt","gt","ze","Dt","je","ht","createPlainMonthDaySlots","Tt","It","qe","Nt","ae","removeBranding","isIdLikeEqual","getPreferredCalendarSlot","getTimeZoneSlotRaw","createCalendarFieldMethods","Uo","toPlainDateSlots","createCalendarGetters","Kn","kt","neverValueOf","getCalendarFromSlots","Go","compareInstants","compareZonedDateTimes","compareIsoDateTimeFields","compareIsoDateFields","compareIsoTimeFields","instantToZonedDateTime","zonedDateTimeToPlainDateTime","zn","zonedDateTimeToPlainDate","zonedDateTimeToPlainTime","toPlainMonthDaySlots","extractCalendarSlotFromBag","mo","toPlainYearMonthSlots","uo","getCalendarSlotFromBag","dayAdapter","Ro","createCompoundOpsCreator","getImplTransition","toInstantSlots","Mo","slotsWithCalendar","adaptToIsoFields","slotsToIsoFields","createSimpleTimeZoneOps","toZonedDateTimeSlots","z","U","refineTimeZoneSlot","createTimeZoneOps","fo","adapterGetOffsetNanosecondsFor","createAdapterOps","bo","re","wo","toDurationSlots","pt","parseUnit","refinePublicRelativeTo","toPlainDateTimeSlots","L","toPlainTimeSlots","j","dt","createProtocolChecker","optionalToPlainTimeFields","createSlotClass","Class","xo","curryMethod","rejectInvalidBag","refineCalendarSlot","Wo","zo","getCurrentIsoDateTime","getCurrentEpochNanoseconds","getCurrentTimeZoneId","Vo","P","F","q","A","x","$","G","W","V","H","Q","te","se","me","Te","De","Se","Ce","Je","_e","Ke","Qe","Xe","en","nn","tn","on","rn","an","sn","cn","ln","un","dn","fn","mn","pn","hn","Tn","Dn","gn","In","yn","Sn","Nn","On","Pn","vn","Mn","Cn","updateYearMonth","updateYearMonthDay","epochMilliToIntlFields","Rn","Ln","IntlTimeZone","getOffsetSec","pinch","Gn","Wn","Vn","Jn","_n","Qn","Xn","et","nt","tt","ot","rt","it","at","st","Ot","Pt","vt","Mt","Ft","bt","wt","Et","Ct","Zt","Yt","Bt","Rt","Lt","DateTimeFormat","jt","qt","zt","At","Ut","xt","$t","Gt","Wt","Vt","Ht","To","ho","Jt","_t","Kt","po","Io","Co","yo","Qt","Xt","Lo","eo","no","to","oo","ro","io","ao","so","Zo","co","lo","Do","go","So","No","Yo","Oo","Po","qo","vo","Fo","Eo","ko","Bo","jo","Ao","$o","Ho","Jo","DP","RM","MAX_DP","MAX_POWER","NE","PE","STRICT","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","UNDEFINED","NUMERIC","_Big_","Big","parse","nl","round","sd","rm","more","xc","stringify","doExponential","isNonzero","isneg","yc","dp","bl","cmp","ri","bz","ai","al","rl","qc","qi","xlty","ygtx","one","half","Utils","getAllMethodNames","obj","excludeContructors","_obj","methods","key","value","TimeZone","getRawOffset","timeZoneId","timeZone","Temporal","msCount","monthDay","instant","getDisplayName","part","getDSTSavings","plainMonthDay","getOffset","millisSinceEpoch","Calendar","MathUtils","degreesToRadians","degrees","radiansToDegrees","radians","StringUtils","compareTo","string1","string2","IntegerUtils","compare","Long_MIN_VALUE","padZeros","num","places","int","BaseCustomError","message","NullPointerException","IllegalArgumentException","UnsupportedError","_GeoLocation","name","latitude","longitude","elevationOrTimeZoneId","elevation","degreesOrLatitude","minutes","seconds","direction","tempLat","degreesOrLongitude","longTemp","localHoursOffset","location","formula","U1","U2","sinU1","cosU1","sinU2","cosU2","lambda","lambdaP","iterLimit","sinLambda","cosLambda","sinSigma","cosSigma","sigma","sinAlpha","cosSqAlpha","cos2SigmaM","uSq","deltaSigma","distance","fwdAz","revAz","dLon","dPhi","dLat","object","geo","GeoLocation","_AstronomicalCalculator","earthRadius","zenith","adjustedZenith","refraction","solarRadius","AstronomicalCalculator","_NOAACalculator","date","geoLocation","adjustForElevation","sunrise","sunset","year","month","day","julianDay","julianCenturies","mrad","sinm","sin2m","sin3m","sunLongitude","center","sunTrueLongitude","omega","obliquityOfEcliptic","obliquityCorrection","sint","epsilon","geomMeanLongSun","eccentricityEarthOrbit","geomMeanAnomalySun","sin2l0","cos2l0","sin4l0","equationOfTime","lat","solarDec","latRad","sdRad","noonmin","tnoon","eqTime","hourAngle","delta","timeDiff","timeUTC","newt","calendar","noon","solNoonUTC","NOAACalculator","_AstronomicalCalendar","offsetZenith","dawn","startOfday","endOfDay","intValue","clonedCal","startOfDay","temporalHour","offsetTime","index","time","isSunrise","calculatedTime","cal","hours","milliseconds","microseconds","localTimeHours","offsetByDegrees","offsetByTime","incrementor","rawOffsetHours","offset","aCal","astronomicalCalculator","clonedCalendar","AstronomicalCalendar","_JewishDate","moladHours","moladMinutes","moladChalakim","absDate","dayOfMonth","chalakimSince","moladDay","moladParts","roshHashanaDay","monthOfYear","monthsElapsed","hebrewCalendar","chalakim","moladDate","adjustedChalakim","jewishYearOrPlainDateOrDateOrMolad","jewishMonth","jewishDayOfMonth","molad","conjunctionDay","conjunctionParts","fixedMonth","transliteratedMonths","formattedMonth","field","amount","jewishDate","hebCal","cutOffNum","dayOfWeek","clone","JewishDate","_Daf","masechtaNumber","daf","masechtosBavliTransliterated","masechtosYerushalmiTransliterated","Daf","_YomiCalculator","blattPerMasechta","dafYomi","cycleNo","dafNo","total","masechta","blatt","blattInMasechta","YomiCalculator","_YerushalmiYomiCalculator","jewishCalendar","nextCycle","prevCycle","requested","hebrewDate","specialDays","start","end","jewishStartYear","jewishEndYear","yomKippur","tishaBeav","rangeDates","YerushalmiYomiCalculator","middle","inclusive","acceptedValues","ChafetzChayimYomiCalculator","hebrewDateToday","ccyL","ccyNl","limud","dateObj","FRIDAY","SATURDAY","Parsha","_JewishCalendar","jewishYearOrDateTimeOrDate","inIsrael","useModernHolidays","isMukafChoma","elapsedDays","roshHashanah","yearType","holidayIndex","yamimTovimAssurBemelacha","erevYomTov","taaniyos","omer","locationName","yerushalayimStandardTZ","moladSeconds","days","solar","JewishCalendar","_ZmanimCalendar","useElevation","useAstronomicalChatzos","useAstronomicalChatzosForOtherZmanim","candleLightingOffset","currentTime","tzais","shaahZmanis","builtTime","seaLevelSunrise","seaLevelSunset","twilight","riseSetToTwilight","ZmanimCalendar","_ComplexZmanimCalendar","chatzos","diff","alos19Point8","inverseOfSunriseToAlot","ateretTorahSunsetOffset","alos","moladBasedTime","techila","lastMidnight","midnightTonight","zman","startOfHalfDay","endOfHalfDay","ComplexZmanimCalendar","_Time","hoursOrMillis","adjustedMillis","isNegative","Time","Zman","dateOrDuration","label","zman1","zman2","times","methodBlacklist","methodWhitelist","timeFormats","_ZmanimFormatter","formatOrTimeZone","dateFormat","format","prependZeroHours","useSeconds","useMillis","timeOrMillis","sb","dateTime","digits","dd","duration","astronomicalCalendar","json","formatter","dateList","durationList","otherList","method","includeMethod","methodObj","tagName","ZmanimFormatter","_GeoLocationUtils","destination","GeoLocationUtils","_SunTimesCalculator","deg","dayOfYear","hoursFromMeridian","sunMeanAnomaly","ra","lQuadrant","raQuadrant","sinDec","cosDec","localHour","sunRightAscensionHours","approxTimeDays","sunTrueLong","cosLocalHourAngle","localHourAngle","processedTime","SunTimesCalculator","SUNDAY","TefilaRules","tomorrow","startDate","endDate","tachanunRecitedWeekOfPurim","tachanunRecitedWeekOfHod","tachanunRecitedEndOfTishrei","tachanunRecitedWeekAfterShavuos","tachanunRecitedThirteenSivanOutOfIsrael","tachanunRecitedPesachSheni","tachanunRecited15IyarOutOfIsrael","tachanunRecitedMinchaErevLagBaomer","tachanunRecitedShivasYemeiHamiluim","tachanunRecitedFridays","tachanunRecitedSundays","tachanunRecitedMinchaAllYear","_HebrewDateFormatter","longWeekFormat","transliteratedShabbos","transliteratedHolidays","dayOfChanukah","formattedRoshChodesh","_jewishCalendar","hebrewFormat","hebrewOmerPrefix","useGershGershayim","useFinalFormLetters","useLongHebrewYears","MINUTE_CHALAKIM","HOUR_CHALAKIM","DAY_CHALAKIM","jewishYear","kviah","roshHashanaDayOfweek","returnValue","pesachDayOfweek","ALAFIM","EFES","jHundreds","jTens","jTenEnds","tavTaz","jOnes","shortNumber","singleDigitNumber","thousands","hundreds","tens","transliteratedParshaMap","parsha","specialParsha","HebrewDateFormatter","getZmanimJson","options","zmanimCalendar"],"mappings":"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","x_google_ignoreList":[0,1]}